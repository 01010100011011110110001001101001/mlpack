.TH "mlpack::fastmks::FastMKSRules< KernelType, TreeType >" 3 "Sat Mar 25 2017" "Version master" "mlpack" \" -*- nroff -*-
.ad l
.nh
.SH NAME
mlpack::fastmks::FastMKSRules< KernelType, TreeType > \- The \fBFastMKSRules\fP class is a template helper class used by \fBFastMKS\fP class when performing exact max-kernel search\&.  

.SH SYNOPSIS
.br
.PP
.SS "Classes"

.in +1c
.ti -1c
.RI "struct \fBCandidateCmp\fP"
.br
.RI "\fICompare two candidates based on the value\&. \fP"
.in -1c
.SS "Public Types"

.in +1c
.ti -1c
.RI "typedef \fBtree::TraversalInfo\fP< TreeType > \fBTraversalInfoType\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBFastMKSRules\fP (const typename TreeType::Mat &\fBreferenceSet\fP, const typename TreeType::Mat &\fBquerySet\fP, const size_t \fBk\fP, KernelType &\fBkernel\fP)"
.br
.RI "\fIConstruct the \fBFastMKSRules\fP object\&. \fP"
.ti -1c
.RI "double \fBBaseCase\fP (const size_t queryIndex, const size_t referenceIndex)"
.br
.RI "\fICompute the base case (kernel value) between two points\&. \fP"
.ti -1c
.RI "size_t \fBBaseCases\fP () const "
.br
.RI "\fIGet the number of times \fBBaseCase()\fP was called\&. \fP"
.ti -1c
.RI "size_t & \fBBaseCases\fP ()"
.br
.RI "\fIModify the number of times \fBBaseCase()\fP was called\&. \fP"
.ti -1c
.RI "void \fBGetResults\fP (arma::Mat< size_t > &indices, arma::mat &products)"
.br
.RI "\fIStore the list of candidates for each query point in the given matrices\&. \fP"
.ti -1c
.RI "double \fBRescore\fP (const size_t queryIndex, TreeType &referenceNode, const double oldScore) const "
.br
.RI "\fIRe-evaluate the score for recursion order\&. \fP"
.ti -1c
.RI "double \fBRescore\fP (TreeType &queryNode, TreeType &referenceNode, const double oldScore) const "
.br
.RI "\fIRe-evaluate the score for recursion order\&. \fP"
.ti -1c
.RI "double \fBScore\fP (const size_t queryIndex, TreeType &referenceNode)"
.br
.RI "\fIGet the score for recursion order\&. \fP"
.ti -1c
.RI "double \fBScore\fP (TreeType &queryNode, TreeType &referenceNode)"
.br
.RI "\fIGet the score for recursion order\&. \fP"
.ti -1c
.RI "size_t \fBScores\fP () const "
.br
.RI "\fIGet the number of times \fBScore()\fP was called\&. \fP"
.ti -1c
.RI "size_t & \fBScores\fP ()"
.br
.RI "\fIModify the number of times \fBScore()\fP was called\&. \fP"
.ti -1c
.RI "const \fBTraversalInfoType\fP & \fBTraversalInfo\fP () const "
.br
.ti -1c
.RI "\fBTraversalInfoType\fP & \fBTraversalInfo\fP ()"
.br
.in -1c
.SS "Private Types"

.in +1c
.ti -1c
.RI "typedef std::pair< double, size_t > \fBCandidate\fP"
.br
.RI "\fICandidate represents a possible candidate point (value, index)\&. \fP"
.ti -1c
.RI "typedef boost::heap::priority_queue< \fBCandidate\fP, boost::heap::compare< \fBCandidateCmp\fP > > \fBCandidateList\fP"
.br
.RI "\fIUse a min heap to represent the list of candidate points\&. \fP"
.in -1c
.SS "Private Member Functions"

.in +1c
.ti -1c
.RI "double \fBCalculateBound\fP (TreeType &queryNode) const "
.br
.RI "\fICalculate the bound for a given query node\&. \fP"
.ti -1c
.RI "void \fBInsertNeighbor\fP (const size_t queryIndex, const size_t index, const double product)"
.br
.RI "\fIHelper function to insert a point into the list of candidate points\&. \fP"
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "size_t \fBbaseCases\fP"
.br
.RI "\fIFor benchmarking\&. \fP"
.ti -1c
.RI "std::vector< \fBCandidateList\fP > \fBcandidates\fP"
.br
.RI "\fISet of candidates for each point\&. \fP"
.ti -1c
.RI "const size_t \fBk\fP"
.br
.RI "\fINumber of points to search for\&. \fP"
.ti -1c
.RI "KernelType & \fBkernel\fP"
.br
.RI "\fIThe instantiated kernel\&. \fP"
.ti -1c
.RI "double \fBlastKernel\fP"
.br
.RI "\fIThe last kernel evaluation resulting from \fBBaseCase()\fP\&. \fP"
.ti -1c
.RI "size_t \fBlastQueryIndex\fP"
.br
.RI "\fIThe last query index \fBBaseCase()\fP was called with\&. \fP"
.ti -1c
.RI "size_t \fBlastReferenceIndex\fP"
.br
.RI "\fIThe last reference index \fBBaseCase()\fP was called with\&. \fP"
.ti -1c
.RI "arma::vec \fBqueryKernels\fP"
.br
.RI "\fICached query set self-kernels (|| q || for each q)\&. \fP"
.ti -1c
.RI "const TreeType::Mat & \fBquerySet\fP"
.br
.RI "\fIThe query dataset\&. \fP"
.ti -1c
.RI "arma::vec \fBreferenceKernels\fP"
.br
.RI "\fICached reference set self-kernels (|| r || for each r)\&. \fP"
.ti -1c
.RI "const TreeType::Mat & \fBreferenceSet\fP"
.br
.RI "\fIThe reference dataset\&. \fP"
.ti -1c
.RI "size_t \fBscores\fP"
.br
.RI "\fIFor benchmarking\&. \fP"
.ti -1c
.RI "\fBTraversalInfoType\fP \fBtraversalInfo\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<typename KernelType, typename TreeType>
.br
class mlpack::fastmks::FastMKSRules< KernelType, TreeType >"
The \fBFastMKSRules\fP class is a template helper class used by \fBFastMKS\fP class when performing exact max-kernel search\&. 

For each point in the query dataset, it keeps track of the k best candidates in the reference dataset\&.
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIKernelType\fP Type of kernel to run \fBFastMKS\fP with\&. 
.br
\fITreeType\fP Type of tree to run \fBFastMKS\fP with; it must satisfy the TreeType policy API\&. 
.RE
.PP

.PP
Definition at line 34 of file fastmks_rules\&.hpp\&.
.SH "Member Typedef Documentation"
.PP 
.SS "template<typename KernelType , typename TreeType > typedef std::pair<double, size_t> \fBmlpack::fastmks::FastMKSRules\fP< KernelType, TreeType >::\fBCandidate\fP\fC [private]\fP"

.PP
Candidate represents a possible candidate point (value, index)\&. 
.PP
Definition at line 134 of file fastmks_rules\&.hpp\&.
.SS "template<typename KernelType , typename TreeType > typedef boost::heap::priority_queue<\fBCandidate\fP, boost::heap::compare<\fBCandidateCmp\fP> > \fBmlpack::fastmks::FastMKSRules\fP< KernelType, TreeType >::\fBCandidateList\fP\fC [private]\fP"

.PP
Use a min heap to represent the list of candidate points\&. We will use a boost::heap::priority_queue instead of a std::priority_queue because we need to iterate over all the candidates and std::priority_queue doesn't provide that interface\&. 
.PP
Definition at line 149 of file fastmks_rules\&.hpp\&.
.SS "template<typename KernelType , typename TreeType > typedef \fBtree::TraversalInfo\fP<TreeType> \fBmlpack::fastmks::FastMKSRules\fP< KernelType, TreeType >::\fBTraversalInfoType\fP"

.PP
Definition at line 122 of file fastmks_rules\&.hpp\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "template<typename KernelType , typename TreeType > \fBmlpack::fastmks::FastMKSRules\fP< KernelType, TreeType >::\fBFastMKSRules\fP (const typename TreeType::Mat & referenceSet, const typename TreeType::Mat & querySet, const size_t k, KernelType & kernel)"

.PP
Construct the \fBFastMKSRules\fP object\&. This is usually done from within the \fBFastMKS\fP class at search time\&.
.PP
\fBParameters:\fP
.RS 4
\fIreferenceSet\fP Set of reference data\&. 
.br
\fIquerySet\fP Set of query data\&. 
.br
\fIk\fP Number of candidates to search for\&. 
.br
\fIkernel\fP Kernel to run \fBFastMKS\fP with\&. 
.RE
.PP

.SH "Member Function Documentation"
.PP 
.SS "template<typename KernelType , typename TreeType > double \fBmlpack::fastmks::FastMKSRules\fP< KernelType, TreeType >::BaseCase (const size_t queryIndex, const size_t referenceIndex)"

.PP
Compute the base case (kernel value) between two points\&. 
.SS "template<typename KernelType , typename TreeType > size_t \fBmlpack::fastmks::FastMKSRules\fP< KernelType, TreeType >::BaseCases () const\fC [inline]\fP"

.PP
Get the number of times \fBBaseCase()\fP was called\&. 
.PP
Definition at line 113 of file fastmks_rules\&.hpp\&.
.PP
References mlpack::fastmks::FastMKSRules< KernelType, TreeType >::baseCases\&.
.SS "template<typename KernelType , typename TreeType > size_t& \fBmlpack::fastmks::FastMKSRules\fP< KernelType, TreeType >::BaseCases ()\fC [inline]\fP"

.PP
Modify the number of times \fBBaseCase()\fP was called\&. 
.PP
Definition at line 115 of file fastmks_rules\&.hpp\&.
.PP
References mlpack::fastmks::FastMKSRules< KernelType, TreeType >::baseCases\&.
.SS "template<typename KernelType , typename TreeType > double \fBmlpack::fastmks::FastMKSRules\fP< KernelType, TreeType >::CalculateBound (TreeType & queryNode) const\fC [private]\fP"

.PP
Calculate the bound for a given query node\&. 
.SS "template<typename KernelType , typename TreeType > void \fBmlpack::fastmks::FastMKSRules\fP< KernelType, TreeType >::GetResults (arma::Mat< size_t > & indices, arma::mat & products)"

.PP
Store the list of candidates for each query point in the given matrices\&. 
.PP
\fBParameters:\fP
.RS 4
\fIindices\fP Matrix storing lists of candidate for each query point\&. 
.br
\fIproducts\fP Matrix storing kernel value for each candidate\&. 
.RE
.PP

.SS "template<typename KernelType , typename TreeType > void \fBmlpack::fastmks::FastMKSRules\fP< KernelType, TreeType >::InsertNeighbor (const size_t queryIndex, const size_t index, const double product)\fC [private]\fP"

.PP
Helper function to insert a point into the list of candidate points\&. 
.PP
\fBParameters:\fP
.RS 4
\fIqueryIndex\fP Index of point whose neighbors we are inserting into\&. 
.br
\fIindex\fP Index of reference point which is being inserted\&. 
.br
\fIproduct\fP Kernel value for given candidate\&. 
.RE
.PP

.SS "template<typename KernelType , typename TreeType > double \fBmlpack::fastmks::FastMKSRules\fP< KernelType, TreeType >::Rescore (const size_t queryIndex, TreeType & referenceNode, const double oldScore) const"

.PP
Re-evaluate the score for recursion order\&. A low score indicates priority for recursion, while DBL_MAX indicates that a node should not be recursed into at all (it should be pruned)\&. This is used when the score has already been calculated, but another recursion may have modified the bounds for pruning\&. So the old score is checked against the new pruning bound\&.
.PP
\fBParameters:\fP
.RS 4
\fIqueryIndex\fP Index of query point\&. 
.br
\fIreferenceNode\fP Candidate node to be recursed into\&. 
.br
\fIoldScore\fP Old score produced by \fBScore()\fP (or \fBRescore()\fP)\&. 
.RE
.PP

.SS "template<typename KernelType , typename TreeType > double \fBmlpack::fastmks::FastMKSRules\fP< KernelType, TreeType >::Rescore (TreeType & queryNode, TreeType & referenceNode, const double oldScore) const"

.PP
Re-evaluate the score for recursion order\&. A low score indicates priority for recursion, while DBL_MAX indicates that a node should not be recursed into at all (it should be pruned)\&. This is used when the score has already been calculated, but another recursion may have modified the bounds for pruning\&. So the old score is checked against the new pruning bound\&.
.PP
\fBParameters:\fP
.RS 4
\fIqueryNode\fP Candidate query node to be recursed into\&. 
.br
\fIreferenceNode\fP Candidate reference node to be recursed into\&. 
.br
\fIoldScore\fP Old score produced by \fBScore()\fP (or \fBRescore()\fP)\&. 
.RE
.PP

.SS "template<typename KernelType , typename TreeType > double \fBmlpack::fastmks::FastMKSRules\fP< KernelType, TreeType >::Score (const size_t queryIndex, TreeType & referenceNode)"

.PP
Get the score for recursion order\&. A low score indicates priority for recursion, while DBL_MAX indicates that the node should not be recursed into at all (it should be pruned)\&.
.PP
\fBParameters:\fP
.RS 4
\fIqueryIndex\fP Index of query point\&. 
.br
\fIreferenceNode\fP Candidate to be recursed into\&. 
.RE
.PP

.SS "template<typename KernelType , typename TreeType > double \fBmlpack::fastmks::FastMKSRules\fP< KernelType, TreeType >::Score (TreeType & queryNode, TreeType & referenceNode)"

.PP
Get the score for recursion order\&. A low score indicates priority for recursion, while DBL_MAX indicates that the node should not be recursed into at all (it should be pruned)\&.
.PP
\fBParameters:\fP
.RS 4
\fIqueryNode\fP Candidate query node to be recursed into\&. 
.br
\fIreferenceNode\fP Candidate reference node to be recursed into\&. 
.RE
.PP

.SS "template<typename KernelType , typename TreeType > size_t \fBmlpack::fastmks::FastMKSRules\fP< KernelType, TreeType >::Scores () const\fC [inline]\fP"

.PP
Get the number of times \fBScore()\fP was called\&. 
.PP
Definition at line 118 of file fastmks_rules\&.hpp\&.
.PP
References mlpack::fastmks::FastMKSRules< KernelType, TreeType >::scores\&.
.SS "template<typename KernelType , typename TreeType > size_t& \fBmlpack::fastmks::FastMKSRules\fP< KernelType, TreeType >::Scores ()\fC [inline]\fP"

.PP
Modify the number of times \fBScore()\fP was called\&. 
.PP
Definition at line 120 of file fastmks_rules\&.hpp\&.
.PP
References mlpack::fastmks::FastMKSRules< KernelType, TreeType >::scores\&.
.SS "template<typename KernelType , typename TreeType > const \fBTraversalInfoType\fP& \fBmlpack::fastmks::FastMKSRules\fP< KernelType, TreeType >::TraversalInfo () const\fC [inline]\fP"

.PP
Definition at line 124 of file fastmks_rules\&.hpp\&.
.PP
References mlpack::fastmks::FastMKSRules< KernelType, TreeType >::traversalInfo\&.
.SS "template<typename KernelType , typename TreeType > \fBTraversalInfoType\fP& \fBmlpack::fastmks::FastMKSRules\fP< KernelType, TreeType >::TraversalInfo ()\fC [inline]\fP"

.PP
Definition at line 125 of file fastmks_rules\&.hpp\&.
.PP
References mlpack::fastmks::FastMKSRules< KernelType, TreeType >::traversalInfo\&.
.SH "Member Data Documentation"
.PP 
.SS "template<typename KernelType , typename TreeType > size_t \fBmlpack::fastmks::FastMKSRules\fP< KernelType, TreeType >::baseCases\fC [private]\fP"

.PP
For benchmarking\&. 
.PP
Definition at line 187 of file fastmks_rules\&.hpp\&.
.PP
Referenced by mlpack::fastmks::FastMKSRules< KernelType, TreeType >::BaseCases()\&.
.SS "template<typename KernelType , typename TreeType > std::vector<\fBCandidateList\fP> \fBmlpack::fastmks::FastMKSRules\fP< KernelType, TreeType >::candidates\fC [private]\fP"

.PP
Set of candidates for each point\&. 
.PP
Definition at line 152 of file fastmks_rules\&.hpp\&.
.SS "template<typename KernelType , typename TreeType > const size_t \fBmlpack::fastmks::FastMKSRules\fP< KernelType, TreeType >::k\fC [private]\fP"

.PP
Number of points to search for\&. 
.PP
Definition at line 155 of file fastmks_rules\&.hpp\&.
.SS "template<typename KernelType , typename TreeType > KernelType& \fBmlpack::fastmks::FastMKSRules\fP< KernelType, TreeType >::kernel\fC [private]\fP"

.PP
The instantiated kernel\&. 
.PP
Definition at line 163 of file fastmks_rules\&.hpp\&.
.SS "template<typename KernelType , typename TreeType > double \fBmlpack::fastmks::FastMKSRules\fP< KernelType, TreeType >::lastKernel\fC [private]\fP"

.PP
The last kernel evaluation resulting from \fBBaseCase()\fP\&. 
.PP
Definition at line 170 of file fastmks_rules\&.hpp\&.
.SS "template<typename KernelType , typename TreeType > size_t \fBmlpack::fastmks::FastMKSRules\fP< KernelType, TreeType >::lastQueryIndex\fC [private]\fP"

.PP
The last query index \fBBaseCase()\fP was called with\&. 
.PP
Definition at line 166 of file fastmks_rules\&.hpp\&.
.SS "template<typename KernelType , typename TreeType > size_t \fBmlpack::fastmks::FastMKSRules\fP< KernelType, TreeType >::lastReferenceIndex\fC [private]\fP"

.PP
The last reference index \fBBaseCase()\fP was called with\&. 
.PP
Definition at line 168 of file fastmks_rules\&.hpp\&.
.SS "template<typename KernelType , typename TreeType > arma::vec \fBmlpack::fastmks::FastMKSRules\fP< KernelType, TreeType >::queryKernels\fC [private]\fP"

.PP
Cached query set self-kernels (|| q || for each q)\&. 
.PP
Definition at line 158 of file fastmks_rules\&.hpp\&.
.SS "template<typename KernelType , typename TreeType > const TreeType::Mat& \fBmlpack::fastmks::FastMKSRules\fP< KernelType, TreeType >::querySet\fC [private]\fP"

.PP
The query dataset\&. 
.PP
Definition at line 131 of file fastmks_rules\&.hpp\&.
.SS "template<typename KernelType , typename TreeType > arma::vec \fBmlpack::fastmks::FastMKSRules\fP< KernelType, TreeType >::referenceKernels\fC [private]\fP"

.PP
Cached reference set self-kernels (|| r || for each r)\&. 
.PP
Definition at line 160 of file fastmks_rules\&.hpp\&.
.SS "template<typename KernelType , typename TreeType > const TreeType::Mat& \fBmlpack::fastmks::FastMKSRules\fP< KernelType, TreeType >::referenceSet\fC [private]\fP"

.PP
The reference dataset\&. 
.PP
Definition at line 129 of file fastmks_rules\&.hpp\&.
.SS "template<typename KernelType , typename TreeType > size_t \fBmlpack::fastmks::FastMKSRules\fP< KernelType, TreeType >::scores\fC [private]\fP"

.PP
For benchmarking\&. 
.PP
Definition at line 189 of file fastmks_rules\&.hpp\&.
.PP
Referenced by mlpack::fastmks::FastMKSRules< KernelType, TreeType >::Scores()\&.
.SS "template<typename KernelType , typename TreeType > \fBTraversalInfoType\fP \fBmlpack::fastmks::FastMKSRules\fP< KernelType, TreeType >::traversalInfo\fC [private]\fP"

.PP
Definition at line 191 of file fastmks_rules\&.hpp\&.
.PP
Referenced by mlpack::fastmks::FastMKSRules< KernelType, TreeType >::TraversalInfo()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for mlpack from the source code\&.
