.TH "mlpack::neighbor::RASearchRules< SortPolicy, MetricType, TreeType >" 3 "Sat Mar 25 2017" "Version master" "mlpack" \" -*- nroff -*-
.ad l
.nh
.SH NAME
mlpack::neighbor::RASearchRules< SortPolicy, MetricType, TreeType > \- The \fBRASearchRules\fP class is a template helper class used by \fBRASearch\fP class when performing rank-approximate search via random-sampling\&.  

.SH SYNOPSIS
.br
.PP
.SS "Classes"

.in +1c
.ti -1c
.RI "struct \fBCandidateCmp\fP"
.br
.RI "\fICompare two candidates based on the distance\&. \fP"
.in -1c
.SS "Public Types"

.in +1c
.ti -1c
.RI "typedef \fBtree::TraversalInfo\fP< TreeType > \fBTraversalInfoType\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBRASearchRules\fP (const arma::mat &\fBreferenceSet\fP, const arma::mat &\fBquerySet\fP, const size_t \fBk\fP, MetricType &\fBmetric\fP, const double tau=5, const double \fBalpha\fP=0\&.95, const bool naive=false, const bool \fBsampleAtLeaves\fP=false, const bool \fBfirstLeafExact\fP=false, const size_t \fBsingleSampleLimit\fP=20, const bool \fBsameSet\fP=false)"
.br
.RI "\fIConstruct the \fBRASearchRules\fP object\&. \fP"
.ti -1c
.RI "double \fBBaseCase\fP (const size_t queryIndex, const size_t referenceIndex)"
.br
.RI "\fIGet the distance from the query point to the reference point\&. \fP"
.ti -1c
.RI "void \fBGetResults\fP (arma::Mat< size_t > &neighbors, arma::mat &distances)"
.br
.RI "\fIStore the list of candidates for each query point in the given matrices\&. \fP"
.ti -1c
.RI "size_t \fBNumDistComputations\fP ()"
.br
.ti -1c
.RI "size_t \fBNumEffectiveSamples\fP ()"
.br
.ti -1c
.RI "double \fBRescore\fP (const size_t queryIndex, TreeType &referenceNode, const double oldScore)"
.br
.RI "\fIRe-evaluate the score for recursion order\&. \fP"
.ti -1c
.RI "double \fBRescore\fP (TreeType &queryNode, TreeType &referenceNode, const double oldScore)"
.br
.RI "\fIRe-evaluate the score for recursion order\&. \fP"
.ti -1c
.RI "double \fBScore\fP (const size_t queryIndex, TreeType &referenceNode)"
.br
.RI "\fIGet the score for recursion order\&. \fP"
.ti -1c
.RI "double \fBScore\fP (const size_t queryIndex, TreeType &referenceNode, const double baseCaseResult)"
.br
.RI "\fIGet the score for recursion order\&. \fP"
.ti -1c
.RI "double \fBScore\fP (TreeType &queryNode, TreeType &referenceNode)"
.br
.RI "\fIGet the score for recursion order\&. \fP"
.ti -1c
.RI "double \fBScore\fP (TreeType &queryNode, TreeType &referenceNode, const double baseCaseResult)"
.br
.RI "\fIGet the score for recursion order, passing the base case result (in the situation where it may be needed to calculate the recursion order)\&. \fP"
.ti -1c
.RI "const \fBTraversalInfoType\fP & \fBTraversalInfo\fP () const "
.br
.ti -1c
.RI "\fBTraversalInfoType\fP & \fBTraversalInfo\fP ()"
.br
.in -1c
.SS "Private Types"

.in +1c
.ti -1c
.RI "typedef std::pair< double, size_t > \fBCandidate\fP"
.br
.RI "\fICandidate represents a possible candidate neighbor (distance, index)\&. \fP"
.ti -1c
.RI "typedef std::priority_queue< \fBCandidate\fP, std::vector< \fBCandidate\fP >, \fBCandidateCmp\fP > \fBCandidateList\fP"
.br
.RI "\fIUse a priority queue to represent the list of candidate neighbors\&. \fP"
.in -1c
.SS "Private Member Functions"

.in +1c
.ti -1c
.RI "void \fBInsertNeighbor\fP (const size_t queryIndex, const size_t neighbor, const double distance)"
.br
.RI "\fIHelper function to insert a point into the list of candidate points\&. \fP"
.ti -1c
.RI "double \fBScore\fP (const size_t queryIndex, TreeType &referenceNode, const double distance, const double bestDistance)"
.br
.RI "\fIPerform actual scoring for single-tree case\&. \fP"
.ti -1c
.RI "double \fBScore\fP (TreeType &queryNode, TreeType &referenceNode, const double distance, const double bestDistance)"
.br
.RI "\fIPerform actual scoring for dual-tree case\&. \fP"
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "std::vector< \fBCandidateList\fP > \fBcandidates\fP"
.br
.RI "\fISet of candidate neighbors for each point\&. \fP"
.ti -1c
.RI "bool \fBfirstLeafExact\fP"
.br
.RI "\fIWhether to do exact computation on the first leaf before any sampling\&. \fP"
.ti -1c
.RI "const size_t \fBk\fP"
.br
.RI "\fINumber of neighbors to search for\&. \fP"
.ti -1c
.RI "MetricType & \fBmetric\fP"
.br
.RI "\fIThe instantiated metric\&. \fP"
.ti -1c
.RI "size_t \fBnumDistComputations\fP"
.br
.ti -1c
.RI "arma::Col< size_t > \fBnumSamplesMade\fP"
.br
.RI "\fIThe number of samples made for every query\&. \fP"
.ti -1c
.RI "size_t \fBnumSamplesReqd\fP"
.br
.RI "\fIThe minimum number of samples required per query\&. \fP"
.ti -1c
.RI "const arma::mat & \fBquerySet\fP"
.br
.RI "\fIThe query set\&. \fP"
.ti -1c
.RI "const arma::mat & \fBreferenceSet\fP"
.br
.RI "\fIThe reference set\&. \fP"
.ti -1c
.RI "bool \fBsameSet\fP"
.br
.RI "\fIIf the query and reference set are identical, this is true\&. \fP"
.ti -1c
.RI "bool \fBsampleAtLeaves\fP"
.br
.RI "\fIWhether to sample at leaves or just use all of it\&. \fP"
.ti -1c
.RI "double \fBsamplingRatio\fP"
.br
.RI "\fIThe sampling ratio\&. \fP"
.ti -1c
.RI "size_t \fBsingleSampleLimit\fP"
.br
.RI "\fIThe limit on the largest node that can be approximated by sampling\&. \fP"
.ti -1c
.RI "\fBTraversalInfoType\fP \fBtraversalInfo\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<typename SortPolicy, typename MetricType, typename TreeType>
.br
class mlpack::neighbor::RASearchRules< SortPolicy, MetricType, TreeType >"
The \fBRASearchRules\fP class is a template helper class used by \fBRASearch\fP class when performing rank-approximate search via random-sampling\&. 


.PP
\fBTemplate Parameters:\fP
.RS 4
\fISortPolicy\fP The sort policy for distances\&. 
.br
\fIMetricType\fP The metric to use for computation\&. 
.br
\fITreeType\fP The tree type to use; must adhere to the TreeType API\&. 
.RE
.PP

.PP
Definition at line 31 of file ra_search_rules\&.hpp\&.
.SH "Member Typedef Documentation"
.PP 
.SS "template<typename SortPolicy , typename MetricType , typename TreeType > typedef std::pair<double, size_t> \fBmlpack::neighbor::RASearchRules\fP< SortPolicy, MetricType, TreeType >::\fBCandidate\fP\fC [private]\fP"

.PP
Candidate represents a possible candidate neighbor (distance, index)\&. 
.PP
Definition at line 250 of file ra_search_rules\&.hpp\&.
.SS "template<typename SortPolicy , typename MetricType , typename TreeType > typedef std::priority_queue<\fBCandidate\fP, std::vector<\fBCandidate\fP>, \fBCandidateCmp\fP> \fBmlpack::neighbor::RASearchRules\fP< SortPolicy, MetricType, TreeType >::\fBCandidateList\fP\fC [private]\fP"

.PP
Use a priority queue to represent the list of candidate neighbors\&. 
.PP
Definition at line 262 of file ra_search_rules\&.hpp\&.
.SS "template<typename SortPolicy , typename MetricType , typename TreeType > typedef \fBtree::TraversalInfo\fP<TreeType> \fBmlpack::neighbor::RASearchRules\fP< SortPolicy, MetricType, TreeType >::\fBTraversalInfoType\fP"

.PP
Definition at line 237 of file ra_search_rules\&.hpp\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "template<typename SortPolicy , typename MetricType , typename TreeType > \fBmlpack::neighbor::RASearchRules\fP< SortPolicy, MetricType, TreeType >::\fBRASearchRules\fP (const arma::mat & referenceSet, const arma::mat & querySet, const size_t k, MetricType & metric, const double tau = \fC5\fP, const double alpha = \fC0\&.95\fP, const bool naive = \fCfalse\fP, const bool sampleAtLeaves = \fCfalse\fP, const bool firstLeafExact = \fCfalse\fP, const size_t singleSampleLimit = \fC20\fP, const bool sameSet = \fCfalse\fP)"

.PP
Construct the \fBRASearchRules\fP object\&. This is usually done from within the \fBRASearch\fP class at search time\&.
.PP
\fBParameters:\fP
.RS 4
\fIreferenceSet\fP Set of reference data\&. 
.br
\fIquerySet\fP Set of query data\&. 
.br
\fIk\fP Number of neighbors to search for\&. 
.br
\fImetric\fP Instantiated metric\&. 
.br
\fItau\fP The rank-approximation in percentile of the data\&. 
.br
\fIalpha\fP The desired success probability\&. 
.br
\fInaive\fP If true, the rank-approximate search will be performed by directly sampling the whole set instead of using the stratified sampling on the tree\&. 
.br
\fIsampleAtLeaves\fP Sample at leaves for faster but less accurate computation\&. 
.br
\fIfirstLeafExact\fP Traverse to the first leaf without approximation\&. 
.br
\fIsingleSampleLimit\fP The limit on the largest node that can be approximated by sampling\&. 
.br
\fIsameSet\fP If true, the query and reference set are taken to be the same, and a query point will not return itself in the results\&. 
.RE
.PP

.SH "Member Function Documentation"
.PP 
.SS "template<typename SortPolicy , typename MetricType , typename TreeType > double \fBmlpack::neighbor::RASearchRules\fP< SortPolicy, MetricType, TreeType >::BaseCase (const size_t queryIndex, const size_t referenceIndex)"

.PP
Get the distance from the query point to the reference point\&. This will update the list of candidates with the new point if appropriate\&.
.PP
\fBParameters:\fP
.RS 4
\fIqueryIndex\fP Index of query point\&. 
.br
\fIreferenceIndex\fP Index of reference point\&. 
.RE
.PP

.SS "template<typename SortPolicy , typename MetricType , typename TreeType > void \fBmlpack::neighbor::RASearchRules\fP< SortPolicy, MetricType, TreeType >::GetResults (arma::Mat< size_t > & neighbors, arma::mat & distances)"

.PP
Store the list of candidates for each query point in the given matrices\&. 
.PP
\fBParameters:\fP
.RS 4
\fIneighbors\fP Matrix storing lists of neighbors for each query point\&. 
.br
\fIdistances\fP Matrix storing distances of neighbors for each query point\&. 
.RE
.PP

.SS "template<typename SortPolicy , typename MetricType , typename TreeType > void \fBmlpack::neighbor::RASearchRules\fP< SortPolicy, MetricType, TreeType >::InsertNeighbor (const size_t queryIndex, const size_t neighbor, const double distance)\fC [private]\fP"

.PP
Helper function to insert a point into the list of candidate points\&. 
.PP
\fBParameters:\fP
.RS 4
\fIqueryIndex\fP Index of point whose neighbors we are inserting into\&. 
.br
\fIneighbor\fP Index of reference point which is being inserted\&. 
.br
\fIdistance\fP Distance from query point to reference point\&. 
.RE
.PP

.SS "template<typename SortPolicy , typename MetricType , typename TreeType > size_t \fBmlpack::neighbor::RASearchRules\fP< SortPolicy, MetricType, TreeType >::NumDistComputations ()\fC [inline]\fP"

.PP
Definition at line 228 of file ra_search_rules\&.hpp\&.
.PP
References mlpack::neighbor::RASearchRules< SortPolicy, MetricType, TreeType >::numDistComputations\&.
.SS "template<typename SortPolicy , typename MetricType , typename TreeType > size_t \fBmlpack::neighbor::RASearchRules\fP< SortPolicy, MetricType, TreeType >::NumEffectiveSamples ()\fC [inline]\fP"

.PP
Definition at line 229 of file ra_search_rules\&.hpp\&.
.PP
References mlpack::neighbor::RASearchRules< SortPolicy, MetricType, TreeType >::numSamplesMade\&.
.SS "template<typename SortPolicy , typename MetricType , typename TreeType > double \fBmlpack::neighbor::RASearchRules\fP< SortPolicy, MetricType, TreeType >::Rescore (const size_t queryIndex, TreeType & referenceNode, const double oldScore)"

.PP
Re-evaluate the score for recursion order\&. A low score indicates priority for recursion, while DBL_MAX indicates that the node should not be recursed into at all (it should be pruned)\&. This is used when the score has already been calculated, but another recursion may have modified the bounds for pruning\&. So the old score is checked against the new pruning bound\&.
.PP
For rank-approximation, it also checks if the number of samples left for a query to satisfy the rank constraint is small enough at this point of the algorithm, then this node is approximated by sampling and given a new score of 'DBL_MAX'\&.
.PP
\fBParameters:\fP
.RS 4
\fIqueryIndex\fP Index of query point\&. 
.br
\fIreferenceNode\fP Candidate node to be recursed into\&. 
.br
\fIoldScore\fP Old score produced by \fBScore()\fP (or \fBRescore()\fP)\&. 
.RE
.PP

.SS "template<typename SortPolicy , typename MetricType , typename TreeType > double \fBmlpack::neighbor::RASearchRules\fP< SortPolicy, MetricType, TreeType >::Rescore (TreeType & queryNode, TreeType & referenceNode, const double oldScore)"

.PP
Re-evaluate the score for recursion order\&. A low score indicates priority for recursion, while DBL_MAX indicates that the node should not be recursed into at all (it should be pruned)\&. This is used when the score has already been calculated, but another recursion may have modified the bounds for pruning\&. So the old score is checked against the new pruning bound\&.
.PP
For the rank-approximation, we check if the referenceNode can be approximated by sampling\&. If it can be, enough samples are made for every query in the queryNode\&. No further query-tree traversal is performed\&.
.PP
The 'NumSamplesMade' query stat is propagated up the tree\&. And then if pruning occurs (by distance or by sampling), the 'NumSamplesMade' stat is not propagated down the tree\&. If no pruning occurs, the stat is propagated down the tree\&.
.PP
\fBParameters:\fP
.RS 4
\fIqueryNode\fP Candidate query node to recurse into\&. 
.br
\fIreferenceNode\fP Candidate reference node to recurse into\&. 
.br
\fIoldScore\fP Old score produced by Socre() (or \fBRescore()\fP)\&. 
.RE
.PP

.SS "template<typename SortPolicy , typename MetricType , typename TreeType > double \fBmlpack::neighbor::RASearchRules\fP< SortPolicy, MetricType, TreeType >::Score (const size_t queryIndex, TreeType & referenceNode)"

.PP
Get the score for recursion order\&. A low score indicates priority for recursion, while DBL_MAX indicates that the node should not be recursed into at all (it should be pruned)\&.
.PP
For rank-approximation, the scoring function first checks if pruning by distance is possible\&. If yes, then the node is given the score of 'DBL_MAX' and the expected number of samples from that node are added to the number of samples made for the query\&.
.PP
If no, then the function tries to see if the node can be pruned by approximation\&. If number of samples required from this node is small enough, then that number of samples are acquired from this node and the score is set to be 'DBL_MAX'\&.
.PP
If the pruning by approximation is not possible either, the algorithm continues with the usual tree-traversal\&.
.PP
\fBParameters:\fP
.RS 4
\fIqueryIndex\fP Index of query point\&. 
.br
\fIreferenceNode\fP Candidate node to be recursed into\&. 
.RE
.PP

.SS "template<typename SortPolicy , typename MetricType , typename TreeType > double \fBmlpack::neighbor::RASearchRules\fP< SortPolicy, MetricType, TreeType >::Score (const size_t queryIndex, TreeType & referenceNode, const double baseCaseResult)"

.PP
Get the score for recursion order\&. A low score indicates priority for recursion, while DBL_MAX indicates that the node should not be recursed into at all (it should be pruned)\&.
.PP
For rank-approximation, the scoring function first checks if pruning by distance is possible\&. If yes, then the node is given the score of 'DBL_MAX' and the expected number of samples from that node are added to the number of samples made for the query\&.
.PP
If no, then the function tries to see if the node can be pruned by approximation\&. If number of samples required from this node is small enough, then that number of samples are acquired from this node and the score is set to be 'DBL_MAX'\&.
.PP
If the pruning by approximation is not possible either, the algorithm continues with the usual tree-traversal\&.
.PP
\fBParameters:\fP
.RS 4
\fIqueryIndex\fP Index of query point\&. 
.br
\fIreferenceNode\fP Candidate node to be recursed into\&. 
.br
\fIbaseCaseResult\fP Result of BaseCase(queryIndex, referenceNode)\&. 
.RE
.PP

.SS "template<typename SortPolicy , typename MetricType , typename TreeType > double \fBmlpack::neighbor::RASearchRules\fP< SortPolicy, MetricType, TreeType >::Score (TreeType & queryNode, TreeType & referenceNode)"

.PP
Get the score for recursion order\&. A low score indicates priority for recursionm while DBL_MAX indicates that the node should not be recursed into at all (it should be pruned)\&.
.PP
For the rank-approximation, we check if the referenceNode can be approximated by sampling\&. If it can be, enough samples are made for every query in the queryNode\&. No further query-tree traversal is performed\&.
.PP
The 'NumSamplesMade' query stat is propagated up the tree\&. And then if pruning occurs (by distance or by sampling), the 'NumSamplesMade' stat is not propagated down the tree\&. If no pruning occurs, the stat is propagated down the tree\&.
.PP
\fBParameters:\fP
.RS 4
\fIqueryNode\fP Candidate query node to recurse into\&. 
.br
\fIreferenceNode\fP Candidate reference node to recurse into\&. 
.RE
.PP

.SS "template<typename SortPolicy , typename MetricType , typename TreeType > double \fBmlpack::neighbor::RASearchRules\fP< SortPolicy, MetricType, TreeType >::Score (TreeType & queryNode, TreeType & referenceNode, const double baseCaseResult)"

.PP
Get the score for recursion order, passing the base case result (in the situation where it may be needed to calculate the recursion order)\&. A low score indicates priority for recursion, while DBL_MAX indicates that the node should not be recursed into at all (it should be pruned)\&.
.PP
For the rank-approximation, we check if the referenceNode can be approximated by sampling\&. If it can be, enough samples are made for every query in the queryNode\&. No further query-tree traversal is performed\&.
.PP
The 'NumSamplesMade' query stat is propagated up the tree\&. And then if pruning occurs (by distance or by sampling), the 'NumSamplesMade' stat is not propagated down the tree\&. If no pruning occurs, the stat is propagated down the tree\&.
.PP
\fBParameters:\fP
.RS 4
\fIqueryNode\fP Candidate query node to recurse into\&. 
.br
\fIreferenceNode\fP Candidate reference node to recurse into\&. 
.br
\fIbaseCaseResult\fP Result of BaseCase(queryIndex, referenceNode)\&. 
.RE
.PP

.SS "template<typename SortPolicy , typename MetricType , typename TreeType > double \fBmlpack::neighbor::RASearchRules\fP< SortPolicy, MetricType, TreeType >::Score (const size_t queryIndex, TreeType & referenceNode, const double distance, const double bestDistance)\fC [private]\fP"

.PP
Perform actual scoring for single-tree case\&. 
.SS "template<typename SortPolicy , typename MetricType , typename TreeType > double \fBmlpack::neighbor::RASearchRules\fP< SortPolicy, MetricType, TreeType >::Score (TreeType & queryNode, TreeType & referenceNode, const double distance, const double bestDistance)\fC [private]\fP"

.PP
Perform actual scoring for dual-tree case\&. 
.SS "template<typename SortPolicy , typename MetricType , typename TreeType > const \fBTraversalInfoType\fP& \fBmlpack::neighbor::RASearchRules\fP< SortPolicy, MetricType, TreeType >::TraversalInfo () const\fC [inline]\fP"

.PP
Definition at line 239 of file ra_search_rules\&.hpp\&.
.PP
References mlpack::neighbor::RASearchRules< SortPolicy, MetricType, TreeType >::traversalInfo\&.
.SS "template<typename SortPolicy , typename MetricType , typename TreeType > \fBTraversalInfoType\fP& \fBmlpack::neighbor::RASearchRules\fP< SortPolicy, MetricType, TreeType >::TraversalInfo ()\fC [inline]\fP"

.PP
Definition at line 240 of file ra_search_rules\&.hpp\&.
.PP
References mlpack::neighbor::RASearchRules< SortPolicy, MetricType, TreeType >::traversalInfo\&.
.SH "Member Data Documentation"
.PP 
.SS "template<typename SortPolicy , typename MetricType , typename TreeType > std::vector<\fBCandidateList\fP> \fBmlpack::neighbor::RASearchRules\fP< SortPolicy, MetricType, TreeType >::candidates\fC [private]\fP"

.PP
Set of candidate neighbors for each point\&. 
.PP
Definition at line 265 of file ra_search_rules\&.hpp\&.
.SS "template<typename SortPolicy , typename MetricType , typename TreeType > bool \fBmlpack::neighbor::RASearchRules\fP< SortPolicy, MetricType, TreeType >::firstLeafExact\fC [private]\fP"

.PP
Whether to do exact computation on the first leaf before any sampling\&. 
.PP
Definition at line 277 of file ra_search_rules\&.hpp\&.
.SS "template<typename SortPolicy , typename MetricType , typename TreeType > const size_t \fBmlpack::neighbor::RASearchRules\fP< SortPolicy, MetricType, TreeType >::k\fC [private]\fP"

.PP
Number of neighbors to search for\&. 
.PP
Definition at line 268 of file ra_search_rules\&.hpp\&.
.SS "template<typename SortPolicy , typename MetricType , typename TreeType > MetricType& \fBmlpack::neighbor::RASearchRules\fP< SortPolicy, MetricType, TreeType >::metric\fC [private]\fP"

.PP
The instantiated metric\&. 
.PP
Definition at line 271 of file ra_search_rules\&.hpp\&.
.SS "template<typename SortPolicy , typename MetricType , typename TreeType > size_t \fBmlpack::neighbor::RASearchRules\fP< SortPolicy, MetricType, TreeType >::numDistComputations\fC [private]\fP"

.PP
Definition at line 292 of file ra_search_rules\&.hpp\&.
.PP
Referenced by mlpack::neighbor::RASearchRules< SortPolicy, MetricType, TreeType >::NumDistComputations()\&.
.SS "template<typename SortPolicy , typename MetricType , typename TreeType > arma::Col<size_t> \fBmlpack::neighbor::RASearchRules\fP< SortPolicy, MetricType, TreeType >::numSamplesMade\fC [private]\fP"

.PP
The number of samples made for every query\&. 
.PP
Definition at line 286 of file ra_search_rules\&.hpp\&.
.PP
Referenced by mlpack::neighbor::RASearchRules< SortPolicy, MetricType, TreeType >::NumEffectiveSamples()\&.
.SS "template<typename SortPolicy , typename MetricType , typename TreeType > size_t \fBmlpack::neighbor::RASearchRules\fP< SortPolicy, MetricType, TreeType >::numSamplesReqd\fC [private]\fP"

.PP
The minimum number of samples required per query\&. 
.PP
Definition at line 283 of file ra_search_rules\&.hpp\&.
.SS "template<typename SortPolicy , typename MetricType , typename TreeType > const arma::mat& \fBmlpack::neighbor::RASearchRules\fP< SortPolicy, MetricType, TreeType >::querySet\fC [private]\fP"

.PP
The query set\&. 
.PP
Definition at line 247 of file ra_search_rules\&.hpp\&.
.SS "template<typename SortPolicy , typename MetricType , typename TreeType > const arma::mat& \fBmlpack::neighbor::RASearchRules\fP< SortPolicy, MetricType, TreeType >::referenceSet\fC [private]\fP"

.PP
The reference set\&. 
.PP
Definition at line 244 of file ra_search_rules\&.hpp\&.
.SS "template<typename SortPolicy , typename MetricType , typename TreeType > bool \fBmlpack::neighbor::RASearchRules\fP< SortPolicy, MetricType, TreeType >::sameSet\fC [private]\fP"

.PP
If the query and reference set are identical, this is true\&. 
.PP
Definition at line 295 of file ra_search_rules\&.hpp\&.
.SS "template<typename SortPolicy , typename MetricType , typename TreeType > bool \fBmlpack::neighbor::RASearchRules\fP< SortPolicy, MetricType, TreeType >::sampleAtLeaves\fC [private]\fP"

.PP
Whether to sample at leaves or just use all of it\&. 
.PP
Definition at line 274 of file ra_search_rules\&.hpp\&.
.SS "template<typename SortPolicy , typename MetricType , typename TreeType > double \fBmlpack::neighbor::RASearchRules\fP< SortPolicy, MetricType, TreeType >::samplingRatio\fC [private]\fP"

.PP
The sampling ratio\&. 
.PP
Definition at line 289 of file ra_search_rules\&.hpp\&.
.SS "template<typename SortPolicy , typename MetricType , typename TreeType > size_t \fBmlpack::neighbor::RASearchRules\fP< SortPolicy, MetricType, TreeType >::singleSampleLimit\fC [private]\fP"

.PP
The limit on the largest node that can be approximated by sampling\&. 
.PP
Definition at line 280 of file ra_search_rules\&.hpp\&.
.SS "template<typename SortPolicy , typename MetricType , typename TreeType > \fBTraversalInfoType\fP \fBmlpack::neighbor::RASearchRules\fP< SortPolicy, MetricType, TreeType >::traversalInfo\fC [private]\fP"

.PP
Definition at line 297 of file ra_search_rules\&.hpp\&.
.PP
Referenced by mlpack::neighbor::RASearchRules< SortPolicy, MetricType, TreeType >::TraversalInfo()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for mlpack from the source code\&.
