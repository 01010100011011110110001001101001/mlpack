.TH "mlpack::optimization::AdaDelta< DecomposableFunctionType >" 3 "Sat Mar 25 2017" "Version master" "mlpack" \" -*- nroff -*-
.ad l
.nh
.SH NAME
mlpack::optimization::AdaDelta< DecomposableFunctionType > \- Adadelta is an optimizer that uses two ideas to improve upon the two main drawbacks of the Adagrad method:  

.SH SYNOPSIS
.br
.PP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBAdaDelta\fP (DecomposableFunctionType &\fBfunction\fP, const double \fBrho\fP=0\&.95, const double \fBeps\fP=1e\-6, const size_t maxIterations=100000, const double tolerance=1e\-5, const bool shuffle=true)"
.br
.RI "\fIConstruct the \fBAdaDelta\fP optimizer with the given function and parameters\&. \fP"
.ti -1c
.RI "double \fBEpsilon\fP () const "
.br
.RI "\fIGet the value used to initialise the mean squared gradient parameter\&. \fP"
.ti -1c
.RI "double & \fBEpsilon\fP ()"
.br
.RI "\fIModify the value used to initialise the mean squared gradient parameter\&. \fP"
.ti -1c
.RI "const DecomposableFunctionType & \fBFunction\fP () const "
.br
.RI "\fIGet the instantiated function to be optimized\&. \fP"
.ti -1c
.RI "DecomposableFunctionType & \fBFunction\fP ()"
.br
.RI "\fIModify the instantiated function\&. \fP"
.ti -1c
.RI "size_t \fBMaxIterations\fP () const "
.br
.RI "\fIGet the maximum number of iterations (0 indicates no limit)\&. \fP"
.ti -1c
.RI "size_t & \fBMaxIterations\fP ()"
.br
.RI "\fIModify the maximum number of iterations (0 indicates no limit)\&. \fP"
.ti -1c
.RI "double \fBOptimize\fP (arma::mat &iterate)"
.br
.RI "\fIOptimize the given function using \fBAdaDelta\fP\&. \fP"
.ti -1c
.RI "double \fBRho\fP () const "
.br
.RI "\fIGet the smoothing parameter\&. \fP"
.ti -1c
.RI "double & \fBRho\fP ()"
.br
.RI "\fIModify the smoothing parameter\&. \fP"
.ti -1c
.RI "bool \fBShuffle\fP () const "
.br
.RI "\fIGet whether or not the individual functions are shuffled\&. \fP"
.ti -1c
.RI "bool & \fBShuffle\fP ()"
.br
.RI "\fIModify whether or not the individual functions are shuffled\&. \fP"
.ti -1c
.RI "double \fBTolerance\fP () const "
.br
.RI "\fIGet the tolerance for termination\&. \fP"
.ti -1c
.RI "double & \fBTolerance\fP ()"
.br
.RI "\fIModify the tolerance for termination\&. \fP"
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "double \fBeps\fP"
.br
.RI "\fIThe value used to initialise the mean squared gradient parameter\&. \fP"
.ti -1c
.RI "DecomposableFunctionType & \fBfunction\fP"
.br
.RI "\fIThe instantiated function\&. \fP"
.ti -1c
.RI "size_t \fBmaxIterations\fP"
.br
.RI "\fIThe maximum number of allowed iterations\&. \fP"
.ti -1c
.RI "double \fBrho\fP"
.br
.RI "\fIThe smoothing parameter\&. \fP"
.ti -1c
.RI "bool \fBshuffle\fP"
.br
.RI "\fIControls whether or not the individual functions are shuffled when iterating\&. \fP"
.ti -1c
.RI "double \fBtolerance\fP"
.br
.RI "\fIThe tolerance for termination\&. \fP"
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<typename DecomposableFunctionType>
.br
class mlpack::optimization::AdaDelta< DecomposableFunctionType >"
Adadelta is an optimizer that uses two ideas to improve upon the two main drawbacks of the Adagrad method: 


.IP "\(bu" 2
Accumulate Over Window
.IP "\(bu" 2
Correct Units with Hessian Approximation
.PP
.PP
For more information, see the following\&.
.PP
.PP
.nf
@article{Zeiler2012,
  author    = {Matthew D\&. Zeiler},
  title     = {{ADADELTA:} An Adaptive Learning Rate Method},
  journal   = {CoRR},
  year      = {2012}
}
.fi
.PP
.PP
For \fBAdaDelta\fP to work, a DecomposableFunctionType template parameter is required\&. This class must implement the following function:
.PP
size_t NumFunctions(); double Evaluate(const arma::mat& coordinates, const size_t i); void Gradient(const arma::mat& coordinates, const size_t i, arma::mat& gradient);
.PP
NumFunctions() should return the number of functions ( $n$), and in the other two functions, the parameter i refers to which individual function (or gradient) is being evaluated\&. So, for the case of a data-dependent function, such as NCA (see \fBmlpack::nca::NCA\fP), NumFunctions() should return the number of points in the dataset, and Evaluate(coordinates, 0) will evaluate the objective function on the first point in the dataset (presumably, the dataset is held internally in the DecomposableFunctionType)\&.
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIDecomposableFunctionType\fP Decomposable objective function type to be minimized\&. 
.RE
.PP

.PP
Definition at line 63 of file ada_delta\&.hpp\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "template<typename DecomposableFunctionType > \fBmlpack::optimization::AdaDelta\fP< DecomposableFunctionType >::\fBAdaDelta\fP (DecomposableFunctionType & function, const double rho = \fC0\&.95\fP, const double eps = \fC1e\-6\fP, const size_t maxIterations = \fC100000\fP, const double tolerance = \fC1e\-5\fP, const bool shuffle = \fCtrue\fP)"

.PP
Construct the \fBAdaDelta\fP optimizer with the given function and parameters\&. The defaults here are not necessarily good for the given problem, so it is suggested that the values used be tailored to the task at hand\&. The maximum number of iterations refers to the maximum number of points that are processed (i\&.e\&., one iteration equals one point; one iteration does not equal one pass over the dataset)\&.
.PP
\fBParameters:\fP
.RS 4
\fIfunction\fP Function to be optimized (minimized)\&. 
.br
\fIrho\fP Smoothing constant 
.br
\fIeps\fP Value used to initialise the mean squared gradient parameter\&. 
.br
\fImaxIterations\fP Maximum number of iterations allowed (0 means no limit)\&. 
.br
\fItolerance\fP Maximum absolute tolerance to terminate algorithm\&. 
.br
\fIshuffle\fP If true, the function order is shuffled; otherwise, each function is visited in linear order\&. 
.RE
.PP

.SH "Member Function Documentation"
.PP 
.SS "template<typename DecomposableFunctionType > double \fBmlpack::optimization::AdaDelta\fP< DecomposableFunctionType >::Epsilon () const\fC [inline]\fP"

.PP
Get the value used to initialise the mean squared gradient parameter\&. 
.PP
Definition at line 111 of file ada_delta\&.hpp\&.
.PP
References mlpack::optimization::AdaDelta< DecomposableFunctionType >::eps\&.
.SS "template<typename DecomposableFunctionType > double& \fBmlpack::optimization::AdaDelta\fP< DecomposableFunctionType >::Epsilon ()\fC [inline]\fP"

.PP
Modify the value used to initialise the mean squared gradient parameter\&. 
.PP
Definition at line 113 of file ada_delta\&.hpp\&.
.PP
References mlpack::optimization::AdaDelta< DecomposableFunctionType >::eps\&.
.SS "template<typename DecomposableFunctionType > const DecomposableFunctionType& \fBmlpack::optimization::AdaDelta\fP< DecomposableFunctionType >::Function () const\fC [inline]\fP"

.PP
Get the instantiated function to be optimized\&. 
.PP
Definition at line 101 of file ada_delta\&.hpp\&.
.SS "template<typename DecomposableFunctionType > DecomposableFunctionType& \fBmlpack::optimization::AdaDelta\fP< DecomposableFunctionType >::Function ()\fC [inline]\fP"

.PP
Modify the instantiated function\&. 
.PP
Definition at line 103 of file ada_delta\&.hpp\&.
.SS "template<typename DecomposableFunctionType > size_t \fBmlpack::optimization::AdaDelta\fP< DecomposableFunctionType >::MaxIterations () const\fC [inline]\fP"

.PP
Get the maximum number of iterations (0 indicates no limit)\&. 
.PP
Definition at line 116 of file ada_delta\&.hpp\&.
.PP
References mlpack::optimization::AdaDelta< DecomposableFunctionType >::maxIterations\&.
.SS "template<typename DecomposableFunctionType > size_t& \fBmlpack::optimization::AdaDelta\fP< DecomposableFunctionType >::MaxIterations ()\fC [inline]\fP"

.PP
Modify the maximum number of iterations (0 indicates no limit)\&. 
.PP
Definition at line 118 of file ada_delta\&.hpp\&.
.PP
References mlpack::optimization::AdaDelta< DecomposableFunctionType >::maxIterations\&.
.SS "template<typename DecomposableFunctionType > double \fBmlpack::optimization::AdaDelta\fP< DecomposableFunctionType >::Optimize (arma::mat & iterate)"

.PP
Optimize the given function using \fBAdaDelta\fP\&. The given starting point will be modified to store the finishing point of the algorithm, and the final objective value is returned\&.
.PP
\fBParameters:\fP
.RS 4
\fIiterate\fP Starting point (will be modified)\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Objective value of the final point\&. 
.RE
.PP

.SS "template<typename DecomposableFunctionType > double \fBmlpack::optimization::AdaDelta\fP< DecomposableFunctionType >::Rho () const\fC [inline]\fP"

.PP
Get the smoothing parameter\&. 
.PP
Definition at line 106 of file ada_delta\&.hpp\&.
.PP
References mlpack::optimization::AdaDelta< DecomposableFunctionType >::rho\&.
.SS "template<typename DecomposableFunctionType > double& \fBmlpack::optimization::AdaDelta\fP< DecomposableFunctionType >::Rho ()\fC [inline]\fP"

.PP
Modify the smoothing parameter\&. 
.PP
Definition at line 108 of file ada_delta\&.hpp\&.
.PP
References mlpack::optimization::AdaDelta< DecomposableFunctionType >::rho\&.
.SS "template<typename DecomposableFunctionType > bool \fBmlpack::optimization::AdaDelta\fP< DecomposableFunctionType >::Shuffle () const\fC [inline]\fP"

.PP
Get whether or not the individual functions are shuffled\&. 
.PP
Definition at line 126 of file ada_delta\&.hpp\&.
.PP
References mlpack::optimization::AdaDelta< DecomposableFunctionType >::shuffle\&.
.SS "template<typename DecomposableFunctionType > bool& \fBmlpack::optimization::AdaDelta\fP< DecomposableFunctionType >::Shuffle ()\fC [inline]\fP"

.PP
Modify whether or not the individual functions are shuffled\&. 
.PP
Definition at line 128 of file ada_delta\&.hpp\&.
.PP
References mlpack::optimization::AdaDelta< DecomposableFunctionType >::shuffle\&.
.SS "template<typename DecomposableFunctionType > double \fBmlpack::optimization::AdaDelta\fP< DecomposableFunctionType >::Tolerance () const\fC [inline]\fP"

.PP
Get the tolerance for termination\&. 
.PP
Definition at line 121 of file ada_delta\&.hpp\&.
.PP
References mlpack::optimization::AdaDelta< DecomposableFunctionType >::tolerance\&.
.SS "template<typename DecomposableFunctionType > double& \fBmlpack::optimization::AdaDelta\fP< DecomposableFunctionType >::Tolerance ()\fC [inline]\fP"

.PP
Modify the tolerance for termination\&. 
.PP
Definition at line 123 of file ada_delta\&.hpp\&.
.PP
References mlpack::optimization::AdaDelta< DecomposableFunctionType >::tolerance\&.
.SH "Member Data Documentation"
.PP 
.SS "template<typename DecomposableFunctionType > double \fBmlpack::optimization::AdaDelta\fP< DecomposableFunctionType >::eps\fC [private]\fP"

.PP
The value used to initialise the mean squared gradient parameter\&. 
.PP
Definition at line 138 of file ada_delta\&.hpp\&.
.PP
Referenced by mlpack::optimization::AdaDelta< DecomposableFunctionType >::Epsilon()\&.
.SS "template<typename DecomposableFunctionType > DecomposableFunctionType& \fBmlpack::optimization::AdaDelta\fP< DecomposableFunctionType >::function\fC [private]\fP"

.PP
The instantiated function\&. 
.PP
Definition at line 132 of file ada_delta\&.hpp\&.
.SS "template<typename DecomposableFunctionType > size_t \fBmlpack::optimization::AdaDelta\fP< DecomposableFunctionType >::maxIterations\fC [private]\fP"

.PP
The maximum number of allowed iterations\&. 
.PP
Definition at line 141 of file ada_delta\&.hpp\&.
.PP
Referenced by mlpack::optimization::AdaDelta< DecomposableFunctionType >::MaxIterations()\&.
.SS "template<typename DecomposableFunctionType > double \fBmlpack::optimization::AdaDelta\fP< DecomposableFunctionType >::rho\fC [private]\fP"

.PP
The smoothing parameter\&. 
.PP
Definition at line 135 of file ada_delta\&.hpp\&.
.PP
Referenced by mlpack::optimization::AdaDelta< DecomposableFunctionType >::Rho()\&.
.SS "template<typename DecomposableFunctionType > bool \fBmlpack::optimization::AdaDelta\fP< DecomposableFunctionType >::shuffle\fC [private]\fP"

.PP
Controls whether or not the individual functions are shuffled when iterating\&. 
.PP
Definition at line 148 of file ada_delta\&.hpp\&.
.PP
Referenced by mlpack::optimization::AdaDelta< DecomposableFunctionType >::Shuffle()\&.
.SS "template<typename DecomposableFunctionType > double \fBmlpack::optimization::AdaDelta\fP< DecomposableFunctionType >::tolerance\fC [private]\fP"

.PP
The tolerance for termination\&. 
.PP
Definition at line 144 of file ada_delta\&.hpp\&.
.PP
Referenced by mlpack::optimization::AdaDelta< DecomposableFunctionType >::Tolerance()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for mlpack from the source code\&.
