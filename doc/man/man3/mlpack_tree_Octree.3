.TH "mlpack::tree::Octree< MetricType, StatisticType, MatType >" 3 "Sat Mar 25 2017" "Version master" "mlpack" \" -*- nroff -*-
.ad l
.nh
.SH NAME
mlpack::tree::Octree< MetricType, StatisticType, MatType > \- 
.SH SYNOPSIS
.br
.PP
.SS "Classes"

.in +1c
.ti -1c
.RI "class \fBDualTreeTraverser\fP"
.br
.RI "\fIA dual-tree traverser; see dual_tree_traverser\&.hpp\&. \fP"
.ti -1c
.RI "class \fBSingleTreeTraverser\fP"
.br
.RI "\fIA single-tree traverser; see single_tree_traverser\&.hpp\&. \fP"
.ti -1c
.RI "struct \fBSplitInfo\fP"
.br
.RI "\fIThis is used for sorting points while splitting\&. \fP"
.in -1c
.SS "Public Types"

.in +1c
.ti -1c
.RI "typedef MatType::elem_type \fBElemType\fP"
.br
.RI "\fIThe type of element held in MatType\&. \fP"
.ti -1c
.RI "typedef MatType \fBMat\fP"
.br
.RI "\fISo other classes can use TreeType::Mat\&. \fP"
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBOctree\fP (const MatType &data, const size_t maxLeafSize=20)"
.br
.RI "\fIConstruct this as the root node of an octree on the given dataset\&. \fP"
.ti -1c
.RI "\fBOctree\fP (const MatType &data, std::vector< size_t > &oldFromNew, const size_t maxLeafSize=20)"
.br
.RI "\fIConstruct this as the root node of an octree on the given dataset\&. \fP"
.ti -1c
.RI "\fBOctree\fP (const MatType &data, std::vector< size_t > &oldFromNew, std::vector< size_t > &newFromOld, const size_t maxLeafSize=20)"
.br
.RI "\fIConstruct this as the root node of an octree on the given dataset\&. \fP"
.ti -1c
.RI "\fBOctree\fP (MatType &&data, const size_t maxLeafSize=20)"
.br
.RI "\fIConstruct this as the root node of an octree on the given dataset\&. \fP"
.ti -1c
.RI "\fBOctree\fP (MatType &&data, std::vector< size_t > &oldFromNew, const size_t maxLeafSize=20)"
.br
.RI "\fIConstruct this as the root node of an octree on the given dataset\&. \fP"
.ti -1c
.RI "\fBOctree\fP (MatType &&data, std::vector< size_t > &oldFromNew, std::vector< size_t > &newFromOld, const size_t maxLeafSize=20)"
.br
.RI "\fIConstruct this as the root node of an octree on the given dataset\&. \fP"
.ti -1c
.RI "\fBOctree\fP (\fBOctree\fP *\fBparent\fP, const size_t \fBbegin\fP, const size_t \fBcount\fP, const arma::vec &center, const double width, const size_t maxLeafSize=20)"
.br
.RI "\fIConstruct this node as a child of the given parent, starting at column begin and using count points\&. \fP"
.ti -1c
.RI "\fBOctree\fP (\fBOctree\fP *\fBparent\fP, const size_t \fBbegin\fP, const size_t \fBcount\fP, std::vector< size_t > &oldFromNew, const arma::vec &center, const double width, const size_t maxLeafSize=20)"
.br
.RI "\fIConstruct this node as a child of the given parent, starting at column begin and using count points\&. \fP"
.ti -1c
.RI "\fBOctree\fP (const \fBOctree\fP &other)"
.br
.RI "\fICopy the given tree\&. \fP"
.ti -1c
.RI "\fBOctree\fP (\fBOctree\fP &&other)"
.br
.RI "\fIMove the given tree\&. \fP"
.ti -1c
.RI "template<typename Archive > \fBOctree\fP (Archive &ar, const typename \fBstd::enable_if_t\fP< Archive::is_loading::value > *=0)"
.br
.RI "\fIInitialize the tree from a \fBboost::serialization\fP archive\&. \fP"
.ti -1c
.RI "\fB~Octree\fP ()"
.br
.RI "\fIDestroy the tree\&. \fP"
.ti -1c
.RI "const \fBbound::HRectBound\fP< MetricType > & \fBBound\fP () const "
.br
.RI "\fIReturn the bound object for this node\&. \fP"
.ti -1c
.RI "\fBbound::HRectBound\fP< MetricType > & \fBBound\fP ()"
.br
.RI "\fIModify the bound object for this node\&. \fP"
.ti -1c
.RI "void \fBCenter\fP (arma::vec &center) const "
.br
.RI "\fIStore the center of the bounding region in the given vector\&. \fP"
.ti -1c
.RI "const \fBOctree\fP & \fBChild\fP (const size_t child) const "
.br
.RI "\fIReturn the specified child\&. \fP"
.ti -1c
.RI "\fBOctree\fP & \fBChild\fP (const size_t child)"
.br
.RI "\fIReturn the specified child\&. \fP"
.ti -1c
.RI "\fBOctree\fP *& \fBChildPtr\fP (const size_t child)"
.br
.RI "\fIReturn the pointer to the given child\&. \fP"
.ti -1c
.RI "const MatType & \fBDataset\fP () const "
.br
.RI "\fIReturn the dataset used by this node\&. \fP"
.ti -1c
.RI "size_t \fBDescendant\fP (const size_t index) const "
.br
.RI "\fIReturn the index (with reference to the dataset) of a particular descendant\&. \fP"
.ti -1c
.RI "\fBElemType\fP \fBFurthestDescendantDistance\fP () const "
.br
.RI "\fIReturn the furthest possible descendant distance\&. \fP"
.ti -1c
.RI "\fBElemType\fP \fBFurthestPointDistance\fP () const "
.br
.RI "\fIReturn the furthest distance to a point held in this node\&. \fP"
.ti -1c
.RI "template<typename VecType > size_t \fBGetFurthestChild\fP (const VecType &point, typename \fBstd::enable_if_t\fP< \fBIsVector\fP< VecType >::value > *=0) const "
.br
.RI "\fIReturn the index of the furthest child node to the given query point\&. \fP"
.ti -1c
.RI "size_t \fBGetFurthestChild\fP (const \fBOctree\fP &queryNode) const "
.br
.RI "\fIReturn the index of the furthest child node to the given query node\&. \fP"
.ti -1c
.RI "template<typename VecType > size_t \fBGetNearestChild\fP (const VecType &point, typename \fBstd::enable_if_t\fP< \fBIsVector\fP< VecType >::value > *=0) const "
.br
.RI "\fIReturn the index of the nearest child node to the given query point\&. \fP"
.ti -1c
.RI "size_t \fBGetNearestChild\fP (const \fBOctree\fP &queryNode) const "
.br
.RI "\fIReturn the index of the nearest child node to the given query node\&. \fP"
.ti -1c
.RI "bool \fBIsLeaf\fP () const "
.br
.RI "\fIReturn whether or not the node is a leaf\&. \fP"
.ti -1c
.RI "\fBElemType\fP \fBMaxDistance\fP (const \fBOctree\fP &other) const "
.br
.RI "\fIReturn the maximum distance to another node\&. \fP"
.ti -1c
.RI "template<typename VecType > \fBElemType\fP \fBMaxDistance\fP (const VecType &point, typename \fBstd::enable_if_t\fP< \fBIsVector\fP< VecType >::value > *=0) const "
.br
.RI "\fIReturn the maximum distance to the given point\&. \fP"
.ti -1c
.RI "MetricType \fBMetric\fP () const "
.br
.RI "\fIReturn the metric that this tree uses\&. \fP"
.ti -1c
.RI "\fBElemType\fP \fBMinDistance\fP (const \fBOctree\fP &other) const "
.br
.RI "\fIReturn the minimum distance to another node\&. \fP"
.ti -1c
.RI "template<typename VecType > \fBElemType\fP \fBMinDistance\fP (const VecType &point, typename \fBstd::enable_if_t\fP< \fBIsVector\fP< VecType >::value > *=0) const "
.br
.RI "\fIReturn the minimum distance to the given point\&. \fP"
.ti -1c
.RI "\fBElemType\fP \fBMinimumBoundDistance\fP () const "
.br
.RI "\fIReturn the minimum distance from the center of the node to any bound edge\&. \fP"
.ti -1c
.RI "size_t \fBNumChildren\fP () const "
.br
.RI "\fIReturn the number of children in this node\&. \fP"
.ti -1c
.RI "size_t \fBNumDescendants\fP () const "
.br
.RI "\fIReturn the number of descendants of this node\&. \fP"
.ti -1c
.RI "size_t \fBNumPoints\fP () const "
.br
.RI "\fIReturn the number of points in this node (0 if not a leaf)\&. \fP"
.ti -1c
.RI "\fBOctree\fP * \fBParent\fP () const "
.br
.RI "\fIGet the pointer to the parent\&. \fP"
.ti -1c
.RI "\fBOctree\fP *& \fBParent\fP ()"
.br
.RI "\fIModify the pointer to the parent (be careful!)\&. \fP"
.ti -1c
.RI "\fBElemType\fP \fBParentDistance\fP () const "
.br
.RI "\fIReturn the distance from the center of this node to the center of the parent node\&. \fP"
.ti -1c
.RI "\fBElemType\fP & \fBParentDistance\fP ()"
.br
.RI "\fIModify the distance from the center of this node to the center of the parent node\&. \fP"
.ti -1c
.RI "size_t \fBPoint\fP (const size_t index) const "
.br
.RI "\fIReturn the index (with reference to the dataset) of a particular point in this node\&. \fP"
.ti -1c
.RI "\fBmath::RangeType\fP< \fBElemType\fP > \fBRangeDistance\fP (const \fBOctree\fP &other) const "
.br
.RI "\fIReturn the minimum and maximum distance to another node\&. \fP"
.ti -1c
.RI "template<typename VecType > \fBmath::RangeType\fP< \fBElemType\fP > \fBRangeDistance\fP (const VecType &point, typename \fBstd::enable_if_t\fP< \fBIsVector\fP< VecType >::value > *=0) const "
.br
.RI "\fIReturn the minimum and maximum distance to another node\&. \fP"
.ti -1c
.RI "template<typename Archive > void \fBSerialize\fP (Archive &ar, const unsigned int)"
.br
.RI "\fISerialize the tree\&. \fP"
.ti -1c
.RI "const StatisticType & \fBStat\fP () const "
.br
.RI "\fIReturn the statistic object for this node\&. \fP"
.ti -1c
.RI "StatisticType & \fBStat\fP ()"
.br
.RI "\fIModify the statistic object for this node\&. \fP"
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "\fBOctree\fP ()"
.br
.RI "\fIA default constructor\&. \fP"
.in -1c
.SS "Private Member Functions"

.in +1c
.ti -1c
.RI "void \fBSplitNode\fP (const arma::vec &center, const double width, const size_t maxLeafSize)"
.br
.RI "\fISplit the node, using the given center and the given maximum width of this node\&. \fP"
.ti -1c
.RI "void \fBSplitNode\fP (const arma::vec &center, const double width, std::vector< size_t > &oldFromNew, const size_t maxLeafSize)"
.br
.RI "\fISplit the node, using the given center and the given maximum width of this node, and fill the mappings vector\&. \fP"
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "size_t \fBbegin\fP"
.br
.RI "\fIThe index of the first point in the dataset contained in this node (and its children)\&. \fP"
.ti -1c
.RI "\fBbound::HRectBound\fP< MetricType > \fBbound\fP"
.br
.RI "\fIThe minimum bounding rectangle of the points held in the node (and its children)\&. \fP"
.ti -1c
.RI "std::vector< \fBOctree\fP * > \fBchildren\fP"
.br
.RI "\fIThe children held by this node\&. \fP"
.ti -1c
.RI "size_t \fBcount\fP"
.br
.RI "\fIThe number of points of the dataset contained in this node (and its children)\&. \fP"
.ti -1c
.RI "MatType * \fBdataset\fP"
.br
.RI "\fIThe dataset\&. \fP"
.ti -1c
.RI "\fBElemType\fP \fBfurthestDescendantDistance\fP"
.br
.RI "\fIThe distance to the furthest descendant, cached to speed things up\&. \fP"
.ti -1c
.RI "MetricType \fBmetric\fP"
.br
.RI "\fIAn instantiated metric\&. \fP"
.ti -1c
.RI "\fBOctree\fP * \fBparent\fP"
.br
.RI "\fIThe parent (NULL if this node is the root)\&. \fP"
.ti -1c
.RI "\fBElemType\fP \fBparentDistance\fP"
.br
.RI "\fIThe distance from the center of this node to the center of the parent\&. \fP"
.ti -1c
.RI "StatisticType \fBstat\fP"
.br
.RI "\fIThe statistic\&. \fP"
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<typename MetricType = metric::EuclideanDistance, typename StatisticType = EmptyStatistic, typename MatType = arma::mat>
.br
class mlpack::tree::Octree< MetricType, StatisticType, MatType >"

.PP
Definition at line 25 of file octree\&.hpp\&.
.SH "Member Typedef Documentation"
.PP 
.SS "template<typename MetricType  = metric::EuclideanDistance, typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat> typedef MatType::elem_type \fBmlpack::tree::Octree\fP< MetricType, StatisticType, MatType >::\fBElemType\fP"

.PP
The type of element held in MatType\&. 
.PP
Definition at line 31 of file octree\&.hpp\&.
.SS "template<typename MetricType  = metric::EuclideanDistance, typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat> typedef MatType \fBmlpack::tree::Octree\fP< MetricType, StatisticType, MatType >::\fBMat\fP"

.PP
So other classes can use TreeType::Mat\&. 
.PP
Definition at line 29 of file octree\&.hpp\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "template<typename MetricType  = metric::EuclideanDistance, typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat> \fBmlpack::tree::Octree\fP< MetricType, StatisticType, MatType >::\fBOctree\fP (const MatType & data, const size_t maxLeafSize = \fC20\fP)"

.PP
Construct this as the root node of an octree on the given dataset\&. This copies the dataset\&. If you don't want to copy the input dataset, consider using the constructor that takes an rvalue reference and use std::move()\&.
.PP
\fBParameters:\fP
.RS 4
\fIdata\fP Dataset to create tree from\&. This will be copied! 
.br
\fImaxLeafSize\fP Maximum number of points in a leaf node\&. 
.RE
.PP

.SS "template<typename MetricType  = metric::EuclideanDistance, typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat> \fBmlpack::tree::Octree\fP< MetricType, StatisticType, MatType >::\fBOctree\fP (const MatType & data, std::vector< size_t > & oldFromNew, const size_t maxLeafSize = \fC20\fP)"

.PP
Construct this as the root node of an octree on the given dataset\&. This copies the dataset and modifies its ordering; a mapping of the old point indices to the new point indices is filled\&. If you don't want the matrix to be copied, consider using the constructor that takes an rvalue reference and use std::move()\&.
.PP
\fBParameters:\fP
.RS 4
\fIdata\fP Dataset to create tree from\&. This will be copied! 
.br
\fIoldFromNew\fP Vector which will be filled with the old positions for each new point\&. 
.br
\fImaxLeafSize\fP Maximum number of points in a leaf node\&. 
.RE
.PP

.SS "template<typename MetricType  = metric::EuclideanDistance, typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat> \fBmlpack::tree::Octree\fP< MetricType, StatisticType, MatType >::\fBOctree\fP (const MatType & data, std::vector< size_t > & oldFromNew, std::vector< size_t > & newFromOld, const size_t maxLeafSize = \fC20\fP)"

.PP
Construct this as the root node of an octree on the given dataset\&. This copies the dataset and modifies its ordering; a mapping of the old point indices to the new point indices is filled, and a mapping of the new point indices to the old point indices is filled\&. If you don't want the matrix to be copied, consider using the constructor that takes an rvalue reference and use std::move()\&.
.PP
\fBParameters:\fP
.RS 4
\fIdata\fP Dataset to create tree from\&. This will be copied! 
.br
\fIoldFromNew\fP Vector which will be filled with the old positions for each new point\&. 
.br
\fInewFromOld\fP Vector which will be filled with the new positions for each old point\&. 
.br
\fImaxLeafSize\fP Maximum number of points in a leaf node\&. 
.RE
.PP

.SS "template<typename MetricType  = metric::EuclideanDistance, typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat> \fBmlpack::tree::Octree\fP< MetricType, StatisticType, MatType >::\fBOctree\fP (MatType && data, const size_t maxLeafSize = \fC20\fP)"

.PP
Construct this as the root node of an octree on the given dataset\&. This will take ownership of the dataset; if you don't want this, consider using the constructor that takes a const reference to the dataset\&.
.PP
\fBParameters:\fP
.RS 4
\fIdata\fP Dataset to create tree from\&. This will be copied! 
.br
\fImaxLeafSize\fP Maximum number of points in a leaf node\&. 
.RE
.PP

.SS "template<typename MetricType  = metric::EuclideanDistance, typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat> \fBmlpack::tree::Octree\fP< MetricType, StatisticType, MatType >::\fBOctree\fP (MatType && data, std::vector< size_t > & oldFromNew, const size_t maxLeafSize = \fC20\fP)"

.PP
Construct this as the root node of an octree on the given dataset\&. This will take ownership of the dataset; if you don't want this, consider using the constructor that takes a const reference to the dataset\&. This modifies the ordering of the dataset; a mapping of the old point indices to the new point indices is filled\&.
.PP
\fBParameters:\fP
.RS 4
\fIdata\fP Dataset to create tree from\&. This will be copied! 
.br
\fIoldFromNew\fP Vector which will be filled with the old positions for each new point\&. 
.br
\fImaxLeafSize\fP Maximum number of points in a leaf node\&. 
.RE
.PP

.SS "template<typename MetricType  = metric::EuclideanDistance, typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat> \fBmlpack::tree::Octree\fP< MetricType, StatisticType, MatType >::\fBOctree\fP (MatType && data, std::vector< size_t > & oldFromNew, std::vector< size_t > & newFromOld, const size_t maxLeafSize = \fC20\fP)"

.PP
Construct this as the root node of an octree on the given dataset\&. This will take ownership of the dataset; if you don't want this, consider using the constructor that takes a const reference to the dataset\&. This modifies the ordering of the dataset; a mapping of the old point indices to the new point indices is filled, and a mapping of the new point indices to the old point indices is filled\&.
.PP
\fBParameters:\fP
.RS 4
\fIdata\fP Dataset to create tree from\&. This will be copied! 
.br
\fIoldFromNew\fP Vector which will be filled with the old positions for each new point\&. 
.br
\fInewFromOld\fP Vector which will be filled with the new positions for each old point\&. 
.br
\fImaxLeafSize\fP Maximum number of points in a leaf node\&. 
.RE
.PP

.SS "template<typename MetricType  = metric::EuclideanDistance, typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat> \fBmlpack::tree::Octree\fP< MetricType, StatisticType, MatType >::\fBOctree\fP (\fBOctree\fP< MetricType, StatisticType, MatType > * parent, const size_t begin, const size_t count, const arma::vec & center, const double width, const size_t maxLeafSize = \fC20\fP)"

.PP
Construct this node as a child of the given parent, starting at column begin and using count points\&. The ordering of that subset of points in the parent's data matrix will be modified! This is used for recursive tree-building by the other constructors that don't specify point indices\&.
.PP
\fBParameters:\fP
.RS 4
\fIparent\fP Parent of this node\&. Its dataset will be modified! 
.br
\fIbegin\fP Index of point to start tree construction with\&. 
.br
\fIcount\fP Number of points to use to construct tree\&. 
.br
\fIcenter\fP Center of the node (for splitting)\&. 
.br
\fIwidth\fP Width of the node in each dimension\&. 
.br
\fImaxLeafSize\fP Maximum number of points in a leaf node\&. 
.RE
.PP

.SS "template<typename MetricType  = metric::EuclideanDistance, typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat> \fBmlpack::tree::Octree\fP< MetricType, StatisticType, MatType >::\fBOctree\fP (\fBOctree\fP< MetricType, StatisticType, MatType > * parent, const size_t begin, const size_t count, std::vector< size_t > & oldFromNew, const arma::vec & center, const double width, const size_t maxLeafSize = \fC20\fP)"

.PP
Construct this node as a child of the given parent, starting at column begin and using count points\&. The ordering of that subset of points in the parent's data matrix will be modified! This is used for recursive tree-building by the other constructors that don't specify point indices\&.
.PP
A mapping of the old point indices to the new point indices is filled, but it is expected that the vector is already allocated with size greater than or equal to (begin + count), and if that is not true, invalid memory reads (and writes) will occur\&.
.PP
\fBParameters:\fP
.RS 4
\fIparent\fP Parent of this node\&. Its dataset will be modified! 
.br
\fIbegin\fP Index of point to start tree construction with\&. 
.br
\fIcount\fP Number of points to use to construct tree\&. 
.br
\fIoldFromNew\fP Vector which will be filled with the old positions for each new point\&. 
.br
\fIcenter\fP Center of the node (for splitting)\&. 
.br
\fIwidth\fP Width of the node in each dimension\&. 
.br
\fImaxLeafSize\fP Maximum number of points in a leaf node\&. 
.RE
.PP

.SS "template<typename MetricType  = metric::EuclideanDistance, typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat> \fBmlpack::tree::Octree\fP< MetricType, StatisticType, MatType >::\fBOctree\fP (const \fBOctree\fP< MetricType, StatisticType, MatType > & other)"

.PP
Copy the given tree\&. Be careful! This may use a lot of memory\&.
.PP
\fBParameters:\fP
.RS 4
\fIother\fP Tree to copy from\&. 
.RE
.PP

.SS "template<typename MetricType  = metric::EuclideanDistance, typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat> \fBmlpack::tree::Octree\fP< MetricType, StatisticType, MatType >::\fBOctree\fP (\fBOctree\fP< MetricType, StatisticType, MatType > && other)"

.PP
Move the given tree\&. The tree passed as a parameter will be emptied and will not be usable after this call\&.
.PP
\fBParameters:\fP
.RS 4
\fIother\fP Tree to move\&. 
.RE
.PP

.SS "template<typename MetricType  = metric::EuclideanDistance, typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat> template<typename Archive > \fBmlpack::tree::Octree\fP< MetricType, StatisticType, MatType >::\fBOctree\fP (Archive & ar, const typename \fBstd::enable_if_t\fP< Archive::is_loading::value > * = \fC0\fP)"

.PP
Initialize the tree from a \fBboost::serialization\fP archive\&. 
.PP
\fBParameters:\fP
.RS 4
\fIar\fP Archive to load tree from\&. Must be an iarchive, not an oarchive\&. 
.RE
.PP

.SS "template<typename MetricType  = metric::EuclideanDistance, typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat> \fBmlpack::tree::Octree\fP< MetricType, StatisticType, MatType >::~\fBOctree\fP ()"

.PP
Destroy the tree\&. 
.SS "template<typename MetricType  = metric::EuclideanDistance, typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat> \fBmlpack::tree::Octree\fP< MetricType, StatisticType, MatType >::\fBOctree\fP ()\fC [protected]\fP"

.PP
A default constructor\&. This is meant to only be used with \fBboost::serialization\fP, which is allowed with the friend declaration below\&. This does not return a valid treee! The method must be protected, so that the serialization shim can work with the default constructor\&. 
.PP
Referenced by mlpack::tree::Octree< MetricType, StatisticType, MatType >::Center()\&.
.SH "Member Function Documentation"
.PP 
.SS "template<typename MetricType  = metric::EuclideanDistance, typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat> const \fBbound::HRectBound\fP<MetricType>& \fBmlpack::tree::Octree\fP< MetricType, StatisticType, MatType >::Bound () const\fC [inline]\fP"

.PP
Return the bound object for this node\&. 
.PP
Definition at line 247 of file octree\&.hpp\&.
.PP
References mlpack::tree::Octree< MetricType, StatisticType, MatType >::bound\&.
.SS "template<typename MetricType  = metric::EuclideanDistance, typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat> \fBbound::HRectBound\fP<MetricType>& \fBmlpack::tree::Octree\fP< MetricType, StatisticType, MatType >::Bound ()\fC [inline]\fP"

.PP
Modify the bound object for this node\&. 
.PP
Definition at line 249 of file octree\&.hpp\&.
.PP
References mlpack::tree::Octree< MetricType, StatisticType, MatType >::bound\&.
.SS "template<typename MetricType  = metric::EuclideanDistance, typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat> void \fBmlpack::tree::Octree\fP< MetricType, StatisticType, MatType >::Center (arma::vec & center) const\fC [inline]\fP"

.PP
Store the center of the bounding region in the given vector\&. 
.PP
Definition at line 383 of file octree\&.hpp\&.
.PP
References mlpack::bound::HRectBound< MetricType, ElemType >::Center(), mlpack::tree::Octree< MetricType, StatisticType, MatType >::Octree(), and mlpack::tree::Octree< MetricType, StatisticType, MatType >::Serialize()\&.
.SS "template<typename MetricType  = metric::EuclideanDistance, typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat> const \fBOctree\fP& \fBmlpack::tree::Octree\fP< MetricType, StatisticType, MatType >::Child (const size_t child) const\fC [inline]\fP"

.PP
Return the specified child\&. If the index is out of bounds, unspecified behavior will occur\&. 
.PP
Definition at line 326 of file octree\&.hpp\&.
.SS "template<typename MetricType  = metric::EuclideanDistance, typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat> \fBOctree\fP& \fBmlpack::tree::Octree\fP< MetricType, StatisticType, MatType >::Child (const size_t child)\fC [inline]\fP"

.PP
Return the specified child\&. If the index is out of bounds, unspecified behavior will occur\&. 
.PP
Definition at line 332 of file octree\&.hpp\&.
.SS "template<typename MetricType  = metric::EuclideanDistance, typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat> \fBOctree\fP*& \fBmlpack::tree::Octree\fP< MetricType, StatisticType, MatType >::ChildPtr (const size_t child)\fC [inline]\fP"

.PP
Return the pointer to the given child\&. This allows the child itself to be modified\&. 
.PP
Definition at line 338 of file octree\&.hpp\&.
.PP
References mlpack::tree::Octree< MetricType, StatisticType, MatType >::Descendant(), mlpack::tree::Octree< MetricType, StatisticType, MatType >::MaxDistance(), mlpack::tree::Octree< MetricType, StatisticType, MatType >::MinDistance(), mlpack::tree::Octree< MetricType, StatisticType, MatType >::NumDescendants(), mlpack::tree::Octree< MetricType, StatisticType, MatType >::NumPoints(), mlpack::tree::Octree< MetricType, StatisticType, MatType >::Point(), and mlpack::tree::Octree< MetricType, StatisticType, MatType >::RangeDistance()\&.
.SS "template<typename MetricType  = metric::EuclideanDistance, typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat> const MatType& \fBmlpack::tree::Octree\fP< MetricType, StatisticType, MatType >::Dataset () const\fC [inline]\fP"

.PP
Return the dataset used by this node\&. 
.PP
Definition at line 239 of file octree\&.hpp\&.
.PP
References mlpack::tree::Octree< MetricType, StatisticType, MatType >::dataset\&.
.SS "template<typename MetricType  = metric::EuclideanDistance, typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat> size_t \fBmlpack::tree::Octree\fP< MetricType, StatisticType, MatType >::Descendant (const size_t index) const"

.PP
Return the index (with reference to the dataset) of a particular descendant\&. 
.PP
Referenced by mlpack::tree::Octree< MetricType, StatisticType, MatType >::ChildPtr()\&.
.SS "template<typename MetricType  = metric::EuclideanDistance, typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat> \fBElemType\fP \fBmlpack::tree::Octree\fP< MetricType, StatisticType, MatType >::FurthestDescendantDistance () const"

.PP
Return the furthest possible descendant distance\&. This returns the maximum distance from the centroid to the edge of the bound and not the empirical quantity which is the actual furthest descendant distance\&. So the actual furthest descendant distance may be less than what this method returns (but it will never be greater than this)\&. 
.PP
Referenced by mlpack::tree::Octree< MetricType, StatisticType, MatType >::IsLeaf()\&.
.SS "template<typename MetricType  = metric::EuclideanDistance, typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat> \fBElemType\fP \fBmlpack::tree::Octree\fP< MetricType, StatisticType, MatType >::FurthestPointDistance () const"

.PP
Return the furthest distance to a point held in this node\&. If this is not a leaf node, then the distance is 0 because the node holds no points\&. 
.PP
Referenced by mlpack::tree::Octree< MetricType, StatisticType, MatType >::IsLeaf()\&.
.SS "template<typename MetricType  = metric::EuclideanDistance, typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat> template<typename VecType > size_t \fBmlpack::tree::Octree\fP< MetricType, StatisticType, MatType >::GetFurthestChild (const VecType & point, typename \fBstd::enable_if_t\fP< \fBIsVector\fP< VecType >::value > * = \fC0\fP) const"

.PP
Return the index of the furthest child node to the given query point\&. If this is a leaf node, it will return \fBNumChildren()\fP (invalid index)\&. 
.PP
Referenced by mlpack::tree::Octree< MetricType, StatisticType, MatType >::IsLeaf(), and mlpack::tree::Octree< MetricType, StatisticType, MatType >::Metric()\&.
.SS "template<typename MetricType  = metric::EuclideanDistance, typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat> size_t \fBmlpack::tree::Octree\fP< MetricType, StatisticType, MatType >::GetFurthestChild (const \fBOctree\fP< MetricType, StatisticType, MatType > & queryNode) const"

.PP
Return the index of the furthest child node to the given query node\&. If it can't decide, it will return \fBNumChildren()\fP (invalid index)\&. 
.SS "template<typename MetricType  = metric::EuclideanDistance, typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat> template<typename VecType > size_t \fBmlpack::tree::Octree\fP< MetricType, StatisticType, MatType >::GetNearestChild (const VecType & point, typename \fBstd::enable_if_t\fP< \fBIsVector\fP< VecType >::value > * = \fC0\fP) const"

.PP
Return the index of the nearest child node to the given query point\&. If this is a leaf node, it will return \fBNumChildren()\fP (invalid index)\&. 
.PP
Referenced by mlpack::tree::Octree< MetricType, StatisticType, MatType >::IsLeaf(), and mlpack::tree::Octree< MetricType, StatisticType, MatType >::Metric()\&.
.SS "template<typename MetricType  = metric::EuclideanDistance, typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat> size_t \fBmlpack::tree::Octree\fP< MetricType, StatisticType, MatType >::GetNearestChild (const \fBOctree\fP< MetricType, StatisticType, MatType > & queryNode) const"

.PP
Return the index of the nearest child node to the given query node\&. If it can't decide, it will return \fBNumChildren()\fP (invalid index)\&. 
.SS "template<typename MetricType  = metric::EuclideanDistance, typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat> bool \fBmlpack::tree::Octree\fP< MetricType, StatisticType, MatType >::IsLeaf () const\fC [inline]\fP"

.PP
Return whether or not the node is a leaf\&. 
.PP
Definition at line 283 of file octree\&.hpp\&.
.PP
References mlpack::tree::Octree< MetricType, StatisticType, MatType >::FurthestDescendantDistance(), mlpack::tree::Octree< MetricType, StatisticType, MatType >::FurthestPointDistance(), mlpack::tree::Octree< MetricType, StatisticType, MatType >::GetFurthestChild(), mlpack::tree::Octree< MetricType, StatisticType, MatType >::GetNearestChild(), mlpack::tree::Octree< MetricType, StatisticType, MatType >::MinimumBoundDistance(), and mlpack::tree::Octree< MetricType, StatisticType, MatType >::NumChildren()\&.
.SS "template<typename MetricType  = metric::EuclideanDistance, typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat> \fBElemType\fP \fBmlpack::tree::Octree\fP< MetricType, StatisticType, MatType >::MaxDistance (const \fBOctree\fP< MetricType, StatisticType, MatType > & other) const"

.PP
Return the maximum distance to another node\&. 
.PP
Referenced by mlpack::tree::Octree< MetricType, StatisticType, MatType >::ChildPtr()\&.
.SS "template<typename MetricType  = metric::EuclideanDistance, typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat> template<typename VecType > \fBElemType\fP \fBmlpack::tree::Octree\fP< MetricType, StatisticType, MatType >::MaxDistance (const VecType & point, typename \fBstd::enable_if_t\fP< \fBIsVector\fP< VecType >::value > * = \fC0\fP) const"

.PP
Return the maximum distance to the given point\&. 
.SS "template<typename MetricType  = metric::EuclideanDistance, typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat> MetricType \fBmlpack::tree::Octree\fP< MetricType, StatisticType, MatType >::Metric () const\fC [inline]\fP"

.PP
Return the metric that this tree uses\&. 
.PP
Definition at line 260 of file octree\&.hpp\&.
.PP
References mlpack::tree::Octree< MetricType, StatisticType, MatType >::GetFurthestChild(), and mlpack::tree::Octree< MetricType, StatisticType, MatType >::GetNearestChild()\&.
.SS "template<typename MetricType  = metric::EuclideanDistance, typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat> \fBElemType\fP \fBmlpack::tree::Octree\fP< MetricType, StatisticType, MatType >::MinDistance (const \fBOctree\fP< MetricType, StatisticType, MatType > & other) const"

.PP
Return the minimum distance to another node\&. 
.PP
Referenced by mlpack::tree::Octree< MetricType, StatisticType, MatType >::ChildPtr()\&.
.SS "template<typename MetricType  = metric::EuclideanDistance, typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat> template<typename VecType > \fBElemType\fP \fBmlpack::tree::Octree\fP< MetricType, StatisticType, MatType >::MinDistance (const VecType & point, typename \fBstd::enable_if_t\fP< \fBIsVector\fP< VecType >::value > * = \fC0\fP) const"

.PP
Return the minimum distance to the given point\&. 
.SS "template<typename MetricType  = metric::EuclideanDistance, typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat> \fBElemType\fP \fBmlpack::tree::Octree\fP< MetricType, StatisticType, MatType >::MinimumBoundDistance () const"

.PP
Return the minimum distance from the center of the node to any bound edge\&. 
.PP
Referenced by mlpack::tree::Octree< MetricType, StatisticType, MatType >::IsLeaf()\&.
.SS "template<typename MetricType  = metric::EuclideanDistance, typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat> size_t \fBmlpack::tree::Octree\fP< MetricType, StatisticType, MatType >::NumChildren () const"

.PP
Return the number of children in this node\&. 
.PP
Referenced by mlpack::tree::Octree< MetricType, StatisticType, MatType >::IsLeaf(), and mlpack::tree::Octree< MetricType, StatisticType, MatType >::Stat()\&.
.SS "template<typename MetricType  = metric::EuclideanDistance, typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat> size_t \fBmlpack::tree::Octree\fP< MetricType, StatisticType, MatType >::NumDescendants () const"

.PP
Return the number of descendants of this node\&. 
.PP
Referenced by mlpack::tree::Octree< MetricType, StatisticType, MatType >::ChildPtr()\&.
.SS "template<typename MetricType  = metric::EuclideanDistance, typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat> size_t \fBmlpack::tree::Octree\fP< MetricType, StatisticType, MatType >::NumPoints () const"

.PP
Return the number of points in this node (0 if not a leaf)\&. 
.PP
Referenced by mlpack::tree::Octree< MetricType, StatisticType, MatType >::ChildPtr()\&.
.SS "template<typename MetricType  = metric::EuclideanDistance, typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat> \fBOctree\fP* \fBmlpack::tree::Octree\fP< MetricType, StatisticType, MatType >::Parent () const\fC [inline]\fP"

.PP
Get the pointer to the parent\&. 
.PP
Definition at line 242 of file octree\&.hpp\&.
.PP
References mlpack::tree::Octree< MetricType, StatisticType, MatType >::parent\&.
.SS "template<typename MetricType  = metric::EuclideanDistance, typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat> \fBOctree\fP*& \fBmlpack::tree::Octree\fP< MetricType, StatisticType, MatType >::Parent ()\fC [inline]\fP"

.PP
Modify the pointer to the parent (be careful!)\&. 
.PP
Definition at line 244 of file octree\&.hpp\&.
.PP
References mlpack::tree::Octree< MetricType, StatisticType, MatType >::parent\&.
.SS "template<typename MetricType  = metric::EuclideanDistance, typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat> \fBElemType\fP \fBmlpack::tree::Octree\fP< MetricType, StatisticType, MatType >::ParentDistance () const\fC [inline]\fP"

.PP
Return the distance from the center of this node to the center of the parent node\&. 
.PP
Definition at line 317 of file octree\&.hpp\&.
.PP
References mlpack::tree::Octree< MetricType, StatisticType, MatType >::parentDistance\&.
.SS "template<typename MetricType  = metric::EuclideanDistance, typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat> \fBElemType\fP& \fBmlpack::tree::Octree\fP< MetricType, StatisticType, MatType >::ParentDistance ()\fC [inline]\fP"

.PP
Modify the distance from the center of this node to the center of the parent node\&. 
.PP
Definition at line 320 of file octree\&.hpp\&.
.PP
References mlpack::tree::Octree< MetricType, StatisticType, MatType >::parentDistance\&.
.SS "template<typename MetricType  = metric::EuclideanDistance, typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat> size_t \fBmlpack::tree::Octree\fP< MetricType, StatisticType, MatType >::Point (const size_t index) const"

.PP
Return the index (with reference to the dataset) of a particular point in this node\&. If the given index is invalid (i\&.e\&. if it is greater than \fBNumPoints()\fP), the indices returned will be invalid\&. 
.PP
Referenced by mlpack::tree::Octree< MetricType, StatisticType, MatType >::ChildPtr()\&.
.SS "template<typename MetricType  = metric::EuclideanDistance, typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat> \fBmath::RangeType\fP<\fBElemType\fP> \fBmlpack::tree::Octree\fP< MetricType, StatisticType, MatType >::RangeDistance (const \fBOctree\fP< MetricType, StatisticType, MatType > & other) const"

.PP
Return the minimum and maximum distance to another node\&. 
.PP
Referenced by mlpack::tree::Octree< MetricType, StatisticType, MatType >::ChildPtr()\&.
.SS "template<typename MetricType  = metric::EuclideanDistance, typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat> template<typename VecType > \fBmath::RangeType\fP<\fBElemType\fP> \fBmlpack::tree::Octree\fP< MetricType, StatisticType, MatType >::RangeDistance (const VecType & point, typename \fBstd::enable_if_t\fP< \fBIsVector\fP< VecType >::value > * = \fC0\fP) const"

.PP
Return the minimum and maximum distance to another node\&. 
.SS "template<typename MetricType  = metric::EuclideanDistance, typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat> template<typename Archive > void \fBmlpack::tree::Octree\fP< MetricType, StatisticType, MatType >::Serialize (Archive & ar, const unsigned int)"

.PP
Serialize the tree\&. 
.PP
Referenced by mlpack::tree::Octree< MetricType, StatisticType, MatType >::Center()\&.
.SS "template<typename MetricType  = metric::EuclideanDistance, typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat> void \fBmlpack::tree::Octree\fP< MetricType, StatisticType, MatType >::SplitNode (const arma::vec & center, const double width, const size_t maxLeafSize)\fC [private]\fP"

.PP
Split the node, using the given center and the given maximum width of this node\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcenter\fP Center of the node\&. 
.br
\fIwidth\fP Width of the current node\&. 
.br
\fImaxLeafSize\fP Maximum number of points allowed in a leaf\&. 
.RE
.PP

.SS "template<typename MetricType  = metric::EuclideanDistance, typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat> void \fBmlpack::tree::Octree\fP< MetricType, StatisticType, MatType >::SplitNode (const arma::vec & center, const double width, std::vector< size_t > & oldFromNew, const size_t maxLeafSize)\fC [private]\fP"

.PP
Split the node, using the given center and the given maximum width of this node, and fill the mappings vector\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcenter\fP Center of the node\&. 
.br
\fIwidth\fP Width of the current node\&. 
.br
\fIoldFromNew\fP Mappings from old to new\&. 
.br
\fImaxLeafSize\fP Maximum number of points allowed in a leaf\&. 
.RE
.PP

.SS "template<typename MetricType  = metric::EuclideanDistance, typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat> const StatisticType& \fBmlpack::tree::Octree\fP< MetricType, StatisticType, MatType >::Stat () const\fC [inline]\fP"

.PP
Return the statistic object for this node\&. 
.PP
Definition at line 252 of file octree\&.hpp\&.
.PP
References mlpack::tree::Octree< MetricType, StatisticType, MatType >::stat\&.
.SS "template<typename MetricType  = metric::EuclideanDistance, typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat> StatisticType& \fBmlpack::tree::Octree\fP< MetricType, StatisticType, MatType >::Stat ()\fC [inline]\fP"

.PP
Modify the statistic object for this node\&. 
.PP
Definition at line 254 of file octree\&.hpp\&.
.PP
References mlpack::tree::Octree< MetricType, StatisticType, MatType >::NumChildren(), and mlpack::tree::Octree< MetricType, StatisticType, MatType >::stat\&.
.SH "Member Data Documentation"
.PP 
.SS "template<typename MetricType  = metric::EuclideanDistance, typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat> size_t \fBmlpack::tree::Octree\fP< MetricType, StatisticType, MatType >::begin\fC [private]\fP"

.PP
The index of the first point in the dataset contained in this node (and its children)\&. 
.PP
Definition at line 47 of file octree\&.hpp\&.
.SS "template<typename MetricType  = metric::EuclideanDistance, typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat> \fBbound::HRectBound\fP<MetricType> \fBmlpack::tree::Octree\fP< MetricType, StatisticType, MatType >::bound\fC [private]\fP"

.PP
The minimum bounding rectangle of the points held in the node (and its children)\&. 
.PP
Definition at line 53 of file octree\&.hpp\&.
.PP
Referenced by mlpack::tree::Octree< MetricType, StatisticType, MatType >::Bound()\&.
.SS "template<typename MetricType  = metric::EuclideanDistance, typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat> std::vector<\fBOctree\fP*> \fBmlpack::tree::Octree\fP< MetricType, StatisticType, MatType >::children\fC [private]\fP"

.PP
The children held by this node\&. 
.PP
Definition at line 39 of file octree\&.hpp\&.
.SS "template<typename MetricType  = metric::EuclideanDistance, typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat> size_t \fBmlpack::tree::Octree\fP< MetricType, StatisticType, MatType >::count\fC [private]\fP"

.PP
The number of points of the dataset contained in this node (and its children)\&. 
.PP
Definition at line 50 of file octree\&.hpp\&.
.SS "template<typename MetricType  = metric::EuclideanDistance, typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat> MatType* \fBmlpack::tree::Octree\fP< MetricType, StatisticType, MatType >::dataset\fC [private]\fP"

.PP
The dataset\&. 
.PP
Definition at line 55 of file octree\&.hpp\&.
.PP
Referenced by mlpack::tree::Octree< MetricType, StatisticType, MatType >::Dataset()\&.
.SS "template<typename MetricType  = metric::EuclideanDistance, typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat> \fBElemType\fP \fBmlpack::tree::Octree\fP< MetricType, StatisticType, MatType >::furthestDescendantDistance\fC [private]\fP"

.PP
The distance to the furthest descendant, cached to speed things up\&. 
.PP
Definition at line 63 of file octree\&.hpp\&.
.SS "template<typename MetricType  = metric::EuclideanDistance, typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat> MetricType \fBmlpack::tree::Octree\fP< MetricType, StatisticType, MatType >::metric\fC [private]\fP"

.PP
An instantiated metric\&. 
.PP
Definition at line 65 of file octree\&.hpp\&.
.SS "template<typename MetricType  = metric::EuclideanDistance, typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat> \fBOctree\fP* \fBmlpack::tree::Octree\fP< MetricType, StatisticType, MatType >::parent\fC [private]\fP"

.PP
The parent (NULL if this node is the root)\&. 
.PP
Definition at line 57 of file octree\&.hpp\&.
.PP
Referenced by mlpack::tree::Octree< MetricType, StatisticType, MatType >::Parent()\&.
.SS "template<typename MetricType  = metric::EuclideanDistance, typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat> \fBElemType\fP \fBmlpack::tree::Octree\fP< MetricType, StatisticType, MatType >::parentDistance\fC [private]\fP"

.PP
The distance from the center of this node to the center of the parent\&. 
.PP
Definition at line 61 of file octree\&.hpp\&.
.PP
Referenced by mlpack::tree::Octree< MetricType, StatisticType, MatType >::ParentDistance()\&.
.SS "template<typename MetricType  = metric::EuclideanDistance, typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat> StatisticType \fBmlpack::tree::Octree\fP< MetricType, StatisticType, MatType >::stat\fC [private]\fP"

.PP
The statistic\&. 
.PP
Definition at line 59 of file octree\&.hpp\&.
.PP
Referenced by mlpack::tree::Octree< MetricType, StatisticType, MatType >::Stat()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for mlpack from the source code\&.
