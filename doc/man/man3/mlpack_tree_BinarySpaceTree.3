.TH "mlpack::tree::BinarySpaceTree< MetricType, StatisticType, MatType, BoundType, SplitType >" 3 "Sat Mar 25 2017" "Version master" "mlpack" \" -*- nroff -*-
.ad l
.nh
.SH NAME
mlpack::tree::BinarySpaceTree< MetricType, StatisticType, MatType, BoundType, SplitType > \- A binary space partitioning tree, such as a KD-tree or a ball tree\&.  

.SH SYNOPSIS
.br
.PP
.SS "Classes"

.in +1c
.ti -1c
.RI "class \fBBreadthFirstDualTreeTraverser\fP"
.br
.ti -1c
.RI "class \fBDualTreeTraverser\fP"
.br
.RI "\fIA dual-tree traverser for binary space trees; see dual_tree_traverser\&.hpp\&. \fP"
.ti -1c
.RI "class \fBSingleTreeTraverser\fP"
.br
.RI "\fIA single-tree traverser for binary space trees; see single_tree_traverser\&.hpp for implementation\&. \fP"
.in -1c
.SS "Public Types"

.in +1c
.ti -1c
.RI "typedef MatType::elem_type \fBElemType\fP"
.br
.RI "\fIThe type of element held in MatType\&. \fP"
.ti -1c
.RI "typedef MatType \fBMat\fP"
.br
.RI "\fISo other classes can use TreeType::Mat\&. \fP"
.ti -1c
.RI "typedef SplitType< BoundType< MetricType >, MatType > \fBSplit\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBBinarySpaceTree\fP (const MatType &data, const size_t maxLeafSize=20)"
.br
.RI "\fIConstruct this as the root node of a binary space tree using the given dataset\&. \fP"
.ti -1c
.RI "\fBBinarySpaceTree\fP (const MatType &data, std::vector< size_t > &oldFromNew, const size_t maxLeafSize=20)"
.br
.RI "\fIConstruct this as the root node of a binary space tree using the given dataset\&. \fP"
.ti -1c
.RI "\fBBinarySpaceTree\fP (const MatType &data, std::vector< size_t > &oldFromNew, std::vector< size_t > &newFromOld, const size_t maxLeafSize=20)"
.br
.RI "\fIConstruct this as the root node of a binary space tree using the given dataset\&. \fP"
.ti -1c
.RI "\fBBinarySpaceTree\fP (MatType &&data, const size_t maxLeafSize=20)"
.br
.RI "\fIConstruct this as the root node of a binary space tree using the given dataset\&. \fP"
.ti -1c
.RI "\fBBinarySpaceTree\fP (MatType &&data, std::vector< size_t > &oldFromNew, const size_t maxLeafSize=20)"
.br
.RI "\fIConstruct this as the root node of a binary space tree using the given dataset\&. \fP"
.ti -1c
.RI "\fBBinarySpaceTree\fP (MatType &&data, std::vector< size_t > &oldFromNew, std::vector< size_t > &newFromOld, const size_t maxLeafSize=20)"
.br
.RI "\fIConstruct this as the root node of a binary space tree using the given dataset\&. \fP"
.ti -1c
.RI "\fBBinarySpaceTree\fP (\fBBinarySpaceTree\fP *\fBparent\fP, const size_t \fBbegin\fP, const size_t \fBcount\fP, SplitType< BoundType< MetricType >, MatType > &splitter, const size_t maxLeafSize=20)"
.br
.RI "\fIConstruct this node as a child of the given parent, starting at column begin and using count points\&. \fP"
.ti -1c
.RI "\fBBinarySpaceTree\fP (\fBBinarySpaceTree\fP *\fBparent\fP, const size_t \fBbegin\fP, const size_t \fBcount\fP, std::vector< size_t > &oldFromNew, SplitType< BoundType< MetricType >, MatType > &splitter, const size_t maxLeafSize=20)"
.br
.RI "\fIConstruct this node as a child of the given parent, starting at column begin and using count points\&. \fP"
.ti -1c
.RI "\fBBinarySpaceTree\fP (\fBBinarySpaceTree\fP *\fBparent\fP, const size_t \fBbegin\fP, const size_t \fBcount\fP, std::vector< size_t > &oldFromNew, std::vector< size_t > &newFromOld, SplitType< BoundType< MetricType >, MatType > &splitter, const size_t maxLeafSize=20)"
.br
.RI "\fIConstruct this node as a child of the given parent, starting at column begin and using count points\&. \fP"
.ti -1c
.RI "\fBBinarySpaceTree\fP (const \fBBinarySpaceTree\fP &other)"
.br
.RI "\fICreate a binary space tree by copying the other tree\&. \fP"
.ti -1c
.RI "\fBBinarySpaceTree\fP (\fBBinarySpaceTree\fP &&other)"
.br
.RI "\fIMove constructor for a \fBBinarySpaceTree\fP; possess all the members of the given tree\&. \fP"
.ti -1c
.RI "template<typename Archive > \fBBinarySpaceTree\fP (Archive &ar, const typename \fBstd::enable_if_t\fP< Archive::is_loading::value > *=0)"
.br
.RI "\fIInitialize the tree from a \fBboost::serialization\fP archive\&. \fP"
.ti -1c
.RI "\fB~BinarySpaceTree\fP ()"
.br
.RI "\fIDeletes this node, deallocating the memory for the children and calling their destructors in turn\&. \fP"
.ti -1c
.RI "size_t \fBBegin\fP () const "
.br
.RI "\fIReturn the index of the beginning point of this subset\&. \fP"
.ti -1c
.RI "size_t & \fBBegin\fP ()"
.br
.RI "\fIModify the index of the beginning point of this subset\&. \fP"
.ti -1c
.RI "const BoundType< MetricType > & \fBBound\fP () const "
.br
.RI "\fIReturn the bound object for this node\&. \fP"
.ti -1c
.RI "BoundType< MetricType > & \fBBound\fP ()"
.br
.RI "\fIReturn the bound object for this node\&. \fP"
.ti -1c
.RI "void \fBCenter\fP (arma::vec &center) const "
.br
.RI "\fIStore the center of the bounding region in the given vector\&. \fP"
.ti -1c
.RI "\fBBinarySpaceTree\fP & \fBChild\fP (const size_t child) const "
.br
.RI "\fIReturn the specified child (0 will be left, 1 will be right)\&. \fP"
.ti -1c
.RI "\fBBinarySpaceTree\fP *& \fBChildPtr\fP (const size_t child)"
.br
.ti -1c
.RI "size_t \fBCount\fP () const "
.br
.RI "\fIReturn the number of points in this subset\&. \fP"
.ti -1c
.RI "size_t & \fBCount\fP ()"
.br
.RI "\fIModify the number of points in this subset\&. \fP"
.ti -1c
.RI "const MatType & \fBDataset\fP () const "
.br
.RI "\fIGet the dataset which the tree is built on\&. \fP"
.ti -1c
.RI "MatType & \fBDataset\fP ()"
.br
.RI "\fIModify the dataset which the tree is built on\&. Be careful! \fP"
.ti -1c
.RI "size_t \fBDescendant\fP (const size_t index) const "
.br
.RI "\fIReturn the index (with reference to the dataset) of a particular descendant of this node\&. \fP"
.ti -1c
.RI "\fBElemType\fP \fBFurthestDescendantDistance\fP () const "
.br
.RI "\fIReturn the furthest possible descendant distance\&. \fP"
.ti -1c
.RI "\fBElemType\fP \fBFurthestPointDistance\fP () const "
.br
.RI "\fIReturn the furthest distance to a point held in this node\&. \fP"
.ti -1c
.RI "template<typename VecType > size_t \fBGetFurthestChild\fP (const VecType &point, typename \fBstd::enable_if_t\fP< \fBIsVector\fP< VecType >::value > *=0)"
.br
.RI "\fIReturn the index of the furthest child node to the given query point\&. \fP"
.ti -1c
.RI "size_t \fBGetFurthestChild\fP (const \fBBinarySpaceTree\fP &queryNode)"
.br
.RI "\fIReturn the index of the furthest child node to the given query node\&. \fP"
.ti -1c
.RI "template<typename VecType > size_t \fBGetNearestChild\fP (const VecType &point, typename \fBstd::enable_if_t\fP< \fBIsVector\fP< VecType >::value > *=0)"
.br
.RI "\fIReturn the index of the nearest child node to the given query point\&. \fP"
.ti -1c
.RI "size_t \fBGetNearestChild\fP (const \fBBinarySpaceTree\fP &queryNode)"
.br
.RI "\fIReturn the index of the nearest child node to the given query node\&. \fP"
.ti -1c
.RI "bool \fBIsLeaf\fP () const "
.br
.RI "\fIReturn whether or not this node is a leaf (true if it has no children)\&. \fP"
.ti -1c
.RI "\fBBinarySpaceTree\fP * \fBLeft\fP () const "
.br
.RI "\fIGets the left child of this node\&. \fP"
.ti -1c
.RI "\fBBinarySpaceTree\fP *& \fBLeft\fP ()"
.br
.RI "\fIModify the left child of this node\&. \fP"
.ti -1c
.RI "\fBElemType\fP \fBMaxDistance\fP (const \fBBinarySpaceTree\fP &other) const "
.br
.RI "\fIReturn the maximum distance to another node\&. \fP"
.ti -1c
.RI "template<typename VecType > \fBElemType\fP \fBMaxDistance\fP (const VecType &point, typename \fBstd::enable_if_t\fP< \fBIsVector\fP< VecType >::value > *=0) const "
.br
.RI "\fIReturn the maximum distance to another point\&. \fP"
.ti -1c
.RI "MetricType \fBMetric\fP () const "
.br
.RI "\fIGet the metric that the tree uses\&. \fP"
.ti -1c
.RI "\fBElemType\fP \fBMinDistance\fP (const \fBBinarySpaceTree\fP &other) const "
.br
.RI "\fIReturn the minimum distance to another node\&. \fP"
.ti -1c
.RI "template<typename VecType > \fBElemType\fP \fBMinDistance\fP (const VecType &point, typename \fBstd::enable_if_t\fP< \fBIsVector\fP< VecType >::value > *=0) const "
.br
.RI "\fIReturn the minimum distance to another point\&. \fP"
.ti -1c
.RI "\fBElemType\fP \fBMinimumBoundDistance\fP () const "
.br
.RI "\fIReturn the minimum distance from the center of the node to any bound edge\&. \fP"
.ti -1c
.RI "size_t \fBNumChildren\fP () const "
.br
.RI "\fIReturn the number of children in this node\&. \fP"
.ti -1c
.RI "size_t \fBNumDescendants\fP () const "
.br
.RI "\fIReturn the number of descendants of this node\&. \fP"
.ti -1c
.RI "size_t \fBNumPoints\fP () const "
.br
.RI "\fIReturn the number of points in this node (0 if not a leaf)\&. \fP"
.ti -1c
.RI "\fBBinarySpaceTree\fP * \fBParent\fP () const "
.br
.RI "\fIGets the parent of this node\&. \fP"
.ti -1c
.RI "\fBBinarySpaceTree\fP *& \fBParent\fP ()"
.br
.RI "\fIModify the parent of this node\&. \fP"
.ti -1c
.RI "\fBElemType\fP \fBParentDistance\fP () const "
.br
.RI "\fIReturn the distance from the center of this node to the center of the parent node\&. \fP"
.ti -1c
.RI "\fBElemType\fP & \fBParentDistance\fP ()"
.br
.RI "\fIModify the distance from the center of this node to the center of the parent node\&. \fP"
.ti -1c
.RI "size_t \fBPoint\fP (const size_t index) const "
.br
.RI "\fIReturn the index (with reference to the dataset) of a particular point in this node\&. \fP"
.ti -1c
.RI "\fBmath::RangeType\fP< \fBElemType\fP > \fBRangeDistance\fP (const \fBBinarySpaceTree\fP &other) const "
.br
.RI "\fIReturn the minimum and maximum distance to another node\&. \fP"
.ti -1c
.RI "template<typename VecType > \fBmath::RangeType\fP< \fBElemType\fP > \fBRangeDistance\fP (const VecType &point, typename \fBstd::enable_if_t\fP< \fBIsVector\fP< VecType >::value > *=0) const "
.br
.RI "\fIReturn the minimum and maximum distance to another point\&. \fP"
.ti -1c
.RI "\fBBinarySpaceTree\fP * \fBRight\fP () const "
.br
.RI "\fIGets the right child of this node\&. \fP"
.ti -1c
.RI "\fBBinarySpaceTree\fP *& \fBRight\fP ()"
.br
.RI "\fIModify the right child of this node\&. \fP"
.ti -1c
.RI "template<typename Archive > void \fBSerialize\fP (Archive &ar, const unsigned int version)"
.br
.RI "\fISerialize the tree\&. \fP"
.ti -1c
.RI "const StatisticType & \fBStat\fP () const "
.br
.RI "\fIReturn the statistic object for this node\&. \fP"
.ti -1c
.RI "StatisticType & \fBStat\fP ()"
.br
.RI "\fIReturn the statistic object for this node\&. \fP"
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "\fBBinarySpaceTree\fP ()"
.br
.RI "\fIA default constructor\&. \fP"
.in -1c
.SS "Private Member Functions"

.in +1c
.ti -1c
.RI "void \fBSplitNode\fP (const size_t maxLeafSize, SplitType< BoundType< MetricType >, MatType > &splitter)"
.br
.RI "\fISplits the current node, assigning its left and right children recursively\&. \fP"
.ti -1c
.RI "void \fBSplitNode\fP (std::vector< size_t > &oldFromNew, const size_t maxLeafSize, SplitType< BoundType< MetricType >, MatType > &splitter)"
.br
.RI "\fISplits the current node, assigning its left and right children recursively\&. \fP"
.ti -1c
.RI "template<typename BoundType2 > void \fBUpdateBound\fP (BoundType2 &boundToUpdate)"
.br
.RI "\fIUpdate the bound of the current node\&. \fP"
.ti -1c
.RI "void \fBUpdateBound\fP (\fBbound::HollowBallBound\fP< MetricType > &boundToUpdate)"
.br
.RI "\fIUpdate the bound of the current node\&. \fP"
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "size_t \fBbegin\fP"
.br
.RI "\fIThe index of the first point in the dataset contained in this node (and its children)\&. \fP"
.ti -1c
.RI "BoundType< MetricType > \fBbound\fP"
.br
.RI "\fIThe bound object for this node\&. \fP"
.ti -1c
.RI "size_t \fBcount\fP"
.br
.RI "\fIThe number of points of the dataset contained in this node (and its children)\&. \fP"
.ti -1c
.RI "MatType * \fBdataset\fP"
.br
.RI "\fIThe dataset\&. \fP"
.ti -1c
.RI "\fBElemType\fP \fBfurthestDescendantDistance\fP"
.br
.RI "\fIThe worst possible distance to the furthest descendant, cached to speed things up\&. \fP"
.ti -1c
.RI "\fBBinarySpaceTree\fP * \fBleft\fP"
.br
.RI "\fIThe left child node\&. \fP"
.ti -1c
.RI "\fBElemType\fP \fBminimumBoundDistance\fP"
.br
.RI "\fIThe minimum distance from the center to any edge of the bound\&. \fP"
.ti -1c
.RI "\fBBinarySpaceTree\fP * \fBparent\fP"
.br
.RI "\fIThe parent node (NULL if this is the root of the tree)\&. \fP"
.ti -1c
.RI "\fBElemType\fP \fBparentDistance\fP"
.br
.RI "\fIThe distance from the centroid of this node to the centroid of the parent\&. \fP"
.ti -1c
.RI "\fBBinarySpaceTree\fP * \fBright\fP"
.br
.RI "\fIThe right child node\&. \fP"
.ti -1c
.RI "StatisticType \fBstat\fP"
.br
.RI "\fIAny extra data contained in the node\&. \fP"
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<typename MetricType, typename StatisticType = EmptyStatistic, typename MatType = arma::mat, template< typename BoundMetricType, typename\&.\&.\&. > class BoundType = bound::HRectBound, template< typename SplitBoundType, typename SplitMatType > class SplitType = MidpointSplit>
.br
class mlpack::tree::BinarySpaceTree< MetricType, StatisticType, MatType, BoundType, SplitType >"
A binary space partitioning tree, such as a KD-tree or a ball tree\&. 

Once the bound and type of dataset is defined, the tree will construct itself\&. Call the constructor with the dataset to build the tree on, and the entire tree will be built\&.
.PP
This particular tree does not allow growth, so you cannot add or delete nodes from it\&. If you need to add or delete a node, the better procedure is to rebuild the tree entirely\&.
.PP
This tree does take one runtime parameter in the constructor, which is the max leaf size to be used\&.
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIMetricType\fP The metric used for tree-building\&. The BoundType may place restrictions on the metrics that can be used\&. 
.br
\fIStatisticType\fP Extra data contained in the node\&. See \fBstatistic\&.hpp\fP for the necessary skeleton interface\&. 
.br
\fIMatType\fP The dataset class\&. 
.br
\fIBoundType\fP The bound used for each node\&. HRectBound, the default, requires that an LMetric<> is used for MetricType (so, EuclideanDistance, ManhattanDistance, etc\&.)\&. 
.br
\fISplitType\fP The class that partitions the dataset/points at a particular node into two parts\&. Its definition decides the way this split is done\&. 
.RE
.PP

.PP
Definition at line 54 of file binary_space_tree\&.hpp\&.
.SH "Member Typedef Documentation"
.PP 
.SS "template<typename MetricType , typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat, template< typename BoundMetricType, typename\&.\&.\&. > class BoundType = bound::HRectBound, template< typename SplitBoundType, typename SplitMatType > class SplitType = MidpointSplit> typedef MatType::elem_type \fBmlpack::tree::BinarySpaceTree\fP< MetricType, StatisticType, MatType, BoundType, SplitType >::\fBElemType\fP"

.PP
The type of element held in MatType\&. 
.PP
Definition at line 60 of file binary_space_tree\&.hpp\&.
.SS "template<typename MetricType , typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat, template< typename BoundMetricType, typename\&.\&.\&. > class BoundType = bound::HRectBound, template< typename SplitBoundType, typename SplitMatType > class SplitType = MidpointSplit> typedef MatType \fBmlpack::tree::BinarySpaceTree\fP< MetricType, StatisticType, MatType, BoundType, SplitType >::\fBMat\fP"

.PP
So other classes can use TreeType::Mat\&. 
.PP
Definition at line 58 of file binary_space_tree\&.hpp\&.
.SS "template<typename MetricType , typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat, template< typename BoundMetricType, typename\&.\&.\&. > class BoundType = bound::HRectBound, template< typename SplitBoundType, typename SplitMatType > class SplitType = MidpointSplit> typedef SplitType<BoundType<MetricType>, MatType> \fBmlpack::tree::BinarySpaceTree\fP< MetricType, StatisticType, MatType, BoundType, SplitType >::\fBSplit\fP"

.PP
Definition at line 62 of file binary_space_tree\&.hpp\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "template<typename MetricType , typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat, template< typename BoundMetricType, typename\&.\&.\&. > class BoundType = bound::HRectBound, template< typename SplitBoundType, typename SplitMatType > class SplitType = MidpointSplit> \fBmlpack::tree::BinarySpaceTree\fP< MetricType, StatisticType, MatType, BoundType, SplitType >::\fBBinarySpaceTree\fP (const MatType & data, const size_t maxLeafSize = \fC20\fP)"

.PP
Construct this as the root node of a binary space tree using the given dataset\&. This will copy the input matrix; if you don't want this, consider using the constructor that takes an rvalue reference and use std::move()\&.
.PP
\fBParameters:\fP
.RS 4
\fIdata\fP Dataset to create tree from\&. This will be copied! 
.br
\fImaxLeafSize\fP Size of each leaf in the tree\&. 
.RE
.PP

.SS "template<typename MetricType , typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat, template< typename BoundMetricType, typename\&.\&.\&. > class BoundType = bound::HRectBound, template< typename SplitBoundType, typename SplitMatType > class SplitType = MidpointSplit> \fBmlpack::tree::BinarySpaceTree\fP< MetricType, StatisticType, MatType, BoundType, SplitType >::\fBBinarySpaceTree\fP (const MatType & data, std::vector< size_t > & oldFromNew, const size_t maxLeafSize = \fC20\fP)"

.PP
Construct this as the root node of a binary space tree using the given dataset\&. This will copy the input matrix and modify its ordering; a mapping of the old point indices to the new point indices is filled\&. If you don't want the matrix to be copied, consider using the constructor that takes an rvalue reference and use std::move()\&.
.PP
\fBParameters:\fP
.RS 4
\fIdata\fP Dataset to create tree from\&. This will be copied! 
.br
\fIoldFromNew\fP Vector which will be filled with the old positions for each new point\&. 
.br
\fImaxLeafSize\fP Size of each leaf in the tree\&. 
.RE
.PP

.SS "template<typename MetricType , typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat, template< typename BoundMetricType, typename\&.\&.\&. > class BoundType = bound::HRectBound, template< typename SplitBoundType, typename SplitMatType > class SplitType = MidpointSplit> \fBmlpack::tree::BinarySpaceTree\fP< MetricType, StatisticType, MatType, BoundType, SplitType >::\fBBinarySpaceTree\fP (const MatType & data, std::vector< size_t > & oldFromNew, std::vector< size_t > & newFromOld, const size_t maxLeafSize = \fC20\fP)"

.PP
Construct this as the root node of a binary space tree using the given dataset\&. This will copy the input matrix and modify its ordering; a mapping of the old point indices to the new point indices is filled, as well as a mapping of the new point indices to the old point indices\&. If you don't want the matrix to be copied, consider using the constructor that takes an rvalue reference and use std::move()\&.
.PP
\fBParameters:\fP
.RS 4
\fIdata\fP Dataset to create tree from\&. This will be copied! 
.br
\fIoldFromNew\fP Vector which will be filled with the old positions for each new point\&. 
.br
\fInewFromOld\fP Vector which will be filled with the new positions for each old point\&. 
.br
\fImaxLeafSize\fP Size of each leaf in the tree\&. 
.RE
.PP

.SS "template<typename MetricType , typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat, template< typename BoundMetricType, typename\&.\&.\&. > class BoundType = bound::HRectBound, template< typename SplitBoundType, typename SplitMatType > class SplitType = MidpointSplit> \fBmlpack::tree::BinarySpaceTree\fP< MetricType, StatisticType, MatType, BoundType, SplitType >::\fBBinarySpaceTree\fP (MatType && data, const size_t maxLeafSize = \fC20\fP)"

.PP
Construct this as the root node of a binary space tree using the given dataset\&. This will take ownership of the data matrix; if you don't want this, consider using the constructor that takes a const reference to a dataset\&.
.PP
\fBParameters:\fP
.RS 4
\fIdata\fP Dataset to create tree from\&. 
.br
\fImaxLeafSize\fP Size of each leaf in the tree\&. 
.RE
.PP

.SS "template<typename MetricType , typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat, template< typename BoundMetricType, typename\&.\&.\&. > class BoundType = bound::HRectBound, template< typename SplitBoundType, typename SplitMatType > class SplitType = MidpointSplit> \fBmlpack::tree::BinarySpaceTree\fP< MetricType, StatisticType, MatType, BoundType, SplitType >::\fBBinarySpaceTree\fP (MatType && data, std::vector< size_t > & oldFromNew, const size_t maxLeafSize = \fC20\fP)"

.PP
Construct this as the root node of a binary space tree using the given dataset\&. This will take ownership of the data matrix; a mapping of the old point indices to the new point indices is filled\&. If you don't want the matrix to have its ownership taken, consider using the constructor that takes a const reference to a dataset\&.
.PP
\fBParameters:\fP
.RS 4
\fIdata\fP Dataset to create tree from\&. 
.br
\fIoldFromNew\fP Vector which will be filled with the old positions for each new point\&. 
.br
\fImaxLeafSize\fP Size of each leaf in the tree\&. 
.RE
.PP

.SS "template<typename MetricType , typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat, template< typename BoundMetricType, typename\&.\&.\&. > class BoundType = bound::HRectBound, template< typename SplitBoundType, typename SplitMatType > class SplitType = MidpointSplit> \fBmlpack::tree::BinarySpaceTree\fP< MetricType, StatisticType, MatType, BoundType, SplitType >::\fBBinarySpaceTree\fP (MatType && data, std::vector< size_t > & oldFromNew, std::vector< size_t > & newFromOld, const size_t maxLeafSize = \fC20\fP)"

.PP
Construct this as the root node of a binary space tree using the given dataset\&. This will take ownership of the data matrix; a mapping of the old point indices to the new point indices is filled, as well as a mapping of the new point indices to the old point indices\&. If you don't want the matrix to have its ownership taken, consider using the constructor that takes a const reference to a dataset\&.
.PP
\fBParameters:\fP
.RS 4
\fIdata\fP Dataset to create tree from\&. 
.br
\fIoldFromNew\fP Vector which will be filled with the old positions for each new point\&. 
.br
\fInewFromOld\fP Vector which will be filled with the new positions for each old point\&. 
.br
\fImaxLeafSize\fP Size of each leaf in the tree\&. 
.RE
.PP

.SS "template<typename MetricType , typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat, template< typename BoundMetricType, typename\&.\&.\&. > class BoundType = bound::HRectBound, template< typename SplitBoundType, typename SplitMatType > class SplitType = MidpointSplit> \fBmlpack::tree::BinarySpaceTree\fP< MetricType, StatisticType, MatType, BoundType, SplitType >::\fBBinarySpaceTree\fP (\fBBinarySpaceTree\fP< MetricType, StatisticType, MatType, BoundType, SplitType > * parent, const size_t begin, const size_t count, SplitType< BoundType< MetricType >, MatType > & splitter, const size_t maxLeafSize = \fC20\fP)"

.PP
Construct this node as a child of the given parent, starting at column begin and using count points\&. The ordering of that subset of points in the parent's data matrix will be modified! This is used for recursive tree-building by the other constructors which don't specify point indices\&.
.PP
\fBParameters:\fP
.RS 4
\fIparent\fP Parent of this node\&. Its dataset will be modified! 
.br
\fIbegin\fP Index of point to start tree construction with\&. 
.br
\fIcount\fP Number of points to use to construct tree\&. 
.br
\fIsplitter\fP Instantiated node splitter object\&. 
.br
\fImaxLeafSize\fP Size of each leaf in the tree\&. 
.RE
.PP

.SS "template<typename MetricType , typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat, template< typename BoundMetricType, typename\&.\&.\&. > class BoundType = bound::HRectBound, template< typename SplitBoundType, typename SplitMatType > class SplitType = MidpointSplit> \fBmlpack::tree::BinarySpaceTree\fP< MetricType, StatisticType, MatType, BoundType, SplitType >::\fBBinarySpaceTree\fP (\fBBinarySpaceTree\fP< MetricType, StatisticType, MatType, BoundType, SplitType > * parent, const size_t begin, const size_t count, std::vector< size_t > & oldFromNew, SplitType< BoundType< MetricType >, MatType > & splitter, const size_t maxLeafSize = \fC20\fP)"

.PP
Construct this node as a child of the given parent, starting at column begin and using count points\&. The ordering of that subset of points in the parent's data matrix will be modified! This is used for recursive tree-building by the other constructors which don't specify point indices\&.
.PP
A mapping of the old point indices to the new point indices is filled, but it is expected that the vector is already allocated with size greater than or equal to (begin + count), and if that is not true, invalid memory reads (and writes) will occur\&.
.PP
\fBParameters:\fP
.RS 4
\fIparent\fP Parent of this node\&. Its dataset will be modified! 
.br
\fIbegin\fP Index of point to start tree construction with\&. 
.br
\fIcount\fP Number of points to use to construct tree\&. 
.br
\fIoldFromNew\fP Vector which will be filled with the old positions for each new point\&. 
.br
\fIsplitter\fP Instantiated node splitter object\&. 
.br
\fImaxLeafSize\fP Size of each leaf in the tree\&. 
.RE
.PP

.SS "template<typename MetricType , typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat, template< typename BoundMetricType, typename\&.\&.\&. > class BoundType = bound::HRectBound, template< typename SplitBoundType, typename SplitMatType > class SplitType = MidpointSplit> \fBmlpack::tree::BinarySpaceTree\fP< MetricType, StatisticType, MatType, BoundType, SplitType >::\fBBinarySpaceTree\fP (\fBBinarySpaceTree\fP< MetricType, StatisticType, MatType, BoundType, SplitType > * parent, const size_t begin, const size_t count, std::vector< size_t > & oldFromNew, std::vector< size_t > & newFromOld, SplitType< BoundType< MetricType >, MatType > & splitter, const size_t maxLeafSize = \fC20\fP)"

.PP
Construct this node as a child of the given parent, starting at column begin and using count points\&. The ordering of that subset of points in the parent's data matrix will be modified! This is used for recursive tree-building by the other constructors which don't specify point indices\&.
.PP
A mapping of the old point indices to the new point indices is filled, as well as a mapping of the new point indices to the old point indices\&. It is expected that the vector is already allocated with size greater than or equal to (begin_in + count_in), and if that is not true, invalid memory reads (and writes) will occur\&.
.PP
\fBParameters:\fP
.RS 4
\fIparent\fP Parent of this node\&. Its dataset will be modified! 
.br
\fIbegin\fP Index of point to start tree construction with\&. 
.br
\fIcount\fP Number of points to use to construct tree\&. 
.br
\fIoldFromNew\fP Vector which will be filled with the old positions for each new point\&. 
.br
\fInewFromOld\fP Vector which will be filled with the new positions for each old point\&. 
.br
\fImaxLeafSize\fP Size of each leaf in the tree\&. 
.RE
.PP

.SS "template<typename MetricType , typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat, template< typename BoundMetricType, typename\&.\&.\&. > class BoundType = bound::HRectBound, template< typename SplitBoundType, typename SplitMatType > class SplitType = MidpointSplit> \fBmlpack::tree::BinarySpaceTree\fP< MetricType, StatisticType, MatType, BoundType, SplitType >::\fBBinarySpaceTree\fP (const \fBBinarySpaceTree\fP< MetricType, StatisticType, MatType, BoundType, SplitType > & other)"

.PP
Create a binary space tree by copying the other tree\&. Be careful! This can take a long time and use a lot of memory\&.
.PP
\fBParameters:\fP
.RS 4
\fIother\fP Tree to be replicated\&. 
.RE
.PP

.SS "template<typename MetricType , typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat, template< typename BoundMetricType, typename\&.\&.\&. > class BoundType = bound::HRectBound, template< typename SplitBoundType, typename SplitMatType > class SplitType = MidpointSplit> \fBmlpack::tree::BinarySpaceTree\fP< MetricType, StatisticType, MatType, BoundType, SplitType >::\fBBinarySpaceTree\fP (\fBBinarySpaceTree\fP< MetricType, StatisticType, MatType, BoundType, SplitType > && other)"

.PP
Move constructor for a \fBBinarySpaceTree\fP; possess all the members of the given tree\&. 
.SS "template<typename MetricType , typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat, template< typename BoundMetricType, typename\&.\&.\&. > class BoundType = bound::HRectBound, template< typename SplitBoundType, typename SplitMatType > class SplitType = MidpointSplit> template<typename Archive > \fBmlpack::tree::BinarySpaceTree\fP< MetricType, StatisticType, MatType, BoundType, SplitType >::\fBBinarySpaceTree\fP (Archive & ar, const typename \fBstd::enable_if_t\fP< Archive::is_loading::value > * = \fC0\fP)"

.PP
Initialize the tree from a \fBboost::serialization\fP archive\&. 
.PP
\fBParameters:\fP
.RS 4
\fIar\fP Archive to load tree from\&. Must be an iarchive, not an oarchive\&. 
.RE
.PP

.SS "template<typename MetricType , typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat, template< typename BoundMetricType, typename\&.\&.\&. > class BoundType = bound::HRectBound, template< typename SplitBoundType, typename SplitMatType > class SplitType = MidpointSplit> \fBmlpack::tree::BinarySpaceTree\fP< MetricType, StatisticType, MatType, BoundType, SplitType >::~\fBBinarySpaceTree\fP ()"

.PP
Deletes this node, deallocating the memory for the children and calling their destructors in turn\&. This will invalidate any pointers or references to any nodes which are children of this one\&. 
.SS "template<typename MetricType , typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat, template< typename BoundMetricType, typename\&.\&.\&. > class BoundType = bound::HRectBound, template< typename SplitBoundType, typename SplitMatType > class SplitType = MidpointSplit> \fBmlpack::tree::BinarySpaceTree\fP< MetricType, StatisticType, MatType, BoundType, SplitType >::\fBBinarySpaceTree\fP ()\fC [protected]\fP"

.PP
A default constructor\&. This is meant to only be used with \fBboost::serialization\fP, which is allowed with the friend declaration below\&. This does not return a valid tree! The method must be protected, so that the serialization shim can work with the default constructor\&. 
.PP
Referenced by mlpack::tree::BinarySpaceTree< MetricType, StatisticType, MatType, BoundType, SplitType >::Center()\&.
.SH "Member Function Documentation"
.PP 
.SS "template<typename MetricType , typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat, template< typename BoundMetricType, typename\&.\&.\&. > class BoundType = bound::HRectBound, template< typename SplitBoundType, typename SplitMatType > class SplitType = MidpointSplit> size_t \fBmlpack::tree::BinarySpaceTree\fP< MetricType, StatisticType, MatType, BoundType, SplitType >::Begin () const\fC [inline]\fP"

.PP
Return the index of the beginning point of this subset\&. 
.PP
Definition at line 483 of file binary_space_tree\&.hpp\&.
.PP
References mlpack::tree::BinarySpaceTree< MetricType, StatisticType, MatType, BoundType, SplitType >::begin\&.
.SS "template<typename MetricType , typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat, template< typename BoundMetricType, typename\&.\&.\&. > class BoundType = bound::HRectBound, template< typename SplitBoundType, typename SplitMatType > class SplitType = MidpointSplit> size_t& \fBmlpack::tree::BinarySpaceTree\fP< MetricType, StatisticType, MatType, BoundType, SplitType >::Begin ()\fC [inline]\fP"

.PP
Modify the index of the beginning point of this subset\&. 
.PP
Definition at line 485 of file binary_space_tree\&.hpp\&.
.PP
References mlpack::tree::BinarySpaceTree< MetricType, StatisticType, MatType, BoundType, SplitType >::begin\&.
.SS "template<typename MetricType , typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat, template< typename BoundMetricType, typename\&.\&.\&. > class BoundType = bound::HRectBound, template< typename SplitBoundType, typename SplitMatType > class SplitType = MidpointSplit> const BoundType<MetricType>& \fBmlpack::tree::BinarySpaceTree\fP< MetricType, StatisticType, MatType, BoundType, SplitType >::Bound () const\fC [inline]\fP"

.PP
Return the bound object for this node\&. 
.PP
Definition at line 304 of file binary_space_tree\&.hpp\&.
.PP
References mlpack::tree::BinarySpaceTree< MetricType, StatisticType, MatType, BoundType, SplitType >::bound\&.
.PP
Referenced by mlpack::tree::BinarySpaceTree< MetricType, StatisticType, MatType, BoundType, SplitType >::MaxDistance(), mlpack::tree::BinarySpaceTree< MetricType, StatisticType, MatType, BoundType, SplitType >::MinDistance(), and mlpack::tree::BinarySpaceTree< MetricType, StatisticType, MatType, BoundType, SplitType >::RangeDistance()\&.
.SS "template<typename MetricType , typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat, template< typename BoundMetricType, typename\&.\&.\&. > class BoundType = bound::HRectBound, template< typename SplitBoundType, typename SplitMatType > class SplitType = MidpointSplit> BoundType<MetricType>& \fBmlpack::tree::BinarySpaceTree\fP< MetricType, StatisticType, MatType, BoundType, SplitType >::Bound ()\fC [inline]\fP"

.PP
Return the bound object for this node\&. 
.PP
Definition at line 306 of file binary_space_tree\&.hpp\&.
.PP
References mlpack::tree::BinarySpaceTree< MetricType, StatisticType, MatType, BoundType, SplitType >::bound\&.
.SS "template<typename MetricType , typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat, template< typename BoundMetricType, typename\&.\&.\&. > class BoundType = bound::HRectBound, template< typename SplitBoundType, typename SplitMatType > class SplitType = MidpointSplit> void \fBmlpack::tree::BinarySpaceTree\fP< MetricType, StatisticType, MatType, BoundType, SplitType >::Center (arma::vec & center) const\fC [inline]\fP"

.PP
Store the center of the bounding region in the given vector\&. 
.PP
Definition at line 493 of file binary_space_tree\&.hpp\&.
.PP
References mlpack::tree::BinarySpaceTree< MetricType, StatisticType, MatType, BoundType, SplitType >::BinarySpaceTree(), mlpack::tree::BinarySpaceTree< MetricType, StatisticType, MatType, BoundType, SplitType >::SplitNode(), and mlpack::tree::BinarySpaceTree< MetricType, StatisticType, MatType, BoundType, SplitType >::UpdateBound()\&.
.SS "template<typename MetricType , typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat, template< typename BoundMetricType, typename\&.\&.\&. > class BoundType = bound::HRectBound, template< typename SplitBoundType, typename SplitMatType > class SplitType = MidpointSplit> \fBBinarySpaceTree\fP& \fBmlpack::tree::BinarySpaceTree\fP< MetricType, StatisticType, MatType, BoundType, SplitType >::Child (const size_t child) const"

.PP
Return the specified child (0 will be left, 1 will be right)\&. If the index is greater than 1, this will return the right child\&.
.PP
\fBParameters:\fP
.RS 4
\fIchild\fP Index of child to return\&. 
.RE
.PP

.PP
Referenced by mlpack::tree::BinarySpaceTree< MetricType, StatisticType, MatType, BoundType, SplitType >::ParentDistance()\&.
.SS "template<typename MetricType , typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat, template< typename BoundMetricType, typename\&.\&.\&. > class BoundType = bound::HRectBound, template< typename SplitBoundType, typename SplitMatType > class SplitType = MidpointSplit> \fBBinarySpaceTree\fP*& \fBmlpack::tree::BinarySpaceTree\fP< MetricType, StatisticType, MatType, BoundType, SplitType >::ChildPtr (const size_t child)\fC [inline]\fP"

.PP
Definition at line 405 of file binary_space_tree\&.hpp\&.
.PP
References mlpack::tree::BinarySpaceTree< MetricType, StatisticType, MatType, BoundType, SplitType >::Descendant(), mlpack::tree::BinarySpaceTree< MetricType, StatisticType, MatType, BoundType, SplitType >::NumDescendants(), mlpack::tree::BinarySpaceTree< MetricType, StatisticType, MatType, BoundType, SplitType >::NumPoints(), mlpack::tree::BinarySpaceTree< MetricType, StatisticType, MatType, BoundType, SplitType >::Point(), and mlpack::tree::BinarySpaceTree< MetricType, StatisticType, MatType, BoundType, SplitType >::right\&.
.SS "template<typename MetricType , typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat, template< typename BoundMetricType, typename\&.\&.\&. > class BoundType = bound::HRectBound, template< typename SplitBoundType, typename SplitMatType > class SplitType = MidpointSplit> size_t \fBmlpack::tree::BinarySpaceTree\fP< MetricType, StatisticType, MatType, BoundType, SplitType >::Count () const\fC [inline]\fP"

.PP
Return the number of points in this subset\&. 
.PP
Definition at line 488 of file binary_space_tree\&.hpp\&.
.PP
References mlpack::tree::BinarySpaceTree< MetricType, StatisticType, MatType, BoundType, SplitType >::count\&.
.SS "template<typename MetricType , typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat, template< typename BoundMetricType, typename\&.\&.\&. > class BoundType = bound::HRectBound, template< typename SplitBoundType, typename SplitMatType > class SplitType = MidpointSplit> size_t& \fBmlpack::tree::BinarySpaceTree\fP< MetricType, StatisticType, MatType, BoundType, SplitType >::Count ()\fC [inline]\fP"

.PP
Modify the number of points in this subset\&. 
.PP
Definition at line 490 of file binary_space_tree\&.hpp\&.
.PP
References mlpack::tree::BinarySpaceTree< MetricType, StatisticType, MatType, BoundType, SplitType >::count\&.
.SS "template<typename MetricType , typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat, template< typename BoundMetricType, typename\&.\&.\&. > class BoundType = bound::HRectBound, template< typename SplitBoundType, typename SplitMatType > class SplitType = MidpointSplit> const MatType& \fBmlpack::tree::BinarySpaceTree\fP< MetricType, StatisticType, MatType, BoundType, SplitType >::Dataset () const\fC [inline]\fP"

.PP
Get the dataset which the tree is built on\&. 
.PP
Definition at line 332 of file binary_space_tree\&.hpp\&.
.PP
References mlpack::tree::BinarySpaceTree< MetricType, StatisticType, MatType, BoundType, SplitType >::dataset\&.
.SS "template<typename MetricType , typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat, template< typename BoundMetricType, typename\&.\&.\&. > class BoundType = bound::HRectBound, template< typename SplitBoundType, typename SplitMatType > class SplitType = MidpointSplit> MatType& \fBmlpack::tree::BinarySpaceTree\fP< MetricType, StatisticType, MatType, BoundType, SplitType >::Dataset ()\fC [inline]\fP"

.PP
Modify the dataset which the tree is built on\&. Be careful! 
.PP
Definition at line 334 of file binary_space_tree\&.hpp\&.
.PP
References mlpack::tree::BinarySpaceTree< MetricType, StatisticType, MatType, BoundType, SplitType >::dataset\&.
.SS "template<typename MetricType , typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat, template< typename BoundMetricType, typename\&.\&.\&. > class BoundType = bound::HRectBound, template< typename SplitBoundType, typename SplitMatType > class SplitType = MidpointSplit> size_t \fBmlpack::tree::BinarySpaceTree\fP< MetricType, StatisticType, MatType, BoundType, SplitType >::Descendant (const size_t index) const"

.PP
Return the index (with reference to the dataset) of a particular descendant of this node\&. The index should be greater than zero but less than the number of descendants\&.
.PP
\fBParameters:\fP
.RS 4
\fIindex\fP Index of the descendant\&. 
.RE
.PP

.PP
Referenced by mlpack::tree::BinarySpaceTree< MetricType, StatisticType, MatType, BoundType, SplitType >::ChildPtr()\&.
.SS "template<typename MetricType , typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat, template< typename BoundMetricType, typename\&.\&.\&. > class BoundType = bound::HRectBound, template< typename SplitBoundType, typename SplitMatType > class SplitType = MidpointSplit> \fBElemType\fP \fBmlpack::tree::BinarySpaceTree\fP< MetricType, StatisticType, MatType, BoundType, SplitType >::FurthestDescendantDistance () const"

.PP
Return the furthest possible descendant distance\&. This returns the maximum distance from the centroid to the edge of the bound and not the empirical quantity which is the actual furthest descendant distance\&. So the actual furthest descendant distance may be less than what this method returns (but it will never be greater than this)\&. 
.PP
Referenced by mlpack::tree::BinarySpaceTree< MetricType, StatisticType, MatType, BoundType, SplitType >::Metric()\&.
.SS "template<typename MetricType , typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat, template< typename BoundMetricType, typename\&.\&.\&. > class BoundType = bound::HRectBound, template< typename SplitBoundType, typename SplitMatType > class SplitType = MidpointSplit> \fBElemType\fP \fBmlpack::tree::BinarySpaceTree\fP< MetricType, StatisticType, MatType, BoundType, SplitType >::FurthestPointDistance () const"

.PP
Return the furthest distance to a point held in this node\&. If this is not a leaf node, then the distance is 0 because the node holds no points\&. 
.PP
Referenced by mlpack::tree::BinarySpaceTree< MetricType, StatisticType, MatType, BoundType, SplitType >::Metric()\&.
.SS "template<typename MetricType , typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat, template< typename BoundMetricType, typename\&.\&.\&. > class BoundType = bound::HRectBound, template< typename SplitBoundType, typename SplitMatType > class SplitType = MidpointSplit> template<typename VecType > size_t \fBmlpack::tree::BinarySpaceTree\fP< MetricType, StatisticType, MatType, BoundType, SplitType >::GetFurthestChild (const VecType & point, typename \fBstd::enable_if_t\fP< \fBIsVector\fP< VecType >::value > * = \fC0\fP)"

.PP
Return the index of the furthest child node to the given query point\&. If this is a leaf node, it will return \fBNumChildren()\fP (invalid index)\&. 
.PP
Referenced by mlpack::tree::BinarySpaceTree< MetricType, StatisticType, MatType, BoundType, SplitType >::Metric()\&.
.SS "template<typename MetricType , typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat, template< typename BoundMetricType, typename\&.\&.\&. > class BoundType = bound::HRectBound, template< typename SplitBoundType, typename SplitMatType > class SplitType = MidpointSplit> size_t \fBmlpack::tree::BinarySpaceTree\fP< MetricType, StatisticType, MatType, BoundType, SplitType >::GetFurthestChild (const \fBBinarySpaceTree\fP< MetricType, StatisticType, MatType, BoundType, SplitType > & queryNode)"

.PP
Return the index of the furthest child node to the given query node\&. If it can't decide, it will return \fBNumChildren()\fP (invalid index)\&. 
.SS "template<typename MetricType , typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat, template< typename BoundMetricType, typename\&.\&.\&. > class BoundType = bound::HRectBound, template< typename SplitBoundType, typename SplitMatType > class SplitType = MidpointSplit> template<typename VecType > size_t \fBmlpack::tree::BinarySpaceTree\fP< MetricType, StatisticType, MatType, BoundType, SplitType >::GetNearestChild (const VecType & point, typename \fBstd::enable_if_t\fP< \fBIsVector\fP< VecType >::value > * = \fC0\fP)"

.PP
Return the index of the nearest child node to the given query point\&. If this is a leaf node, it will return \fBNumChildren()\fP (invalid index)\&. 
.PP
Referenced by mlpack::tree::BinarySpaceTree< MetricType, StatisticType, MatType, BoundType, SplitType >::Metric()\&.
.SS "template<typename MetricType , typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat, template< typename BoundMetricType, typename\&.\&.\&. > class BoundType = bound::HRectBound, template< typename SplitBoundType, typename SplitMatType > class SplitType = MidpointSplit> size_t \fBmlpack::tree::BinarySpaceTree\fP< MetricType, StatisticType, MatType, BoundType, SplitType >::GetNearestChild (const \fBBinarySpaceTree\fP< MetricType, StatisticType, MatType, BoundType, SplitType > & queryNode)"

.PP
Return the index of the nearest child node to the given query node\&. If it can't decide, it will return \fBNumChildren()\fP (invalid index)\&. 
.SS "template<typename MetricType , typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat, template< typename BoundMetricType, typename\&.\&.\&. > class BoundType = bound::HRectBound, template< typename SplitBoundType, typename SplitMatType > class SplitType = MidpointSplit> bool \fBmlpack::tree::BinarySpaceTree\fP< MetricType, StatisticType, MatType, BoundType, SplitType >::IsLeaf () const"

.PP
Return whether or not this node is a leaf (true if it has no children)\&. 
.PP
Referenced by mlpack::tree::BinarySpaceTree< MetricType, StatisticType, MatType, BoundType, SplitType >::Stat()\&.
.SS "template<typename MetricType , typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat, template< typename BoundMetricType, typename\&.\&.\&. > class BoundType = bound::HRectBound, template< typename SplitBoundType, typename SplitMatType > class SplitType = MidpointSplit> \fBBinarySpaceTree\fP* \fBmlpack::tree::BinarySpaceTree\fP< MetricType, StatisticType, MatType, BoundType, SplitType >::Left () const\fC [inline]\fP"

.PP
Gets the left child of this node\&. 
.PP
Definition at line 317 of file binary_space_tree\&.hpp\&.
.PP
References mlpack::tree::BinarySpaceTree< MetricType, StatisticType, MatType, BoundType, SplitType >::left\&.
.SS "template<typename MetricType , typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat, template< typename BoundMetricType, typename\&.\&.\&. > class BoundType = bound::HRectBound, template< typename SplitBoundType, typename SplitMatType > class SplitType = MidpointSplit> \fBBinarySpaceTree\fP*& \fBmlpack::tree::BinarySpaceTree\fP< MetricType, StatisticType, MatType, BoundType, SplitType >::Left ()\fC [inline]\fP"

.PP
Modify the left child of this node\&. 
.PP
Definition at line 319 of file binary_space_tree\&.hpp\&.
.PP
References mlpack::tree::BinarySpaceTree< MetricType, StatisticType, MatType, BoundType, SplitType >::left\&.
.SS "template<typename MetricType , typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat, template< typename BoundMetricType, typename\&.\&.\&. > class BoundType = bound::HRectBound, template< typename SplitBoundType, typename SplitMatType > class SplitType = MidpointSplit> \fBElemType\fP \fBmlpack::tree::BinarySpaceTree\fP< MetricType, StatisticType, MatType, BoundType, SplitType >::MaxDistance (const \fBBinarySpaceTree\fP< MetricType, StatisticType, MatType, BoundType, SplitType > & other) const\fC [inline]\fP"

.PP
Return the maximum distance to another node\&. 
.PP
Definition at line 444 of file binary_space_tree\&.hpp\&.
.PP
References mlpack::tree::BinarySpaceTree< MetricType, StatisticType, MatType, BoundType, SplitType >::Bound()\&.
.SS "template<typename MetricType , typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat, template< typename BoundMetricType, typename\&.\&.\&. > class BoundType = bound::HRectBound, template< typename SplitBoundType, typename SplitMatType > class SplitType = MidpointSplit> template<typename VecType > \fBElemType\fP \fBmlpack::tree::BinarySpaceTree\fP< MetricType, StatisticType, MatType, BoundType, SplitType >::MaxDistance (const VecType & point, typename \fBstd::enable_if_t\fP< \fBIsVector\fP< VecType >::value > * = \fC0\fP) const\fC [inline]\fP"

.PP
Return the maximum distance to another point\&. 
.PP
Definition at line 466 of file binary_space_tree\&.hpp\&.
.SS "template<typename MetricType , typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat, template< typename BoundMetricType, typename\&.\&.\&. > class BoundType = bound::HRectBound, template< typename SplitBoundType, typename SplitMatType > class SplitType = MidpointSplit> MetricType \fBmlpack::tree::BinarySpaceTree\fP< MetricType, StatisticType, MatType, BoundType, SplitType >::Metric () const\fC [inline]\fP"

.PP
Get the metric that the tree uses\&. 
.PP
Definition at line 337 of file binary_space_tree\&.hpp\&.
.PP
References mlpack::tree::BinarySpaceTree< MetricType, StatisticType, MatType, BoundType, SplitType >::FurthestDescendantDistance(), mlpack::tree::BinarySpaceTree< MetricType, StatisticType, MatType, BoundType, SplitType >::FurthestPointDistance(), mlpack::tree::BinarySpaceTree< MetricType, StatisticType, MatType, BoundType, SplitType >::GetFurthestChild(), mlpack::tree::BinarySpaceTree< MetricType, StatisticType, MatType, BoundType, SplitType >::GetNearestChild(), mlpack::tree::BinarySpaceTree< MetricType, StatisticType, MatType, BoundType, SplitType >::MinimumBoundDistance(), and mlpack::tree::BinarySpaceTree< MetricType, StatisticType, MatType, BoundType, SplitType >::NumChildren()\&.
.SS "template<typename MetricType , typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat, template< typename BoundMetricType, typename\&.\&.\&. > class BoundType = bound::HRectBound, template< typename SplitBoundType, typename SplitMatType > class SplitType = MidpointSplit> \fBElemType\fP \fBmlpack::tree::BinarySpaceTree\fP< MetricType, StatisticType, MatType, BoundType, SplitType >::MinDistance (const \fBBinarySpaceTree\fP< MetricType, StatisticType, MatType, BoundType, SplitType > & other) const\fC [inline]\fP"

.PP
Return the minimum distance to another node\&. 
.PP
Definition at line 438 of file binary_space_tree\&.hpp\&.
.PP
References mlpack::tree::BinarySpaceTree< MetricType, StatisticType, MatType, BoundType, SplitType >::Bound()\&.
.SS "template<typename MetricType , typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat, template< typename BoundMetricType, typename\&.\&.\&. > class BoundType = bound::HRectBound, template< typename SplitBoundType, typename SplitMatType > class SplitType = MidpointSplit> template<typename VecType > \fBElemType\fP \fBmlpack::tree::BinarySpaceTree\fP< MetricType, StatisticType, MatType, BoundType, SplitType >::MinDistance (const VecType & point, typename \fBstd::enable_if_t\fP< \fBIsVector\fP< VecType >::value > * = \fC0\fP) const\fC [inline]\fP"

.PP
Return the minimum distance to another point\&. 
.PP
Definition at line 457 of file binary_space_tree\&.hpp\&.
.SS "template<typename MetricType , typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat, template< typename BoundMetricType, typename\&.\&.\&. > class BoundType = bound::HRectBound, template< typename SplitBoundType, typename SplitMatType > class SplitType = MidpointSplit> \fBElemType\fP \fBmlpack::tree::BinarySpaceTree\fP< MetricType, StatisticType, MatType, BoundType, SplitType >::MinimumBoundDistance () const"

.PP
Return the minimum distance from the center of the node to any bound edge\&. 
.PP
Referenced by mlpack::tree::BinarySpaceTree< MetricType, StatisticType, MatType, BoundType, SplitType >::Metric()\&.
.SS "template<typename MetricType , typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat, template< typename BoundMetricType, typename\&.\&.\&. > class BoundType = bound::HRectBound, template< typename SplitBoundType, typename SplitMatType > class SplitType = MidpointSplit> size_t \fBmlpack::tree::BinarySpaceTree\fP< MetricType, StatisticType, MatType, BoundType, SplitType >::NumChildren () const"

.PP
Return the number of children in this node\&. 
.PP
Referenced by mlpack::tree::BinarySpaceTree< MetricType, StatisticType, MatType, BoundType, SplitType >::Metric()\&.
.SS "template<typename MetricType , typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat, template< typename BoundMetricType, typename\&.\&.\&. > class BoundType = bound::HRectBound, template< typename SplitBoundType, typename SplitMatType > class SplitType = MidpointSplit> size_t \fBmlpack::tree::BinarySpaceTree\fP< MetricType, StatisticType, MatType, BoundType, SplitType >::NumDescendants () const"

.PP
Return the number of descendants of this node\&. For a non-leaf in a binary space tree, this is the number of points at the descendant leaves\&. For a leaf, this is the number of points in the leaf\&. 
.PP
Referenced by mlpack::tree::BinarySpaceTree< MetricType, StatisticType, MatType, BoundType, SplitType >::ChildPtr()\&.
.SS "template<typename MetricType , typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat, template< typename BoundMetricType, typename\&.\&.\&. > class BoundType = bound::HRectBound, template< typename SplitBoundType, typename SplitMatType > class SplitType = MidpointSplit> size_t \fBmlpack::tree::BinarySpaceTree\fP< MetricType, StatisticType, MatType, BoundType, SplitType >::NumPoints () const"

.PP
Return the number of points in this node (0 if not a leaf)\&. 
.PP
Referenced by mlpack::tree::BinarySpaceTree< MetricType, StatisticType, MatType, BoundType, SplitType >::ChildPtr()\&.
.SS "template<typename MetricType , typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat, template< typename BoundMetricType, typename\&.\&.\&. > class BoundType = bound::HRectBound, template< typename SplitBoundType, typename SplitMatType > class SplitType = MidpointSplit> \fBBinarySpaceTree\fP* \fBmlpack::tree::BinarySpaceTree\fP< MetricType, StatisticType, MatType, BoundType, SplitType >::Parent () const\fC [inline]\fP"

.PP
Gets the parent of this node\&. 
.PP
Definition at line 327 of file binary_space_tree\&.hpp\&.
.PP
References mlpack::tree::BinarySpaceTree< MetricType, StatisticType, MatType, BoundType, SplitType >::parent\&.
.SS "template<typename MetricType , typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat, template< typename BoundMetricType, typename\&.\&.\&. > class BoundType = bound::HRectBound, template< typename SplitBoundType, typename SplitMatType > class SplitType = MidpointSplit> \fBBinarySpaceTree\fP*& \fBmlpack::tree::BinarySpaceTree\fP< MetricType, StatisticType, MatType, BoundType, SplitType >::Parent ()\fC [inline]\fP"

.PP
Modify the parent of this node\&. 
.PP
Definition at line 329 of file binary_space_tree\&.hpp\&.
.PP
References mlpack::tree::BinarySpaceTree< MetricType, StatisticType, MatType, BoundType, SplitType >::parent\&.
.SS "template<typename MetricType , typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat, template< typename BoundMetricType, typename\&.\&.\&. > class BoundType = bound::HRectBound, template< typename SplitBoundType, typename SplitMatType > class SplitType = MidpointSplit> \fBElemType\fP \fBmlpack::tree::BinarySpaceTree\fP< MetricType, StatisticType, MatType, BoundType, SplitType >::ParentDistance () const\fC [inline]\fP"

.PP
Return the distance from the center of this node to the center of the parent node\&. 
.PP
Definition at line 392 of file binary_space_tree\&.hpp\&.
.PP
References mlpack::tree::BinarySpaceTree< MetricType, StatisticType, MatType, BoundType, SplitType >::parentDistance\&.
.SS "template<typename MetricType , typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat, template< typename BoundMetricType, typename\&.\&.\&. > class BoundType = bound::HRectBound, template< typename SplitBoundType, typename SplitMatType > class SplitType = MidpointSplit> \fBElemType\fP& \fBmlpack::tree::BinarySpaceTree\fP< MetricType, StatisticType, MatType, BoundType, SplitType >::ParentDistance ()\fC [inline]\fP"

.PP
Modify the distance from the center of this node to the center of the parent node\&. 
.PP
Definition at line 395 of file binary_space_tree\&.hpp\&.
.PP
References mlpack::tree::BinarySpaceTree< MetricType, StatisticType, MatType, BoundType, SplitType >::Child(), and mlpack::tree::BinarySpaceTree< MetricType, StatisticType, MatType, BoundType, SplitType >::parentDistance\&.
.SS "template<typename MetricType , typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat, template< typename BoundMetricType, typename\&.\&.\&. > class BoundType = bound::HRectBound, template< typename SplitBoundType, typename SplitMatType > class SplitType = MidpointSplit> size_t \fBmlpack::tree::BinarySpaceTree\fP< MetricType, StatisticType, MatType, BoundType, SplitType >::Point (const size_t index) const"

.PP
Return the index (with reference to the dataset) of a particular point in this node\&. This will happily return invalid indices if the given index is greater than the number of points in this node (obtained with \fBNumPoints()\fP) -- be careful\&.
.PP
\fBParameters:\fP
.RS 4
\fIindex\fP Index of point for which a dataset index is wanted\&. 
.RE
.PP

.PP
Referenced by mlpack::tree::BinarySpaceTree< MetricType, StatisticType, MatType, BoundType, SplitType >::ChildPtr()\&.
.SS "template<typename MetricType , typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat, template< typename BoundMetricType, typename\&.\&.\&. > class BoundType = bound::HRectBound, template< typename SplitBoundType, typename SplitMatType > class SplitType = MidpointSplit> \fBmath::RangeType\fP<\fBElemType\fP> \fBmlpack::tree::BinarySpaceTree\fP< MetricType, StatisticType, MatType, BoundType, SplitType >::RangeDistance (const \fBBinarySpaceTree\fP< MetricType, StatisticType, MatType, BoundType, SplitType > & other) const\fC [inline]\fP"

.PP
Return the minimum and maximum distance to another node\&. 
.PP
Definition at line 450 of file binary_space_tree\&.hpp\&.
.PP
References mlpack::tree::BinarySpaceTree< MetricType, StatisticType, MatType, BoundType, SplitType >::Bound()\&.
.SS "template<typename MetricType , typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat, template< typename BoundMetricType, typename\&.\&.\&. > class BoundType = bound::HRectBound, template< typename SplitBoundType, typename SplitMatType > class SplitType = MidpointSplit> template<typename VecType > \fBmath::RangeType\fP<\fBElemType\fP> \fBmlpack::tree::BinarySpaceTree\fP< MetricType, StatisticType, MatType, BoundType, SplitType >::RangeDistance (const VecType & point, typename \fBstd::enable_if_t\fP< \fBIsVector\fP< VecType >::value > * = \fC0\fP) const\fC [inline]\fP"

.PP
Return the minimum and maximum distance to another point\&. 
.PP
Definition at line 476 of file binary_space_tree\&.hpp\&.
.SS "template<typename MetricType , typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat, template< typename BoundMetricType, typename\&.\&.\&. > class BoundType = bound::HRectBound, template< typename SplitBoundType, typename SplitMatType > class SplitType = MidpointSplit> \fBBinarySpaceTree\fP* \fBmlpack::tree::BinarySpaceTree\fP< MetricType, StatisticType, MatType, BoundType, SplitType >::Right () const\fC [inline]\fP"

.PP
Gets the right child of this node\&. 
.PP
Definition at line 322 of file binary_space_tree\&.hpp\&.
.PP
References mlpack::tree::BinarySpaceTree< MetricType, StatisticType, MatType, BoundType, SplitType >::right\&.
.SS "template<typename MetricType , typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat, template< typename BoundMetricType, typename\&.\&.\&. > class BoundType = bound::HRectBound, template< typename SplitBoundType, typename SplitMatType > class SplitType = MidpointSplit> \fBBinarySpaceTree\fP*& \fBmlpack::tree::BinarySpaceTree\fP< MetricType, StatisticType, MatType, BoundType, SplitType >::Right ()\fC [inline]\fP"

.PP
Modify the right child of this node\&. 
.PP
Definition at line 324 of file binary_space_tree\&.hpp\&.
.PP
References mlpack::tree::BinarySpaceTree< MetricType, StatisticType, MatType, BoundType, SplitType >::right\&.
.SS "template<typename MetricType , typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat, template< typename BoundMetricType, typename\&.\&.\&. > class BoundType = bound::HRectBound, template< typename SplitBoundType, typename SplitMatType > class SplitType = MidpointSplit> template<typename Archive > void \fBmlpack::tree::BinarySpaceTree\fP< MetricType, StatisticType, MatType, BoundType, SplitType >::Serialize (Archive & ar, const unsigned int version)"

.PP
Serialize the tree\&. 
.SS "template<typename MetricType , typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat, template< typename BoundMetricType, typename\&.\&.\&. > class BoundType = bound::HRectBound, template< typename SplitBoundType, typename SplitMatType > class SplitType = MidpointSplit> void \fBmlpack::tree::BinarySpaceTree\fP< MetricType, StatisticType, MatType, BoundType, SplitType >::SplitNode (const size_t maxLeafSize, SplitType< BoundType< MetricType >, MatType > & splitter)\fC [private]\fP"

.PP
Splits the current node, assigning its left and right children recursively\&. 
.PP
\fBParameters:\fP
.RS 4
\fImaxLeafSize\fP Maximum number of points held in a leaf\&. 
.br
\fIsplitter\fP Instantiated SplitType object\&. 
.RE
.PP

.PP
Referenced by mlpack::tree::BinarySpaceTree< MetricType, StatisticType, MatType, BoundType, SplitType >::Center()\&.
.SS "template<typename MetricType , typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat, template< typename BoundMetricType, typename\&.\&.\&. > class BoundType = bound::HRectBound, template< typename SplitBoundType, typename SplitMatType > class SplitType = MidpointSplit> void \fBmlpack::tree::BinarySpaceTree\fP< MetricType, StatisticType, MatType, BoundType, SplitType >::SplitNode (std::vector< size_t > & oldFromNew, const size_t maxLeafSize, SplitType< BoundType< MetricType >, MatType > & splitter)\fC [private]\fP"

.PP
Splits the current node, assigning its left and right children recursively\&. Also returns a list of the changed indices\&.
.PP
\fBParameters:\fP
.RS 4
\fIoldFromNew\fP Vector holding permuted indices\&. 
.br
\fImaxLeafSize\fP Maximum number of points held in a leaf\&. 
.br
\fIsplitter\fP Instantiated SplitType object\&. 
.RE
.PP

.SS "template<typename MetricType , typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat, template< typename BoundMetricType, typename\&.\&.\&. > class BoundType = bound::HRectBound, template< typename SplitBoundType, typename SplitMatType > class SplitType = MidpointSplit> const StatisticType& \fBmlpack::tree::BinarySpaceTree\fP< MetricType, StatisticType, MatType, BoundType, SplitType >::Stat () const\fC [inline]\fP"

.PP
Return the statistic object for this node\&. 
.PP
Definition at line 309 of file binary_space_tree\&.hpp\&.
.PP
References mlpack::tree::BinarySpaceTree< MetricType, StatisticType, MatType, BoundType, SplitType >::stat\&.
.SS "template<typename MetricType , typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat, template< typename BoundMetricType, typename\&.\&.\&. > class BoundType = bound::HRectBound, template< typename SplitBoundType, typename SplitMatType > class SplitType = MidpointSplit> StatisticType& \fBmlpack::tree::BinarySpaceTree\fP< MetricType, StatisticType, MatType, BoundType, SplitType >::Stat ()\fC [inline]\fP"

.PP
Return the statistic object for this node\&. 
.PP
Definition at line 311 of file binary_space_tree\&.hpp\&.
.PP
References mlpack::tree::BinarySpaceTree< MetricType, StatisticType, MatType, BoundType, SplitType >::IsLeaf(), and mlpack::tree::BinarySpaceTree< MetricType, StatisticType, MatType, BoundType, SplitType >::stat\&.
.SS "template<typename MetricType , typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat, template< typename BoundMetricType, typename\&.\&.\&. > class BoundType = bound::HRectBound, template< typename SplitBoundType, typename SplitMatType > class SplitType = MidpointSplit> template<typename BoundType2 > void \fBmlpack::tree::BinarySpaceTree\fP< MetricType, StatisticType, MatType, BoundType, SplitType >::UpdateBound (BoundType2 & boundToUpdate)\fC [private]\fP"

.PP
Update the bound of the current node\&. This method does not take into account bound-specific properties\&.
.PP
\fBParameters:\fP
.RS 4
\fIboundToUpdate\fP The bound to update\&. 
.RE
.PP

.PP
Referenced by mlpack::tree::BinarySpaceTree< MetricType, StatisticType, MatType, BoundType, SplitType >::Center()\&.
.SS "template<typename MetricType , typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat, template< typename BoundMetricType, typename\&.\&.\&. > class BoundType = bound::HRectBound, template< typename SplitBoundType, typename SplitMatType > class SplitType = MidpointSplit> void \fBmlpack::tree::BinarySpaceTree\fP< MetricType, StatisticType, MatType, BoundType, SplitType >::UpdateBound (\fBbound::HollowBallBound\fP< MetricType > & boundToUpdate)\fC [private]\fP"

.PP
Update the bound of the current node\&. This method is designed for HollowBallBound only\&.
.PP
\fBParameters:\fP
.RS 4
\fIboundToUpdate\fP The bound to update\&. 
.RE
.PP

.SH "Member Data Documentation"
.PP 
.SS "template<typename MetricType , typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat, template< typename BoundMetricType, typename\&.\&.\&. > class BoundType = bound::HRectBound, template< typename SplitBoundType, typename SplitMatType > class SplitType = MidpointSplit> size_t \fBmlpack::tree::BinarySpaceTree\fP< MetricType, StatisticType, MatType, BoundType, SplitType >::begin\fC [private]\fP"

.PP
The index of the first point in the dataset contained in this node (and its children)\&. 
.PP
Definition at line 73 of file binary_space_tree\&.hpp\&.
.PP
Referenced by mlpack::tree::BinarySpaceTree< MetricType, StatisticType, MatType, BoundType, SplitType >::Begin()\&.
.SS "template<typename MetricType , typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat, template< typename BoundMetricType, typename\&.\&.\&. > class BoundType = bound::HRectBound, template< typename SplitBoundType, typename SplitMatType > class SplitType = MidpointSplit> BoundType<MetricType> \fBmlpack::tree::BinarySpaceTree\fP< MetricType, StatisticType, MatType, BoundType, SplitType >::bound\fC [private]\fP"

.PP
The bound object for this node\&. 
.PP
Definition at line 78 of file binary_space_tree\&.hpp\&.
.PP
Referenced by mlpack::tree::BinarySpaceTree< MetricType, StatisticType, MatType, BoundType, SplitType >::Bound()\&.
.SS "template<typename MetricType , typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat, template< typename BoundMetricType, typename\&.\&.\&. > class BoundType = bound::HRectBound, template< typename SplitBoundType, typename SplitMatType > class SplitType = MidpointSplit> size_t \fBmlpack::tree::BinarySpaceTree\fP< MetricType, StatisticType, MatType, BoundType, SplitType >::count\fC [private]\fP"

.PP
The number of points of the dataset contained in this node (and its children)\&. 
.PP
Definition at line 76 of file binary_space_tree\&.hpp\&.
.PP
Referenced by mlpack::tree::BinarySpaceTree< MetricType, StatisticType, MatType, BoundType, SplitType >::Count()\&.
.SS "template<typename MetricType , typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat, template< typename BoundMetricType, typename\&.\&.\&. > class BoundType = bound::HRectBound, template< typename SplitBoundType, typename SplitMatType > class SplitType = MidpointSplit> MatType* \fBmlpack::tree::BinarySpaceTree\fP< MetricType, StatisticType, MatType, BoundType, SplitType >::dataset\fC [private]\fP"

.PP
The dataset\&. If we are the root of the tree, we own the dataset and must delete it\&. 
.PP
Definition at line 90 of file binary_space_tree\&.hpp\&.
.PP
Referenced by mlpack::tree::BinarySpaceTree< MetricType, StatisticType, MatType, BoundType, SplitType >::Dataset()\&.
.SS "template<typename MetricType , typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat, template< typename BoundMetricType, typename\&.\&.\&. > class BoundType = bound::HRectBound, template< typename SplitBoundType, typename SplitMatType > class SplitType = MidpointSplit> \fBElemType\fP \fBmlpack::tree::BinarySpaceTree\fP< MetricType, StatisticType, MatType, BoundType, SplitType >::furthestDescendantDistance\fC [private]\fP"

.PP
The worst possible distance to the furthest descendant, cached to speed things up\&. 
.PP
Definition at line 85 of file binary_space_tree\&.hpp\&.
.SS "template<typename MetricType , typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat, template< typename BoundMetricType, typename\&.\&.\&. > class BoundType = bound::HRectBound, template< typename SplitBoundType, typename SplitMatType > class SplitType = MidpointSplit> \fBBinarySpaceTree\fP* \fBmlpack::tree::BinarySpaceTree\fP< MetricType, StatisticType, MatType, BoundType, SplitType >::left\fC [private]\fP"

.PP
The left child node\&. 
.PP
Definition at line 66 of file binary_space_tree\&.hpp\&.
.PP
Referenced by mlpack::tree::BinarySpaceTree< MetricType, StatisticType, MatType, BoundType, SplitType >::Left()\&.
.SS "template<typename MetricType , typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat, template< typename BoundMetricType, typename\&.\&.\&. > class BoundType = bound::HRectBound, template< typename SplitBoundType, typename SplitMatType > class SplitType = MidpointSplit> \fBElemType\fP \fBmlpack::tree::BinarySpaceTree\fP< MetricType, StatisticType, MatType, BoundType, SplitType >::minimumBoundDistance\fC [private]\fP"

.PP
The minimum distance from the center to any edge of the bound\&. 
.PP
Definition at line 87 of file binary_space_tree\&.hpp\&.
.SS "template<typename MetricType , typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat, template< typename BoundMetricType, typename\&.\&.\&. > class BoundType = bound::HRectBound, template< typename SplitBoundType, typename SplitMatType > class SplitType = MidpointSplit> \fBBinarySpaceTree\fP* \fBmlpack::tree::BinarySpaceTree\fP< MetricType, StatisticType, MatType, BoundType, SplitType >::parent\fC [private]\fP"

.PP
The parent node (NULL if this is the root of the tree)\&. 
.PP
Definition at line 70 of file binary_space_tree\&.hpp\&.
.PP
Referenced by mlpack::tree::BinarySpaceTree< MetricType, StatisticType, MatType, BoundType, SplitType >::Parent()\&.
.SS "template<typename MetricType , typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat, template< typename BoundMetricType, typename\&.\&.\&. > class BoundType = bound::HRectBound, template< typename SplitBoundType, typename SplitMatType > class SplitType = MidpointSplit> \fBElemType\fP \fBmlpack::tree::BinarySpaceTree\fP< MetricType, StatisticType, MatType, BoundType, SplitType >::parentDistance\fC [private]\fP"

.PP
The distance from the centroid of this node to the centroid of the parent\&. 
.PP
Definition at line 82 of file binary_space_tree\&.hpp\&.
.PP
Referenced by mlpack::tree::BinarySpaceTree< MetricType, StatisticType, MatType, BoundType, SplitType >::ParentDistance()\&.
.SS "template<typename MetricType , typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat, template< typename BoundMetricType, typename\&.\&.\&. > class BoundType = bound::HRectBound, template< typename SplitBoundType, typename SplitMatType > class SplitType = MidpointSplit> \fBBinarySpaceTree\fP* \fBmlpack::tree::BinarySpaceTree\fP< MetricType, StatisticType, MatType, BoundType, SplitType >::right\fC [private]\fP"

.PP
The right child node\&. 
.PP
Definition at line 68 of file binary_space_tree\&.hpp\&.
.PP
Referenced by mlpack::tree::BinarySpaceTree< MetricType, StatisticType, MatType, BoundType, SplitType >::ChildPtr(), and mlpack::tree::BinarySpaceTree< MetricType, StatisticType, MatType, BoundType, SplitType >::Right()\&.
.SS "template<typename MetricType , typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat, template< typename BoundMetricType, typename\&.\&.\&. > class BoundType = bound::HRectBound, template< typename SplitBoundType, typename SplitMatType > class SplitType = MidpointSplit> StatisticType \fBmlpack::tree::BinarySpaceTree\fP< MetricType, StatisticType, MatType, BoundType, SplitType >::stat\fC [private]\fP"

.PP
Any extra data contained in the node\&. 
.PP
Definition at line 80 of file binary_space_tree\&.hpp\&.
.PP
Referenced by mlpack::tree::BinarySpaceTree< MetricType, StatisticType, MatType, BoundType, SplitType >::Stat()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for mlpack from the source code\&.
