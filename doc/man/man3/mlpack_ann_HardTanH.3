.TH "mlpack::ann::HardTanH< InputDataType, OutputDataType >" 3 "Sat Mar 25 2017" "Version master" "mlpack" \" -*- nroff -*-
.ad l
.nh
.SH NAME
mlpack::ann::HardTanH< InputDataType, OutputDataType > \- The Hard Tanh activation function, defined by\&.  

.SH SYNOPSIS
.br
.PP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBHardTanH\fP (const double \fBmaxValue\fP=1, const double \fBminValue\fP=\-1)"
.br
.RI "\fICreate the \fBHardTanH\fP object using the specified parameters\&. \fP"
.ti -1c
.RI "template<typename DataType > void \fBBackward\fP (const DataType &&input, DataType &&gy, DataType &&g)"
.br
.RI "\fIOrdinary feed backward pass of a neural network, calculating the function f(x) by propagating x backwards through f\&. \fP"
.ti -1c
.RI "OutputDataType const & \fBDelta\fP () const "
.br
.RI "\fIGet the delta\&. \fP"
.ti -1c
.RI "OutputDataType & \fBDelta\fP ()"
.br
.RI "\fIModify the delta\&. \fP"
.ti -1c
.RI "template<typename InputType , typename OutputType > void \fBForward\fP (const InputType &&input, OutputType &&output)"
.br
.RI "\fIOrdinary feed forward pass of a neural network, evaluating the function f(x) by propagating the activity forward through f\&. \fP"
.ti -1c
.RI "InputDataType const & \fBInputParameter\fP () const "
.br
.RI "\fIGet the input parameter\&. \fP"
.ti -1c
.RI "InputDataType & \fBInputParameter\fP ()"
.br
.RI "\fIModify the input parameter\&. \fP"
.ti -1c
.RI "double const & \fBMaxValue\fP () const "
.br
.RI "\fIGet the maximum value\&. \fP"
.ti -1c
.RI "double & \fBMaxValue\fP ()"
.br
.RI "\fIModify the maximum value\&. \fP"
.ti -1c
.RI "double const & \fBMinValue\fP () const "
.br
.RI "\fIGet the minimum value\&. \fP"
.ti -1c
.RI "double & \fBMinValue\fP ()"
.br
.RI "\fIModify the minimum value\&. \fP"
.ti -1c
.RI "OutputDataType const & \fBOutputParameter\fP () const "
.br
.RI "\fIGet the output parameter\&. \fP"
.ti -1c
.RI "OutputDataType & \fBOutputParameter\fP ()"
.br
.RI "\fIModify the output parameter\&. \fP"
.ti -1c
.RI "template<typename Archive > void \fBSerialize\fP (Archive &ar, const unsigned int)"
.br
.RI "\fISerialize the layer\&. \fP"
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "OutputDataType \fBdelta\fP"
.br
.RI "\fILocally-stored delta object\&. \fP"
.ti -1c
.RI "InputDataType \fBinputParameter\fP"
.br
.RI "\fILocally-stored input parameter object\&. \fP"
.ti -1c
.RI "double \fBmaxValue\fP"
.br
.RI "\fIMaximum value for the \fBHardTanH\fP function\&. \fP"
.ti -1c
.RI "double \fBminValue\fP"
.br
.RI "\fIMinimum value for the \fBHardTanH\fP function\&. \fP"
.ti -1c
.RI "OutputDataType \fBoutputParameter\fP"
.br
.RI "\fILocally-stored output parameter object\&. \fP"
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<typename InputDataType = arma::mat, typename OutputDataType = arma::mat>
.br
class mlpack::ann::HardTanH< InputDataType, OutputDataType >"
The Hard Tanh activation function, defined by\&. 

\begin{eqnarray*} f(x) &=& \left\{ \begin{array}{lr} max & : x > maxValue \\ min & : x \le minValue \\ x & : otherwise \end{array} \right. \\ f'(x) &=& \left\{ \begin{array}{lr} 0 & : x > maxValue \\ 0 & : x \le minValue \\ 1 & : otherwise \end{array} \right. \end{eqnarray*}
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIInputDataType\fP Type of the input data (arma::colvec, arma::mat, arma::sp_mat or arma::cube)\&. 
.br
\fIOutputDataType\fP Type of the output data (arma::colvec, arma::mat, arma::sp_mat or arma::cube)\&. 
.RE
.PP

.PP
Definition at line 49 of file hard_tanh\&.hpp\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "template<typename InputDataType  = arma::mat, typename OutputDataType  = arma::mat> \fBmlpack::ann::HardTanH\fP< InputDataType, OutputDataType >::\fBHardTanH\fP (const double maxValue = \fC1\fP, const double minValue = \fC\-1\fP)"

.PP
Create the \fBHardTanH\fP object using the specified parameters\&. The range of the linear region can be adjusted by specifying the maxValue and minValue\&. Default (maxValue = 1, minValue = -1)\&.
.PP
\fBParameters:\fP
.RS 4
\fImaxValue\fP Range of the linear region maximum value\&. 
.br
\fIminValue\fP Range of the linear region minimum value\&. 
.RE
.PP

.SH "Member Function Documentation"
.PP 
.SS "template<typename InputDataType  = arma::mat, typename OutputDataType  = arma::mat> template<typename DataType > void \fBmlpack::ann::HardTanH\fP< InputDataType, OutputDataType >::Backward (const DataType && input, DataType && gy, DataType && g)"

.PP
Ordinary feed backward pass of a neural network, calculating the function f(x) by propagating x backwards through f\&. Using the results from the feed forward pass\&.
.PP
\fBParameters:\fP
.RS 4
\fIinput\fP The propagated input activation\&. 
.br
\fIgy\fP The backpropagated error\&. 
.br
\fIg\fP The calculated gradient\&. 
.RE
.PP

.SS "template<typename InputDataType  = arma::mat, typename OutputDataType  = arma::mat> OutputDataType const& \fBmlpack::ann::HardTanH\fP< InputDataType, OutputDataType >::Delta () const\fC [inline]\fP"

.PP
Get the delta\&. 
.PP
Definition at line 97 of file hard_tanh\&.hpp\&.
.PP
References mlpack::ann::HardTanH< InputDataType, OutputDataType >::delta\&.
.SS "template<typename InputDataType  = arma::mat, typename OutputDataType  = arma::mat> OutputDataType& \fBmlpack::ann::HardTanH\fP< InputDataType, OutputDataType >::Delta ()\fC [inline]\fP"

.PP
Modify the delta\&. 
.PP
Definition at line 99 of file hard_tanh\&.hpp\&.
.PP
References mlpack::ann::HardTanH< InputDataType, OutputDataType >::delta\&.
.SS "template<typename InputDataType  = arma::mat, typename OutputDataType  = arma::mat> template<typename InputType , typename OutputType > void \fBmlpack::ann::HardTanH\fP< InputDataType, OutputDataType >::Forward (const InputType && input, OutputType && output)"

.PP
Ordinary feed forward pass of a neural network, evaluating the function f(x) by propagating the activity forward through f\&. 
.PP
\fBParameters:\fP
.RS 4
\fIinput\fP Input data used for evaluating the specified function\&. 
.br
\fIoutput\fP Resulting output activation\&. 
.RE
.PP

.SS "template<typename InputDataType  = arma::mat, typename OutputDataType  = arma::mat> InputDataType const& \fBmlpack::ann::HardTanH\fP< InputDataType, OutputDataType >::InputParameter () const\fC [inline]\fP"

.PP
Get the input parameter\&. 
.PP
Definition at line 87 of file hard_tanh\&.hpp\&.
.PP
References mlpack::ann::HardTanH< InputDataType, OutputDataType >::inputParameter\&.
.SS "template<typename InputDataType  = arma::mat, typename OutputDataType  = arma::mat> InputDataType& \fBmlpack::ann::HardTanH\fP< InputDataType, OutputDataType >::InputParameter ()\fC [inline]\fP"

.PP
Modify the input parameter\&. 
.PP
Definition at line 89 of file hard_tanh\&.hpp\&.
.PP
References mlpack::ann::HardTanH< InputDataType, OutputDataType >::inputParameter\&.
.SS "template<typename InputDataType  = arma::mat, typename OutputDataType  = arma::mat> double const& \fBmlpack::ann::HardTanH\fP< InputDataType, OutputDataType >::MaxValue () const\fC [inline]\fP"

.PP
Get the maximum value\&. 
.PP
Definition at line 102 of file hard_tanh\&.hpp\&.
.PP
References mlpack::ann::HardTanH< InputDataType, OutputDataType >::maxValue\&.
.SS "template<typename InputDataType  = arma::mat, typename OutputDataType  = arma::mat> double& \fBmlpack::ann::HardTanH\fP< InputDataType, OutputDataType >::MaxValue ()\fC [inline]\fP"

.PP
Modify the maximum value\&. 
.PP
Definition at line 104 of file hard_tanh\&.hpp\&.
.PP
References mlpack::ann::HardTanH< InputDataType, OutputDataType >::maxValue\&.
.SS "template<typename InputDataType  = arma::mat, typename OutputDataType  = arma::mat> double const& \fBmlpack::ann::HardTanH\fP< InputDataType, OutputDataType >::MinValue () const\fC [inline]\fP"

.PP
Get the minimum value\&. 
.PP
Definition at line 107 of file hard_tanh\&.hpp\&.
.PP
References mlpack::ann::HardTanH< InputDataType, OutputDataType >::minValue\&.
.SS "template<typename InputDataType  = arma::mat, typename OutputDataType  = arma::mat> double& \fBmlpack::ann::HardTanH\fP< InputDataType, OutputDataType >::MinValue ()\fC [inline]\fP"

.PP
Modify the minimum value\&. 
.PP
Definition at line 109 of file hard_tanh\&.hpp\&.
.PP
References mlpack::ann::HardTanH< InputDataType, OutputDataType >::minValue, and mlpack::ann::HardTanH< InputDataType, OutputDataType >::Serialize()\&.
.SS "template<typename InputDataType  = arma::mat, typename OutputDataType  = arma::mat> OutputDataType const& \fBmlpack::ann::HardTanH\fP< InputDataType, OutputDataType >::OutputParameter () const\fC [inline]\fP"

.PP
Get the output parameter\&. 
.PP
Definition at line 92 of file hard_tanh\&.hpp\&.
.PP
References mlpack::ann::HardTanH< InputDataType, OutputDataType >::outputParameter\&.
.SS "template<typename InputDataType  = arma::mat, typename OutputDataType  = arma::mat> OutputDataType& \fBmlpack::ann::HardTanH\fP< InputDataType, OutputDataType >::OutputParameter ()\fC [inline]\fP"

.PP
Modify the output parameter\&. 
.PP
Definition at line 94 of file hard_tanh\&.hpp\&.
.PP
References mlpack::ann::HardTanH< InputDataType, OutputDataType >::outputParameter\&.
.SS "template<typename InputDataType  = arma::mat, typename OutputDataType  = arma::mat> template<typename Archive > void \fBmlpack::ann::HardTanH\fP< InputDataType, OutputDataType >::Serialize (Archive & ar, const unsigned int)"

.PP
Serialize the layer\&. 
.PP
Referenced by mlpack::ann::HardTanH< InputDataType, OutputDataType >::MinValue()\&.
.SH "Member Data Documentation"
.PP 
.SS "template<typename InputDataType  = arma::mat, typename OutputDataType  = arma::mat> OutputDataType \fBmlpack::ann::HardTanH\fP< InputDataType, OutputDataType >::delta\fC [private]\fP"

.PP
Locally-stored delta object\&. 
.PP
Definition at line 119 of file hard_tanh\&.hpp\&.
.PP
Referenced by mlpack::ann::HardTanH< InputDataType, OutputDataType >::Delta()\&.
.SS "template<typename InputDataType  = arma::mat, typename OutputDataType  = arma::mat> InputDataType \fBmlpack::ann::HardTanH\fP< InputDataType, OutputDataType >::inputParameter\fC [private]\fP"

.PP
Locally-stored input parameter object\&. 
.PP
Definition at line 122 of file hard_tanh\&.hpp\&.
.PP
Referenced by mlpack::ann::HardTanH< InputDataType, OutputDataType >::InputParameter()\&.
.SS "template<typename InputDataType  = arma::mat, typename OutputDataType  = arma::mat> double \fBmlpack::ann::HardTanH\fP< InputDataType, OutputDataType >::maxValue\fC [private]\fP"

.PP
Maximum value for the \fBHardTanH\fP function\&. 
.PP
Definition at line 128 of file hard_tanh\&.hpp\&.
.PP
Referenced by mlpack::ann::HardTanH< InputDataType, OutputDataType >::MaxValue()\&.
.SS "template<typename InputDataType  = arma::mat, typename OutputDataType  = arma::mat> double \fBmlpack::ann::HardTanH\fP< InputDataType, OutputDataType >::minValue\fC [private]\fP"

.PP
Minimum value for the \fBHardTanH\fP function\&. 
.PP
Definition at line 131 of file hard_tanh\&.hpp\&.
.PP
Referenced by mlpack::ann::HardTanH< InputDataType, OutputDataType >::MinValue()\&.
.SS "template<typename InputDataType  = arma::mat, typename OutputDataType  = arma::mat> OutputDataType \fBmlpack::ann::HardTanH\fP< InputDataType, OutputDataType >::outputParameter\fC [private]\fP"

.PP
Locally-stored output parameter object\&. 
.PP
Definition at line 125 of file hard_tanh\&.hpp\&.
.PP
Referenced by mlpack::ann::HardTanH< InputDataType, OutputDataType >::OutputParameter()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for mlpack from the source code\&.
