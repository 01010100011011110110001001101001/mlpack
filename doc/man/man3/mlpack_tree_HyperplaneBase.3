.TH "mlpack::tree::HyperplaneBase< BoundT, ProjVectorT >" 3 "Sat Mar 25 2017" "Version master" "mlpack" \" -*- nroff -*-
.ad l
.nh
.SH NAME
mlpack::tree::HyperplaneBase< BoundT, ProjVectorT > \- \fBHyperplaneBase\fP defines a splitting hyperplane based on a projection vector and projection value\&.  

.SH SYNOPSIS
.br
.PP
.SS "Public Types"

.in +1c
.ti -1c
.RI "typedef BoundT \fBBoundType\fP"
.br
.RI "\fIUseful typedef for the bound type\&. \fP"
.ti -1c
.RI "typedef ProjVectorT \fBProjVectorType\fP"
.br
.RI "\fIUseful typedef for the projection vector type\&. \fP"
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBHyperplaneBase\fP ()"
.br
.RI "\fIEmpty Constructor\&. \fP"
.ti -1c
.RI "\fBHyperplaneBase\fP (const \fBProjVectorType\fP &\fBprojVect\fP, double \fBsplitVal\fP)"
.br
.RI "\fICreate the hyperplane with the specified projection vector and split value\&. \fP"
.ti -1c
.RI "template<typename VecType > bool \fBLeft\fP (const VecType &point, typename \fBstd::enable_if_t\fP< \fBIsVector\fP< VecType >::value > *=0) const "
.br
.RI "\fIDetermine if the given point is to the left of the hyperplane, this means if the projection over the projection vector is negative or zero\&. \fP"
.ti -1c
.RI "bool \fBLeft\fP (const \fBBoundType\fP &bound) const "
.br
.RI "\fIDetermine if the given bound is to the left of the hyperplane\&. \fP"
.ti -1c
.RI "template<typename VecType > double \fBProject\fP (const VecType &point, typename \fBstd::enable_if_t\fP< \fBIsVector\fP< VecType >::value > *=0) const "
.br
.RI "\fIProject the given point on the projection vector and subtract the split value\&. \fP"
.ti -1c
.RI "template<typename VecType > bool \fBRight\fP (const VecType &point, typename \fBstd::enable_if_t\fP< \fBIsVector\fP< VecType >::value > *=0) const "
.br
.RI "\fIDetermine if the given point is to the right of the hyperplane, this means if the projection over the projection vector is positive\&. \fP"
.ti -1c
.RI "bool \fBRight\fP (const \fBBoundType\fP &bound) const "
.br
.RI "\fIDetermine if the given bound is to the right of the hyperplane\&. \fP"
.ti -1c
.RI "template<typename Archive > void \fBSerialize\fP (Archive &ar, const unsigned int)"
.br
.RI "\fISerialization\&. \fP"
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "\fBProjVectorType\fP \fBprojVect\fP"
.br
.RI "\fIProjection vector\&. \fP"
.ti -1c
.RI "double \fBsplitVal\fP"
.br
.RI "\fIProjection value that determines the decision boundary\&. \fP"
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<typename BoundT, typename ProjVectorT>
.br
class mlpack::tree::HyperplaneBase< BoundT, ProjVectorT >"
\fBHyperplaneBase\fP defines a splitting hyperplane based on a projection vector and projection value\&. 


.PP
\fBTemplate Parameters:\fP
.RS 4
\fIBoundT\fP The bound type considered\&. 
.br
\fIProjVectorT\fP Type of projection vector (\fBAxisParallelProjVector\fP, \fBProjVector\fP)\&. 
.RE
.PP

.PP
Definition at line 30 of file hyperplane\&.hpp\&.
.SH "Member Typedef Documentation"
.PP 
.SS "template<typename BoundT, typename ProjVectorT> typedef BoundT \fBmlpack::tree::HyperplaneBase\fP< BoundT, ProjVectorT >::\fBBoundType\fP"

.PP
Useful typedef for the bound type\&. 
.PP
Definition at line 34 of file hyperplane\&.hpp\&.
.SS "template<typename BoundT, typename ProjVectorT> typedef ProjVectorT \fBmlpack::tree::HyperplaneBase\fP< BoundT, ProjVectorT >::\fBProjVectorType\fP"

.PP
Useful typedef for the projection vector type\&. 
.PP
Definition at line 36 of file hyperplane\&.hpp\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "template<typename BoundT, typename ProjVectorT> \fBmlpack::tree::HyperplaneBase\fP< BoundT, ProjVectorT >::\fBHyperplaneBase\fP ()\fC [inline]\fP"

.PP
Empty Constructor\&. By default will consider all points to the left\&. 
.PP
Definition at line 49 of file hyperplane\&.hpp\&.
.SS "template<typename BoundT, typename ProjVectorT> \fBmlpack::tree::HyperplaneBase\fP< BoundT, ProjVectorT >::\fBHyperplaneBase\fP (const \fBProjVectorType\fP & projVect, double splitVal)\fC [inline]\fP"

.PP
Create the hyperplane with the specified projection vector and split value\&. 
.PP
\fBParameters:\fP
.RS 4
\fIprojVect\fP Projection vector\&. 
.br
\fIsplitVal\fP Split value\&. 
.RE
.PP

.PP
Definition at line 59 of file hyperplane\&.hpp\&.
.SH "Member Function Documentation"
.PP 
.SS "template<typename BoundT, typename ProjVectorT> template<typename VecType > bool \fBmlpack::tree::HyperplaneBase\fP< BoundT, ProjVectorT >::Left (const VecType & point, typename \fBstd::enable_if_t\fP< \fBIsVector\fP< VecType >::value > * = \fC0\fP) const\fC [inline]\fP"

.PP
Determine if the given point is to the left of the hyperplane, this means if the projection over the projection vector is negative or zero\&. 
.PP
\fBParameters:\fP
.RS 4
\fIpoint\fP Point to be analyzed\&. 
.RE
.PP

.PP
Definition at line 86 of file hyperplane\&.hpp\&.
.PP
References mlpack::tree::HyperplaneBase< BoundT, ProjVectorT >::Project()\&.
.SS "template<typename BoundT, typename ProjVectorT> bool \fBmlpack::tree::HyperplaneBase\fP< BoundT, ProjVectorT >::Left (const \fBBoundType\fP & bound) const\fC [inline]\fP"

.PP
Determine if the given bound is to the left of the hyperplane\&. 
.PP
\fBParameters:\fP
.RS 4
\fIpoint\fP Bound to be analyzed\&. 
.RE
.PP

.PP
Definition at line 110 of file hyperplane\&.hpp\&.
.PP
References mlpack::tree::HyperplaneBase< BoundT, ProjVectorT >::splitVal\&.
.SS "template<typename BoundT, typename ProjVectorT> template<typename VecType > double \fBmlpack::tree::HyperplaneBase\fP< BoundT, ProjVectorT >::Project (const VecType & point, typename \fBstd::enable_if_t\fP< \fBIsVector\fP< VecType >::value > * = \fC0\fP) const\fC [inline]\fP"

.PP
Project the given point on the projection vector and subtract the split value\&. 
.PP
\fBParameters:\fP
.RS 4
\fIpoint\fP Point to be projected\&. 
.RE
.PP

.PP
Definition at line 71 of file hyperplane\&.hpp\&.
.PP
References mlpack::tree::HyperplaneBase< BoundT, ProjVectorT >::splitVal\&.
.PP
Referenced by mlpack::tree::HyperplaneBase< BoundT, ProjVectorT >::Left(), and mlpack::tree::HyperplaneBase< BoundT, ProjVectorT >::Right()\&.
.SS "template<typename BoundT, typename ProjVectorT> template<typename VecType > bool \fBmlpack::tree::HyperplaneBase\fP< BoundT, ProjVectorT >::Right (const VecType & point, typename \fBstd::enable_if_t\fP< \fBIsVector\fP< VecType >::value > * = \fC0\fP) const\fC [inline]\fP"

.PP
Determine if the given point is to the right of the hyperplane, this means if the projection over the projection vector is positive\&. 
.PP
\fBParameters:\fP
.RS 4
\fIpoint\fP Point to be analyzed\&. 
.RE
.PP

.PP
Definition at line 99 of file hyperplane\&.hpp\&.
.PP
References mlpack::tree::HyperplaneBase< BoundT, ProjVectorT >::Project()\&.
.SS "template<typename BoundT, typename ProjVectorT> bool \fBmlpack::tree::HyperplaneBase\fP< BoundT, ProjVectorT >::Right (const \fBBoundType\fP & bound) const\fC [inline]\fP"

.PP
Determine if the given bound is to the right of the hyperplane\&. 
.PP
\fBParameters:\fP
.RS 4
\fIpoint\fP Bound to be analyzed\&. 
.RE
.PP

.PP
Definition at line 122 of file hyperplane\&.hpp\&.
.PP
References mlpack::tree::HyperplaneBase< BoundT, ProjVectorT >::splitVal\&.
.SS "template<typename BoundT, typename ProjVectorT> template<typename Archive > void \fBmlpack::tree::HyperplaneBase\fP< BoundT, ProjVectorT >::Serialize (Archive & ar, const unsigned int)\fC [inline]\fP"

.PP
Serialization\&. 
.PP
Definition at line 133 of file hyperplane\&.hpp\&.
.PP
References mlpack::data::CreateNVP()\&.
.SH "Member Data Documentation"
.PP 
.SS "template<typename BoundT, typename ProjVectorT> \fBProjVectorType\fP \fBmlpack::tree::HyperplaneBase\fP< BoundT, ProjVectorT >::projVect\fC [private]\fP"

.PP
Projection vector\&. 
.PP
Definition at line 40 of file hyperplane\&.hpp\&.
.SS "template<typename BoundT, typename ProjVectorT> double \fBmlpack::tree::HyperplaneBase\fP< BoundT, ProjVectorT >::splitVal\fC [private]\fP"

.PP
Projection value that determines the decision boundary\&. 
.PP
Definition at line 43 of file hyperplane\&.hpp\&.
.PP
Referenced by mlpack::tree::HyperplaneBase< BoundT, ProjVectorT >::Left(), mlpack::tree::HyperplaneBase< BoundT, ProjVectorT >::Project(), and mlpack::tree::HyperplaneBase< BoundT, ProjVectorT >::Right()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for mlpack from the source code\&.
