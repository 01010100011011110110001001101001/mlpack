.TH "mlpack::optimization::SGD< DecomposableFunctionType, UpdatePolicy >" 3 "Sat Mar 25 2017" "Version master" "mlpack" \" -*- nroff -*-
.ad l
.nh
.SH NAME
mlpack::optimization::SGD< DecomposableFunctionType, UpdatePolicy > \- Stochastic Gradient Descent is a technique for minimizing a function which can be expressed as a sum of other functions\&.  

.SH SYNOPSIS
.br
.PP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBSGD\fP (DecomposableFunctionType &\fBfunction\fP, const double \fBstepSize\fP=0\&.01, const size_t \fBmaxIterations\fP=100000, const double \fBtolerance\fP=1e\-5, const bool shuffle=true, const UpdatePolicy updatePolicy=UpdatePolicy())"
.br
.RI "\fIConstruct the \fBSGD\fP optimizer with the given function and parameters\&. \fP"
.ti -1c
.RI "const DecomposableFunctionType & \fBFunction\fP () const "
.br
.RI "\fIGet the instantiated function to be optimized\&. \fP"
.ti -1c
.RI "DecomposableFunctionType & \fBFunction\fP ()"
.br
.RI "\fIModify the instantiated function\&. \fP"
.ti -1c
.RI "size_t \fBMaxIterations\fP () const "
.br
.RI "\fIGet the maximum number of iterations (0 indicates no limit)\&. \fP"
.ti -1c
.RI "size_t & \fBMaxIterations\fP ()"
.br
.RI "\fIModify the maximum number of iterations (0 indicates no limit)\&. \fP"
.ti -1c
.RI "double \fBOptimize\fP (arma::mat &iterate)"
.br
.RI "\fIOptimize the given function using stochastic gradient descent\&. \fP"
.ti -1c
.RI "bool \fBShuffle\fP () const "
.br
.RI "\fIGet whether or not the individual functions are shuffled\&. \fP"
.ti -1c
.RI "bool & \fBShuffle\fP ()"
.br
.RI "\fIModify whether or not the individual functions are shuffled\&. \fP"
.ti -1c
.RI "double \fBStepSize\fP () const "
.br
.RI "\fIGet the step size\&. \fP"
.ti -1c
.RI "double & \fBStepSize\fP ()"
.br
.RI "\fIModify the step size\&. \fP"
.ti -1c
.RI "double \fBTolerance\fP () const "
.br
.RI "\fIGet the tolerance for termination\&. \fP"
.ti -1c
.RI "double & \fBTolerance\fP ()"
.br
.RI "\fIModify the tolerance for termination\&. \fP"
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "DecomposableFunctionType & \fBfunction\fP"
.br
.RI "\fIThe instantiated function\&. \fP"
.ti -1c
.RI "size_t \fBmaxIterations\fP"
.br
.RI "\fIThe maximum number of allowed iterations\&. \fP"
.ti -1c
.RI "bool \fBshuffle\fP"
.br
.RI "\fIControls whether or not the individual functions are shuffled when iterating\&. \fP"
.ti -1c
.RI "double \fBstepSize\fP"
.br
.RI "\fIThe step size for each example\&. \fP"
.ti -1c
.RI "double \fBtolerance\fP"
.br
.RI "\fIThe tolerance for termination\&. \fP"
.ti -1c
.RI "UpdatePolicy \fBupdatePolicy\fP"
.br
.RI "\fIThe update policy used to update the parameters in each iteration\&. \fP"
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<typename DecomposableFunctionType, typename UpdatePolicy = VanillaUpdate>
.br
class mlpack::optimization::SGD< DecomposableFunctionType, UpdatePolicy >"
Stochastic Gradient Descent is a technique for minimizing a function which can be expressed as a sum of other functions\&. 

That is, suppose we have
.PP
\[ f(A) = \sum_{i = 0}^{n} f_i(A) \].PP
and our task is to minimize $ A $\&. Stochastic gradient descent iterates over each function $ f_i(A) $, based on the specified update policy\&. By default vanilla update policy (see \fBmlpack::optimization::VanillaUpdate\fP) is used\&. The \fBSGD\fP class supports either scanning through each of the $ n $ functions $ f_i(A)$ linearly, or in a random sequence\&. The algorithm continues until $ j$ reaches the maximum number of iterations---or when a full sequence of updates through each of the $ n $ functions $ f_i(A) $ produces an improvement within a certain tolerance $ \epsilon $\&. That is,
.PP
\[ | f(A_{j + n}) - f(A_j) | < \epsilon. \].PP
The parameter $\epsilon$ is specified by the tolerance parameter to the constructor; $n$ is specified by the maxIterations parameter\&.
.PP
This class is useful for data-dependent functions whose objective function can be expressed as a sum of objective functions operating on an individual point\&. Then, \fBSGD\fP considers the gradient of the objective function operating on an individual point in its update of $ A $\&.
.PP
For \fBSGD\fP to work, a DecomposableFunctionType template parameter is required\&. This class must implement the following function:
.PP
size_t NumFunctions(); double Evaluate(const arma::mat& coordinates, const size_t i); void Gradient(const arma::mat& coordinates, const size_t i, arma::mat& gradient);
.PP
NumFunctions() should return the number of functions ( $n$), and in the other two functions, the parameter i refers to which individual function (or gradient) is being evaluated\&. So, for the case of a data-dependent function, such as NCA (see \fBmlpack::nca::NCA\fP), NumFunctions() should return the number of points in the dataset, and Evaluate(coordinates, 0) will evaluate the objective function on the first point in the dataset (presumably, the dataset is held internally in the DecomposableFunctionType)\&.
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIDecomposableFunctionType\fP Decomposable objective function type to be minimized\&. 
.br
\fIUpdatePolicy\fP update policy used by \fBSGD\fP during the iterative update process\&. By default vanilla update policy (see \fBmlpack::optimization::VanillaUpdate\fP) is used\&. 
.RE
.PP

.PP
Definition at line 77 of file sgd\&.hpp\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "template<typename DecomposableFunctionType , typename UpdatePolicy  = VanillaUpdate> \fBmlpack::optimization::SGD\fP< DecomposableFunctionType, UpdatePolicy >::\fBSGD\fP (DecomposableFunctionType & function, const double stepSize = \fC0\&.01\fP, const size_t maxIterations = \fC100000\fP, const double tolerance = \fC1e\-5\fP, const bool shuffle = \fCtrue\fP, const UpdatePolicy updatePolicy = \fCUpdatePolicy()\fP)"

.PP
Construct the \fBSGD\fP optimizer with the given function and parameters\&. The defaults here are not necessarily good for the given problem, so it is suggested that the values used be tailored to the task at hand\&. The maximum number of iterations refers to the maximum number of points that are processed (i\&.e\&., one iteration equals one point; one iteration does not equal one pass over the dataset)\&.
.PP
\fBParameters:\fP
.RS 4
\fIfunction\fP Function to be optimized (minimized)\&. 
.br
\fIstepSize\fP Step size for each iteration\&. 
.br
\fImaxIterations\fP Maximum number of iterations allowed (0 means no limit)\&. 
.br
\fItolerance\fP Maximum absolute tolerance to terminate algorithm\&. 
.br
\fIshuffle\fP If true, the function order is shuffled; otherwise, each function is visited in linear order\&. 
.RE
.PP

.SH "Member Function Documentation"
.PP 
.SS "template<typename DecomposableFunctionType , typename UpdatePolicy  = VanillaUpdate> const DecomposableFunctionType& \fBmlpack::optimization::SGD\fP< DecomposableFunctionType, UpdatePolicy >::Function () const\fC [inline]\fP"

.PP
Get the instantiated function to be optimized\&. 
.PP
Definition at line 114 of file sgd\&.hpp\&.
.SS "template<typename DecomposableFunctionType , typename UpdatePolicy  = VanillaUpdate> DecomposableFunctionType& \fBmlpack::optimization::SGD\fP< DecomposableFunctionType, UpdatePolicy >::Function ()\fC [inline]\fP"

.PP
Modify the instantiated function\&. 
.PP
Definition at line 116 of file sgd\&.hpp\&.
.SS "template<typename DecomposableFunctionType , typename UpdatePolicy  = VanillaUpdate> size_t \fBmlpack::optimization::SGD\fP< DecomposableFunctionType, UpdatePolicy >::MaxIterations () const\fC [inline]\fP"

.PP
Get the maximum number of iterations (0 indicates no limit)\&. 
.PP
Definition at line 124 of file sgd\&.hpp\&.
.PP
References mlpack::optimization::SGD< DecomposableFunctionType, UpdatePolicy >::maxIterations\&.
.SS "template<typename DecomposableFunctionType , typename UpdatePolicy  = VanillaUpdate> size_t& \fBmlpack::optimization::SGD\fP< DecomposableFunctionType, UpdatePolicy >::MaxIterations ()\fC [inline]\fP"

.PP
Modify the maximum number of iterations (0 indicates no limit)\&. 
.PP
Definition at line 126 of file sgd\&.hpp\&.
.PP
References mlpack::optimization::SGD< DecomposableFunctionType, UpdatePolicy >::maxIterations\&.
.SS "template<typename DecomposableFunctionType , typename UpdatePolicy  = VanillaUpdate> double \fBmlpack::optimization::SGD\fP< DecomposableFunctionType, UpdatePolicy >::Optimize (arma::mat & iterate)"

.PP
Optimize the given function using stochastic gradient descent\&. The given starting point will be modified to store the finishing point of the algorithm, and the final objective value is returned\&.
.PP
\fBParameters:\fP
.RS 4
\fIiterate\fP Starting point (will be modified)\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Objective value of the final point\&. 
.RE
.PP

.SS "template<typename DecomposableFunctionType , typename UpdatePolicy  = VanillaUpdate> bool \fBmlpack::optimization::SGD\fP< DecomposableFunctionType, UpdatePolicy >::Shuffle () const\fC [inline]\fP"

.PP
Get whether or not the individual functions are shuffled\&. 
.PP
Definition at line 134 of file sgd\&.hpp\&.
.PP
References mlpack::optimization::SGD< DecomposableFunctionType, UpdatePolicy >::shuffle\&.
.SS "template<typename DecomposableFunctionType , typename UpdatePolicy  = VanillaUpdate> bool& \fBmlpack::optimization::SGD\fP< DecomposableFunctionType, UpdatePolicy >::Shuffle ()\fC [inline]\fP"

.PP
Modify whether or not the individual functions are shuffled\&. 
.PP
Definition at line 136 of file sgd\&.hpp\&.
.PP
References mlpack::optimization::SGD< DecomposableFunctionType, UpdatePolicy >::shuffle\&.
.SS "template<typename DecomposableFunctionType , typename UpdatePolicy  = VanillaUpdate> double \fBmlpack::optimization::SGD\fP< DecomposableFunctionType, UpdatePolicy >::StepSize () const\fC [inline]\fP"

.PP
Get the step size\&. 
.PP
Definition at line 119 of file sgd\&.hpp\&.
.PP
References mlpack::optimization::SGD< DecomposableFunctionType, UpdatePolicy >::stepSize\&.
.SS "template<typename DecomposableFunctionType , typename UpdatePolicy  = VanillaUpdate> double& \fBmlpack::optimization::SGD\fP< DecomposableFunctionType, UpdatePolicy >::StepSize ()\fC [inline]\fP"

.PP
Modify the step size\&. 
.PP
Definition at line 121 of file sgd\&.hpp\&.
.PP
References mlpack::optimization::SGD< DecomposableFunctionType, UpdatePolicy >::stepSize\&.
.SS "template<typename DecomposableFunctionType , typename UpdatePolicy  = VanillaUpdate> double \fBmlpack::optimization::SGD\fP< DecomposableFunctionType, UpdatePolicy >::Tolerance () const\fC [inline]\fP"

.PP
Get the tolerance for termination\&. 
.PP
Definition at line 129 of file sgd\&.hpp\&.
.PP
References mlpack::optimization::SGD< DecomposableFunctionType, UpdatePolicy >::tolerance\&.
.SS "template<typename DecomposableFunctionType , typename UpdatePolicy  = VanillaUpdate> double& \fBmlpack::optimization::SGD\fP< DecomposableFunctionType, UpdatePolicy >::Tolerance ()\fC [inline]\fP"

.PP
Modify the tolerance for termination\&. 
.PP
Definition at line 131 of file sgd\&.hpp\&.
.PP
References mlpack::optimization::SGD< DecomposableFunctionType, UpdatePolicy >::tolerance\&.
.SH "Member Data Documentation"
.PP 
.SS "template<typename DecomposableFunctionType , typename UpdatePolicy  = VanillaUpdate> DecomposableFunctionType& \fBmlpack::optimization::SGD\fP< DecomposableFunctionType, UpdatePolicy >::function\fC [private]\fP"

.PP
The instantiated function\&. 
.PP
Definition at line 140 of file sgd\&.hpp\&.
.SS "template<typename DecomposableFunctionType , typename UpdatePolicy  = VanillaUpdate> size_t \fBmlpack::optimization::SGD\fP< DecomposableFunctionType, UpdatePolicy >::maxIterations\fC [private]\fP"

.PP
The maximum number of allowed iterations\&. 
.PP
Definition at line 146 of file sgd\&.hpp\&.
.PP
Referenced by mlpack::optimization::SGD< DecomposableFunctionType, UpdatePolicy >::MaxIterations()\&.
.SS "template<typename DecomposableFunctionType , typename UpdatePolicy  = VanillaUpdate> bool \fBmlpack::optimization::SGD\fP< DecomposableFunctionType, UpdatePolicy >::shuffle\fC [private]\fP"

.PP
Controls whether or not the individual functions are shuffled when iterating\&. 
.PP
Definition at line 153 of file sgd\&.hpp\&.
.PP
Referenced by mlpack::optimization::SGD< DecomposableFunctionType, UpdatePolicy >::Shuffle()\&.
.SS "template<typename DecomposableFunctionType , typename UpdatePolicy  = VanillaUpdate> double \fBmlpack::optimization::SGD\fP< DecomposableFunctionType, UpdatePolicy >::stepSize\fC [private]\fP"

.PP
The step size for each example\&. 
.PP
Definition at line 143 of file sgd\&.hpp\&.
.PP
Referenced by mlpack::optimization::SGD< DecomposableFunctionType, UpdatePolicy >::StepSize()\&.
.SS "template<typename DecomposableFunctionType , typename UpdatePolicy  = VanillaUpdate> double \fBmlpack::optimization::SGD\fP< DecomposableFunctionType, UpdatePolicy >::tolerance\fC [private]\fP"

.PP
The tolerance for termination\&. 
.PP
Definition at line 149 of file sgd\&.hpp\&.
.PP
Referenced by mlpack::optimization::SGD< DecomposableFunctionType, UpdatePolicy >::Tolerance()\&.
.SS "template<typename DecomposableFunctionType , typename UpdatePolicy  = VanillaUpdate> UpdatePolicy \fBmlpack::optimization::SGD\fP< DecomposableFunctionType, UpdatePolicy >::updatePolicy\fC [private]\fP"

.PP
The update policy used to update the parameters in each iteration\&. 
.PP
Definition at line 156 of file sgd\&.hpp\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for mlpack from the source code\&.
