.TH "mlpack::meanshift::MeanShift< UseKernel, KernelType, MatType >" 3 "Sat Mar 25 2017" "Version master" "mlpack" \" -*- nroff -*-
.ad l
.nh
.SH NAME
mlpack::meanshift::MeanShift< UseKernel, KernelType, MatType > \- This class implements mean shift clustering\&.  

.SH SYNOPSIS
.br
.PP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBMeanShift\fP (const double \fBradius\fP=0, const size_t \fBmaxIterations\fP=1000, const KernelType \fBkernel\fP=KernelType())"
.br
.RI "\fICreate a mean shift object and set the parameters which mean shift will be run with\&. \fP"
.ti -1c
.RI "void \fBCluster\fP (const MatType &data, arma::Col< size_t > &assignments, arma::mat &centroids, bool useSeeds=true)"
.br
.RI "\fIPerform mean shift clustering on the data, returning a list of cluster assignments and centroids\&. \fP"
.ti -1c
.RI "double \fBEstimateRadius\fP (const MatType &data, const double ratio=0\&.2)"
.br
.RI "\fIGive an estimation of radius based on given dataset\&. \fP"
.ti -1c
.RI "const KernelType & \fBKernel\fP () const "
.br
.RI "\fIGet the kernel\&. \fP"
.ti -1c
.RI "KernelType & \fBKernel\fP ()"
.br
.RI "\fIModify the kernel\&. \fP"
.ti -1c
.RI "size_t \fBMaxIterations\fP () const "
.br
.RI "\fIGet the maximum number of iterations\&. \fP"
.ti -1c
.RI "size_t & \fBMaxIterations\fP ()"
.br
.RI "\fISet the maximum number of iterations\&. \fP"
.ti -1c
.RI "double \fBRadius\fP () const "
.br
.RI "\fIGet the radius\&. \fP"
.ti -1c
.RI "void \fBRadius\fP (double \fBradius\fP)"
.br
.RI "\fISet the radius\&. \fP"
.in -1c
.SS "Private Member Functions"

.in +1c
.ti -1c
.RI "template<bool ApplyKernel = UseKernel> std::enable_if< ApplyKernel, bool >::type \fBCalculateCentroid\fP (const MatType &data, const std::vector< size_t > &neighbors, const std::vector< double > &distances, arma::colvec &centroid)"
.br
.RI "\fIUse kernel to calculate new centroid given dataset and valid neighbors\&. \fP"
.ti -1c
.RI "template<bool ApplyKernel = UseKernel> std::enable_if<!ApplyKernel, bool >::type \fBCalculateCentroid\fP (const MatType &data, const std::vector< size_t > &neighbors, const std::vector< double > &, arma::colvec &centroid)"
.br
.RI "\fIUse mean to calculate new centroid given dataset and valid neighbors\&. \fP"
.ti -1c
.RI "void \fBGenSeeds\fP (const MatType &data, const double binSize, const int minFreq, MatType &seeds)"
.br
.RI "\fITo speed up, we can generate some seeds from data set and use them as initial centroids rather than all the points in the data set\&. \fP"
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "KernelType \fBkernel\fP"
.br
.RI "\fIInstantiated kernel\&. \fP"
.ti -1c
.RI "size_t \fBmaxIterations\fP"
.br
.RI "\fIMaximum number of iterations before giving up\&. \fP"
.ti -1c
.RI "double \fBradius\fP"
.br
.RI "\fIIf distance of two centroids is less than radius, one will be removed\&. \fP"
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<bool UseKernel = false, typename KernelType = kernel::GaussianKernel, typename MatType = arma::mat>
.br
class mlpack::meanshift::MeanShift< UseKernel, KernelType, MatType >"
This class implements mean shift clustering\&. 

For each point in dataset, apply mean shift algorithm until maximum iterations or convergence\&. Then remove duplicate centroids\&.
.PP
A simple example of how to run mean shift clustering is shown below\&.
.PP
.PP
.nf
extern arma::mat data; // Dataset we want to run mean shift on\&.
arma::Col<size_t> assignments; // Cluster assignments\&.
arma::mat centroids; // Cluster centroids\&.

MeanShift<> meanShift();
meanShift\&.Cluster(dataset, assignments, centroids);
.fi
.PP
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIUseKernel\fP Use kernel or mean to calculate new centroid\&. If false, KernelType will be ignored\&. 
.br
\fIKernelType\fP The kernel to use\&. 
.br
\fIMatType\fP The type of matrix the data is stored in\&. 
.RE
.PP

.PP
Definition at line 49 of file mean_shift\&.hpp\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "template<bool UseKernel = false, typename KernelType  = kernel::GaussianKernel, typename MatType  = arma::mat> \fBmlpack::meanshift::MeanShift\fP< UseKernel, KernelType, MatType >::\fBMeanShift\fP (const double radius = \fC0\fP, const size_t maxIterations = \fC1000\fP, const KernelType kernel = \fCKernelType()\fP)"

.PP
Create a mean shift object and set the parameters which mean shift will be run with\&. 
.PP
\fBParameters:\fP
.RS 4
\fIradius\fP If distance of two centroids is less than it, one will be removed\&. If this value isn't positive, an estimation will be given when clustering\&. 
.br
\fImaxIterations\fP Maximum number of iterations allowed before giving up iterations will terminate\&. 
.br
\fIkernel\fP Optional KernelType object\&. 
.RE
.PP

.SH "Member Function Documentation"
.PP 
.SS "template<bool UseKernel = false, typename KernelType  = kernel::GaussianKernel, typename MatType  = arma::mat> template<bool ApplyKernel = UseKernel> std::enable_if<ApplyKernel, bool>::type \fBmlpack::meanshift::MeanShift\fP< UseKernel, KernelType, MatType >::CalculateCentroid (const MatType & data, const std::vector< size_t > & neighbors, const std::vector< double > & distances, arma::colvec & centroid)\fC [private]\fP"

.PP
Use kernel to calculate new centroid given dataset and valid neighbors\&. 
.PP
\fBParameters:\fP
.RS 4
\fIdata\fP The whole dataset 
.br
\fIneighbors\fP Valid neighbors 
.br
\fIdistances\fP Distances to neighbors 
.SH "centroid Store calculated centroid"
.PP
.RE
.PP

.PP
Referenced by mlpack::meanshift::MeanShift< UseKernel, KernelType, MatType >::Kernel()\&.
.SS "template<bool UseKernel = false, typename KernelType  = kernel::GaussianKernel, typename MatType  = arma::mat> template<bool ApplyKernel = UseKernel> std::enable_if<!ApplyKernel, bool>::type \fBmlpack::meanshift::MeanShift\fP< UseKernel, KernelType, MatType >::CalculateCentroid (const MatType & data, const std::vector< size_t > & neighbors, const std::vector< double > &, arma::colvec & centroid)\fC [private]\fP"

.PP
Use mean to calculate new centroid given dataset and valid neighbors\&. 
.PP
\fBParameters:\fP
.RS 4
\fIdata\fP The whole dataset 
.br
\fIneighbors\fP Valid neighbors 
.br
\fIdistances\fP Distances to neighbors 
.SH "centroid Store calculated centroid"
.PP
.RE
.PP

.SS "template<bool UseKernel = false, typename KernelType  = kernel::GaussianKernel, typename MatType  = arma::mat> void \fBmlpack::meanshift::MeanShift\fP< UseKernel, KernelType, MatType >::Cluster (const MatType & data, arma::Col< size_t > & assignments, arma::mat & centroids, bool useSeeds = \fCtrue\fP)"

.PP
Perform mean shift clustering on the data, returning a list of cluster assignments and centroids\&. 
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIMatType\fP Type of matrix\&. 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIdata\fP Dataset to cluster\&. 
.br
\fIassignments\fP Vector to store cluster assignments in\&. 
.br
\fIcentroids\fP Matrix in which centroids are stored\&. 
.RE
.PP

.SS "template<bool UseKernel = false, typename KernelType  = kernel::GaussianKernel, typename MatType  = arma::mat> double \fBmlpack::meanshift::MeanShift\fP< UseKernel, KernelType, MatType >::EstimateRadius (const MatType & data, const double ratio = \fC0\&.2\fP)"

.PP
Give an estimation of radius based on given dataset\&. 
.PP
\fBParameters:\fP
.RS 4
\fIdata\fP Dataset for estimation\&. 
.br
\fIratio\fP Percentage of dataset to use for nearest neighbor search\&. 
.RE
.PP

.SS "template<bool UseKernel = false, typename KernelType  = kernel::GaussianKernel, typename MatType  = arma::mat> void \fBmlpack::meanshift::MeanShift\fP< UseKernel, KernelType, MatType >::GenSeeds (const MatType & data, const double binSize, const int minFreq, MatType & seeds)\fC [private]\fP"

.PP
To speed up, we can generate some seeds from data set and use them as initial centroids rather than all the points in the data set\&. The basic idea here is that we will place our points into hypercube bins of side length binSize, and any bins that contain fewer than minFreq points will be removed as possible seeds\&. Usually, 1 is a sufficient parameter for minFreq, and the bin size can be set equal to the estimated radius\&.
.PP
\fBParameters:\fP
.RS 4
\fIdata\fP The reference data set\&. 
.br
\fIbinSize\fP Width of hypercube bins\&. 
.br
\fIminFreq\fP Minimum number of points in bin\&. 
.br
\fIseed\fP Matrix to store generated seeds in\&. 
.RE
.PP

.PP
Referenced by mlpack::meanshift::MeanShift< UseKernel, KernelType, MatType >::Kernel()\&.
.SS "template<bool UseKernel = false, typename KernelType  = kernel::GaussianKernel, typename MatType  = arma::mat> const KernelType& \fBmlpack::meanshift::MeanShift\fP< UseKernel, KernelType, MatType >::Kernel () const\fC [inline]\fP"

.PP
Get the kernel\&. 
.PP
Definition at line 100 of file mean_shift\&.hpp\&.
.PP
References mlpack::meanshift::MeanShift< UseKernel, KernelType, MatType >::kernel\&.
.SS "template<bool UseKernel = false, typename KernelType  = kernel::GaussianKernel, typename MatType  = arma::mat> KernelType& \fBmlpack::meanshift::MeanShift\fP< UseKernel, KernelType, MatType >::Kernel ()\fC [inline]\fP"

.PP
Modify the kernel\&. 
.PP
Definition at line 102 of file mean_shift\&.hpp\&.
.PP
References mlpack::meanshift::MeanShift< UseKernel, KernelType, MatType >::CalculateCentroid(), mlpack::meanshift::MeanShift< UseKernel, KernelType, MatType >::GenSeeds(), and mlpack::meanshift::MeanShift< UseKernel, KernelType, MatType >::kernel\&.
.SS "template<bool UseKernel = false, typename KernelType  = kernel::GaussianKernel, typename MatType  = arma::mat> size_t \fBmlpack::meanshift::MeanShift\fP< UseKernel, KernelType, MatType >::MaxIterations () const\fC [inline]\fP"

.PP
Get the maximum number of iterations\&. 
.PP
Definition at line 90 of file mean_shift\&.hpp\&.
.PP
References mlpack::meanshift::MeanShift< UseKernel, KernelType, MatType >::maxIterations\&.
.SS "template<bool UseKernel = false, typename KernelType  = kernel::GaussianKernel, typename MatType  = arma::mat> size_t& \fBmlpack::meanshift::MeanShift\fP< UseKernel, KernelType, MatType >::MaxIterations ()\fC [inline]\fP"

.PP
Set the maximum number of iterations\&. 
.PP
Definition at line 92 of file mean_shift\&.hpp\&.
.PP
References mlpack::meanshift::MeanShift< UseKernel, KernelType, MatType >::maxIterations\&.
.SS "template<bool UseKernel = false, typename KernelType  = kernel::GaussianKernel, typename MatType  = arma::mat> double \fBmlpack::meanshift::MeanShift\fP< UseKernel, KernelType, MatType >::Radius () const\fC [inline]\fP"

.PP
Get the radius\&. 
.PP
Definition at line 95 of file mean_shift\&.hpp\&.
.PP
References mlpack::meanshift::MeanShift< UseKernel, KernelType, MatType >::radius\&.
.SS "template<bool UseKernel = false, typename KernelType  = kernel::GaussianKernel, typename MatType  = arma::mat> void \fBmlpack::meanshift::MeanShift\fP< UseKernel, KernelType, MatType >::Radius (double radius)"

.PP
Set the radius\&. 
.SH "Member Data Documentation"
.PP 
.SS "template<bool UseKernel = false, typename KernelType  = kernel::GaussianKernel, typename MatType  = arma::mat> KernelType \fBmlpack::meanshift::MeanShift\fP< UseKernel, KernelType, MatType >::kernel\fC [private]\fP"

.PP
Instantiated kernel\&. 
.PP
Definition at line 164 of file mean_shift\&.hpp\&.
.PP
Referenced by mlpack::meanshift::MeanShift< UseKernel, KernelType, MatType >::Kernel()\&.
.SS "template<bool UseKernel = false, typename KernelType  = kernel::GaussianKernel, typename MatType  = arma::mat> size_t \fBmlpack::meanshift::MeanShift\fP< UseKernel, KernelType, MatType >::maxIterations\fC [private]\fP"

.PP
Maximum number of iterations before giving up\&. 
.PP
Definition at line 161 of file mean_shift\&.hpp\&.
.PP
Referenced by mlpack::meanshift::MeanShift< UseKernel, KernelType, MatType >::MaxIterations()\&.
.SS "template<bool UseKernel = false, typename KernelType  = kernel::GaussianKernel, typename MatType  = arma::mat> double \fBmlpack::meanshift::MeanShift\fP< UseKernel, KernelType, MatType >::radius\fC [private]\fP"

.PP
If distance of two centroids is less than radius, one will be removed\&. Points with distance to current centroid less than radius will be used to calculate new centroid\&. 
.PP
Definition at line 158 of file mean_shift\&.hpp\&.
.PP
Referenced by mlpack::meanshift::MeanShift< UseKernel, KernelType, MatType >::Radius()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for mlpack from the source code\&.
