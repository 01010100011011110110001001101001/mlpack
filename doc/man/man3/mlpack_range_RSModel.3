.TH "mlpack::range::RSModel" 3 "Sat Mar 25 2017" "Version master" "mlpack" \" -*- nroff -*-
.ad l
.nh
.SH NAME
mlpack::range::RSModel \- 
.SH SYNOPSIS
.br
.PP
.SS "Public Types"

.in +1c
.ti -1c
.RI "enum \fBTreeTypes\fP { \fBKD_TREE\fP, \fBCOVER_TREE\fP, \fBR_TREE\fP, \fBR_STAR_TREE\fP, \fBBALL_TREE\fP, \fBX_TREE\fP, \fBHILBERT_R_TREE\fP, \fBR_PLUS_TREE\fP, \fBR_PLUS_PLUS_TREE\fP, \fBVP_TREE\fP, \fBRP_TREE\fP, \fBMAX_RP_TREE\fP, \fBUB_TREE\fP, \fBOCTREE\fP }"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBRSModel\fP (const \fBTreeTypes\fP \fBtreeType\fP=TreeTypes::KD_TREE, const bool \fBrandomBasis\fP=false)"
.br
.RI "\fIInitialize the \fBRSModel\fP with the given type and whether or not a random basis should be used\&. \fP"
.ti -1c
.RI "\fBRSModel\fP (const \fBRSModel\fP &other)"
.br
.RI "\fICopy the given \fBRSModel\fP\&. \fP"
.ti -1c
.RI "\fBRSModel\fP (\fBRSModel\fP &&other)"
.br
.RI "\fITake ownership of the given \fBRSModel\fP\&. \fP"
.ti -1c
.RI "\fB~RSModel\fP ()"
.br
.RI "\fIClean memory, if necessary\&. \fP"
.ti -1c
.RI "void \fBBuildModel\fP (arma::mat &&referenceSet, const size_t \fBleafSize\fP, const bool naive, const bool singleMode)"
.br
.RI "\fIBuild the reference tree on the given dataset with the given parameters\&. \fP"
.ti -1c
.RI "const arma::mat & \fBDataset\fP () const "
.br
.RI "\fIExpose the dataset\&. \fP"
.ti -1c
.RI "size_t \fBLeafSize\fP () const "
.br
.RI "\fIGet the leaf size (applicable to everything but the cover tree)\&. \fP"
.ti -1c
.RI "size_t & \fBLeafSize\fP ()"
.br
.RI "\fIModify the leaf size (applicable to everything but the cover tree)\&. \fP"
.ti -1c
.RI "bool \fBNaive\fP () const "
.br
.RI "\fIGet whether the model is in naive search mode\&. \fP"
.ti -1c
.RI "bool & \fBNaive\fP ()"
.br
.RI "\fIModify whether the model is in naive search mode\&. \fP"
.ti -1c
.RI "\fBRSModel\fP & \fBoperator=\fP (const \fBRSModel\fP &other)"
.br
.RI "\fICopy the given \fBRSModel\fP\&. \fP"
.ti -1c
.RI "\fBRSModel\fP & \fBoperator=\fP (\fBRSModel\fP &&other)"
.br
.RI "\fITake ownership of the given \fBRSModel\fP\&. \fP"
.ti -1c
.RI "bool \fBRandomBasis\fP () const "
.br
.RI "\fIGet whether a random basis is used\&. \fP"
.ti -1c
.RI "bool & \fBRandomBasis\fP ()"
.br
.RI "\fIModify whether a random basis is used (don't do this after the model has been built)\&. \fP"
.ti -1c
.RI "void \fBSearch\fP (arma::mat &&querySet, const \fBmath::Range\fP &range, std::vector< std::vector< size_t >> &neighbors, std::vector< std::vector< double >> &distances)"
.br
.RI "\fIPerform range search\&. \fP"
.ti -1c
.RI "void \fBSearch\fP (const \fBmath::Range\fP &range, std::vector< std::vector< size_t >> &neighbors, std::vector< std::vector< double >> &distances)"
.br
.RI "\fIPerform monochromatic range search, with the reference set as the query set\&. \fP"
.ti -1c
.RI "template<typename Archive > void \fBSerialize\fP (Archive &ar, const unsigned int)"
.br
.RI "\fISerialize the range search model\&. \fP"
.ti -1c
.RI "bool \fBSingleMode\fP () const "
.br
.RI "\fIGet whether the model is in single-tree search mode\&. \fP"
.ti -1c
.RI "bool & \fBSingleMode\fP ()"
.br
.RI "\fIModify whether the model is in single-tree search mode\&. \fP"
.ti -1c
.RI "\fBTreeTypes\fP \fBTreeType\fP () const "
.br
.RI "\fIGet the type of tree\&. \fP"
.ti -1c
.RI "\fBTreeTypes\fP & \fBTreeType\fP ()"
.br
.RI "\fIModify the type of tree (don't do this after the model has been built)\&. \fP"
.in -1c
.SS "Private Member Functions"

.in +1c
.ti -1c
.RI "void \fBCleanMemory\fP ()"
.br
.RI "\fIClean up memory\&. \fP"
.ti -1c
.RI "\fBstd::string\fP \fBTreeName\fP () const "
.br
.RI "\fIReturn a string representing the name of the tree\&. \fP"
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "size_t \fBleafSize\fP"
.br
.ti -1c
.RI "arma::mat \fBq\fP"
.br
.RI "\fIRandom projection matrix\&. \fP"
.ti -1c
.RI "bool \fBrandomBasis\fP"
.br
.RI "\fIIf true, we randomly project the data into a new basis before search\&. \fP"
.ti -1c
.RI "boost::variant< \fBRSType\fP< \fBtree::KDTree\fP > *, \fBRSType\fP< \fBtree::StandardCoverTree\fP > *, \fBRSType\fP< \fBtree::RTree\fP > *, \fBRSType\fP< \fBtree::RStarTree\fP > *, \fBRSType\fP< \fBtree::BallTree\fP > *, \fBRSType\fP< \fBtree::XTree\fP > *, \fBRSType\fP< \fBtree::HilbertRTree\fP > *, \fBRSType\fP< \fBtree::RPlusTree\fP > *, \fBRSType\fP< \fBtree::RPlusPlusTree\fP > *, \fBRSType\fP< \fBtree::VPTree\fP > *, \fBRSType\fP< \fBtree::RPTree\fP > *, \fBRSType\fP< \fBtree::MaxRPTree\fP > *, \fBRSType\fP< \fBtree::UBTree\fP > *, \fBRSType\fP< \fBtree::Octree\fP > * > \fBrSearch\fP"
.br
.RI "\fIrSearch holds an instance of the \fBRangeSearch\fP class for the current treeType\&. \fP"
.ti -1c
.RI "\fBTreeTypes\fP \fBtreeType\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
Definition at line 238 of file rs_model\&.hpp\&.
.SH "Member Enumeration Documentation"
.PP 
.SS "enum \fBmlpack::range::RSModel::TreeTypes\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIKD_TREE \fP\fP
.TP
\fB\fICOVER_TREE \fP\fP
.TP
\fB\fIR_TREE \fP\fP
.TP
\fB\fIR_STAR_TREE \fP\fP
.TP
\fB\fIBALL_TREE \fP\fP
.TP
\fB\fIX_TREE \fP\fP
.TP
\fB\fIHILBERT_R_TREE \fP\fP
.TP
\fB\fIR_PLUS_TREE \fP\fP
.TP
\fB\fIR_PLUS_PLUS_TREE \fP\fP
.TP
\fB\fIVP_TREE \fP\fP
.TP
\fB\fIRP_TREE \fP\fP
.TP
\fB\fIMAX_RP_TREE \fP\fP
.TP
\fB\fIUB_TREE \fP\fP
.TP
\fB\fIOCTREE \fP\fP
.PP
Definition at line 241 of file rs_model\&.hpp\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "mlpack::range::RSModel::RSModel (const \fBTreeTypes\fP treeType = \fCTreeTypes::KD_TREE\fP, const bool randomBasis = \fCfalse\fP)"

.PP
Initialize the \fBRSModel\fP with the given type and whether or not a random basis should be used\&. 
.PP
\fBParameters:\fP
.RS 4
\fItreeType\fP Type of tree to use\&. 
.br
\fIrandomBasis\fP Whether or not to use a random basis\&. 
.RE
.PP

.SS "mlpack::range::RSModel::RSModel (const \fBRSModel\fP & other)"

.PP
Copy the given \fBRSModel\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fIother\fP \fBRSModel\fP to copy\&. 
.RE
.PP

.SS "mlpack::range::RSModel::RSModel (\fBRSModel\fP && other)"

.PP
Take ownership of the given \fBRSModel\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fIother\fP \fBRSModel\fP to take ownership of\&. 
.RE
.PP

.SS "mlpack::range::RSModel::~RSModel ()"

.PP
Clean memory, if necessary\&. 
.SH "Member Function Documentation"
.PP 
.SS "void mlpack::range::RSModel::BuildModel (arma::mat && referenceSet, const size_t leafSize, const bool naive, const bool singleMode)"

.PP
Build the reference tree on the given dataset with the given parameters\&. This takes possession of the reference set to avoid a copy\&.
.PP
\fBParameters:\fP
.RS 4
\fIreferenceSet\fP Set of reference points\&. 
.br
\fIleafSize\fP Leaf size of tree (ignored for the cover tree)\&. 
.br
\fInaive\fP Whether naive search should be used\&. 
.br
\fIsingleMode\fP Whether single-tree search should be used\&. 
.RE
.PP

.SS "void mlpack::range::RSModel::CleanMemory ()\fC [private]\fP"

.PP
Clean up memory\&. 
.SS "const arma::mat& mlpack::range::RSModel::Dataset () const"

.PP
Expose the dataset\&. 
.SS "size_t mlpack::range::RSModel::LeafSize () const\fC [inline]\fP"

.PP
Get the leaf size (applicable to everything but the cover tree)\&. 
.PP
Definition at line 350 of file rs_model\&.hpp\&.
.SS "size_t& mlpack::range::RSModel::LeafSize ()\fC [inline]\fP"

.PP
Modify the leaf size (applicable to everything but the cover tree)\&. 
.PP
Definition at line 352 of file rs_model\&.hpp\&.
.SS "bool mlpack::range::RSModel::Naive () const"

.PP
Get whether the model is in naive search mode\&. 
.SS "bool& mlpack::range::RSModel::Naive ()"

.PP
Modify whether the model is in naive search mode\&. 
.SS "\fBRSModel\fP& mlpack::range::RSModel::operator= (const \fBRSModel\fP & other)"

.PP
Copy the given \fBRSModel\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fIother\fP \fBRSModel\fP to copy\&. 
.RE
.PP

.SS "\fBRSModel\fP& mlpack::range::RSModel::operator= (\fBRSModel\fP && other)"

.PP
Take ownership of the given \fBRSModel\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fIother\fP \fBRSModel\fP to take ownership of\&. 
.RE
.PP

.SS "bool mlpack::range::RSModel::RandomBasis () const\fC [inline]\fP"

.PP
Get whether a random basis is used\&. 
.PP
Definition at line 360 of file rs_model\&.hpp\&.
.SS "bool& mlpack::range::RSModel::RandomBasis ()\fC [inline]\fP"

.PP
Modify whether a random basis is used (don't do this after the model has been built)\&. 
.PP
Definition at line 363 of file rs_model\&.hpp\&.
.PP
References string()\&.
.SS "void mlpack::range::RSModel::Search (arma::mat && querySet, const \fBmath::Range\fP & range, std::vector< std::vector< size_t >> & neighbors, std::vector< std::vector< double >> & distances)"

.PP
Perform range search\&. This takes possession of the query set, so the query set will not be usable after the search\&. For more information on the output format, see \fBRangeSearch<>::Search()\fP\&.
.PP
\fBParameters:\fP
.RS 4
\fIquerySet\fP Set of query points\&. 
.br
\fIrange\fP Range to search for\&. 
.br
\fIneighbors\fP Output: neighbors falling within the desired range\&. 
.br
\fIdistances\fP Output: distances of neighbors\&. 
.RE
.PP

.SS "void mlpack::range::RSModel::Search (const \fBmath::Range\fP & range, std::vector< std::vector< size_t >> & neighbors, std::vector< std::vector< double >> & distances)"

.PP
Perform monochromatic range search, with the reference set as the query set\&. For more information on the output format, see \fBRangeSearch<>::Search()\fP\&.
.PP
\fBParameters:\fP
.RS 4
\fIrange\fP Range to search for\&. 
.br
\fIneighbors\fP Output: neighbors falling within the desired range\&. 
.br
\fIdistances\fP Output: distances of neighbors\&. 
.RE
.PP

.SS "template<typename Archive > void mlpack::range::RSModel::Serialize (Archive & ar, const unsigned int)"

.PP
Serialize the range search model\&. 
.SS "bool mlpack::range::RSModel::SingleMode () const"

.PP
Get whether the model is in single-tree search mode\&. 
.SS "bool& mlpack::range::RSModel::SingleMode ()"

.PP
Modify whether the model is in single-tree search mode\&. 
.SS "\fBstd::string\fP mlpack::range::RSModel::TreeName () const\fC [private]\fP"

.PP
Return a string representing the name of the tree\&. This is used for logging output\&. 
.SS "\fBTreeTypes\fP mlpack::range::RSModel::TreeType () const\fC [inline]\fP"

.PP
Get the type of tree\&. 
.PP
Definition at line 355 of file rs_model\&.hpp\&.
.SS "\fBTreeTypes\fP& mlpack::range::RSModel::TreeType ()\fC [inline]\fP"

.PP
Modify the type of tree (don't do this after the model has been built)\&. 
.PP
Definition at line 357 of file rs_model\&.hpp\&.
.SH "Member Data Documentation"
.PP 
.SS "size_t mlpack::range::RSModel::leafSize\fC [private]\fP"

.PP
Definition at line 261 of file rs_model\&.hpp\&.
.SS "arma::mat mlpack::range::RSModel::q\fC [private]\fP"

.PP
Random projection matrix\&. 
.PP
Definition at line 266 of file rs_model\&.hpp\&.
.SS "bool mlpack::range::RSModel::randomBasis\fC [private]\fP"

.PP
If true, we randomly project the data into a new basis before search\&. 
.PP
Definition at line 264 of file rs_model\&.hpp\&.
.SS "boost::variant<\fBRSType\fP<\fBtree::KDTree\fP>*, \fBRSType\fP<\fBtree::StandardCoverTree\fP>*, \fBRSType\fP<\fBtree::RTree\fP>*, \fBRSType\fP<\fBtree::RStarTree\fP>*, \fBRSType\fP<\fBtree::BallTree\fP>*, \fBRSType\fP<\fBtree::XTree\fP>*, \fBRSType\fP<\fBtree::HilbertRTree\fP>*, \fBRSType\fP<\fBtree::RPlusTree\fP>*, \fBRSType\fP<\fBtree::RPlusPlusTree\fP>*, \fBRSType\fP<\fBtree::VPTree\fP>*, \fBRSType\fP<\fBtree::RPTree\fP>*, \fBRSType\fP<\fBtree::MaxRPTree\fP>*, \fBRSType\fP<\fBtree::UBTree\fP>*, \fBRSType\fP<\fBtree::Octree\fP>*> mlpack::range::RSModel::rSearch\fC [private]\fP"

.PP
rSearch holds an instance of the \fBRangeSearch\fP class for the current treeType\&. It is initialized every time BuildModel is executed\&. We access to the contained value through the visitor classes defined above\&. 
.PP
Definition at line 286 of file rs_model\&.hpp\&.
.SS "\fBTreeTypes\fP mlpack::range::RSModel::treeType\fC [private]\fP"

.PP
Definition at line 260 of file rs_model\&.hpp\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for mlpack from the source code\&.
