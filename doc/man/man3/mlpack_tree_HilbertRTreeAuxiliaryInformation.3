.TH "mlpack::tree::HilbertRTreeAuxiliaryInformation< TreeType, HilbertValueType >" 3 "Sat Mar 25 2017" "Version master" "mlpack" \" -*- nroff -*-
.ad l
.nh
.SH NAME
mlpack::tree::HilbertRTreeAuxiliaryInformation< TreeType, HilbertValueType > \- 
.SH SYNOPSIS
.br
.PP
.SS "Public Types"

.in +1c
.ti -1c
.RI "typedef TreeType::ElemType \fBElemType\fP"
.br
.RI "\fIThe element type held by the tree\&. \fP"
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBHilbertRTreeAuxiliaryInformation\fP ()"
.br
.RI "\fIDefault constructor\&. \fP"
.ti -1c
.RI "\fBHilbertRTreeAuxiliaryInformation\fP (const TreeType *node)"
.br
.RI "\fIConstruct this as an auxiliary information for the given node\&. \fP"
.ti -1c
.RI "\fBHilbertRTreeAuxiliaryInformation\fP (const \fBHilbertRTreeAuxiliaryInformation\fP &other, TreeType *tree=NULL, bool deepCopy=true)"
.br
.RI "\fICreate an auxiliary information object by copying from another object\&. \fP"
.ti -1c
.RI "\fBHilbertRTreeAuxiliaryInformation\fP (\fBHilbertRTreeAuxiliaryInformation\fP &&other)"
.br
.RI "\fICreate an auxiliary information object by moving from the other node\&. \fP"
.ti -1c
.RI "bool \fBHandleNodeInsertion\fP (TreeType *node, TreeType *nodeToInsert, bool insertionLevel)"
.br
.RI "\fIThe Hilbert R tree requires to insert nodes according to their Hilbert value\&. \fP"
.ti -1c
.RI "bool \fBHandleNodeRemoval\fP (TreeType *node, const size_t nodeIndex)"
.br
.RI "\fIThe Hilbert R tree requires all nodes to be arranged according to their Hilbert value\&. \fP"
.ti -1c
.RI "bool \fBHandlePointDeletion\fP (TreeType *node, const size_t localIndex)"
.br
.RI "\fIThe Hilbert R tree requires all points to be arranged according to their Hilbert value\&. \fP"
.ti -1c
.RI "bool \fBHandlePointInsertion\fP (TreeType *node, const size_t point)"
.br
.RI "\fIThe Hilbert R tree requires to insert points according to their Hilbert value\&. \fP"
.ti -1c
.RI "const HilbertValueType< \fBElemType\fP > & \fBHilbertValue\fP () const "
.br
.RI "\fIReturn the largest Hilbert value of a point covered by the node\&. \fP"
.ti -1c
.RI "HilbertValueType< \fBElemType\fP > & \fBHilbertValue\fP ()"
.br
.RI "\fIModify the largest Hilbert value of a point covered by the node\&. \fP"
.ti -1c
.RI "void \fBNullifyData\fP ()"
.br
.RI "\fIClear memory\&. \fP"
.ti -1c
.RI "\fBHilbertRTreeAuxiliaryInformation\fP & \fBoperator=\fP (const \fBHilbertRTreeAuxiliaryInformation\fP &other)"
.br
.RI "\fICopy the auxiliary information\&. \fP"
.ti -1c
.RI "template<typename Archive > void \fBSerialize\fP (Archive &ar, const unsigned int)"
.br
.RI "\fISerialize the information\&. \fP"
.ti -1c
.RI "bool \fBUpdateAuxiliaryInfo\fP (TreeType *node)"
.br
.RI "\fIUpdate the auxiliary information in the node\&. \fP"
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static const std::vector< TreeType * > \fBChildren\fP (const TreeType *tree)"
.br
.RI "\fIReturn the children vector of the tree\&. \fP"
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "HilbertValueType< \fBElemType\fP > \fBhilbertValue\fP"
.br
.RI "\fIThe largest Hilbert value of a point enclosed by the node\&. \fP"
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<typename TreeType, template< typename > class HilbertValueType>
.br
class mlpack::tree::HilbertRTreeAuxiliaryInformation< TreeType, HilbertValueType >"

.PP
Definition at line 22 of file hilbert_r_tree_auxiliary_information\&.hpp\&.
.SH "Member Typedef Documentation"
.PP 
.SS "template<typename TreeType , template< typename > class HilbertValueType> typedef TreeType::ElemType \fBmlpack::tree::HilbertRTreeAuxiliaryInformation\fP< TreeType, HilbertValueType >::\fBElemType\fP"

.PP
The element type held by the tree\&. 
.PP
Definition at line 26 of file hilbert_r_tree_auxiliary_information\&.hpp\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "template<typename TreeType , template< typename > class HilbertValueType> \fBmlpack::tree::HilbertRTreeAuxiliaryInformation\fP< TreeType, HilbertValueType >::\fBHilbertRTreeAuxiliaryInformation\fP ()"

.PP
Default constructor\&. 
.SS "template<typename TreeType , template< typename > class HilbertValueType> \fBmlpack::tree::HilbertRTreeAuxiliaryInformation\fP< TreeType, HilbertValueType >::\fBHilbertRTreeAuxiliaryInformation\fP (const TreeType * node)"

.PP
Construct this as an auxiliary information for the given node\&. 
.PP
\fBParameters:\fP
.RS 4
\fInode\fP The node that stores this auxiliary information\&. 
.RE
.PP

.SS "template<typename TreeType , template< typename > class HilbertValueType> \fBmlpack::tree::HilbertRTreeAuxiliaryInformation\fP< TreeType, HilbertValueType >::\fBHilbertRTreeAuxiliaryInformation\fP (const \fBHilbertRTreeAuxiliaryInformation\fP< TreeType, HilbertValueType > & other, TreeType * tree = \fCNULL\fP, bool deepCopy = \fCtrue\fP)"

.PP
Create an auxiliary information object by copying from another object\&. 
.PP
\fBParameters:\fP
.RS 4
\fIother\fP Another auxiliary information object from which the information will be copied\&. 
.br
\fItree\fP The node that holds the auxiliary information\&. 
.br
\fIdeepCopy\fP If false, the new object uses the same memory (not used here)\&. 
.RE
.PP

.SS "template<typename TreeType , template< typename > class HilbertValueType> \fBmlpack::tree::HilbertRTreeAuxiliaryInformation\fP< TreeType, HilbertValueType >::\fBHilbertRTreeAuxiliaryInformation\fP (\fBHilbertRTreeAuxiliaryInformation\fP< TreeType, HilbertValueType > && other)"

.PP
Create an auxiliary information object by moving from the other node\&. 
.PP
\fBParameters:\fP
.RS 4
\fIother\fP The object from which the information will be moved\&. 
.RE
.PP

.SH "Member Function Documentation"
.PP 
.SS "template<typename TreeType , template< typename > class HilbertValueType> static const std::vector<TreeType*> \fBmlpack::tree::HilbertRTreeAuxiliaryInformation\fP< TreeType, HilbertValueType >::Children (const TreeType * tree)\fC [inline]\fP, \fC [static]\fP"

.PP
Return the children vector of the tree\&. 
.PP
Definition at line 124 of file hilbert_r_tree_auxiliary_information\&.hpp\&.
.SS "template<typename TreeType , template< typename > class HilbertValueType> bool \fBmlpack::tree::HilbertRTreeAuxiliaryInformation\fP< TreeType, HilbertValueType >::HandleNodeInsertion (TreeType * node, TreeType * nodeToInsert, bool insertionLevel)"

.PP
The Hilbert R tree requires to insert nodes according to their Hilbert value\&. This method should take care of it\&. It returns false if it does nothing and true if it handles the insertion process\&.
.PP
\fBParameters:\fP
.RS 4
\fInode\fP The node in which the nodeToInsert is being inserted\&. 
.br
\fInodeToInsert\fP The node being inserted\&. 
.br
\fIinsertionLevel\fP The level of the tree at which the nodeToInsert should be inserted\&. 
.RE
.PP

.SS "template<typename TreeType , template< typename > class HilbertValueType> bool \fBmlpack::tree::HilbertRTreeAuxiliaryInformation\fP< TreeType, HilbertValueType >::HandleNodeRemoval (TreeType * node, const size_t nodeIndex)"

.PP
The Hilbert R tree requires all nodes to be arranged according to their Hilbert value\&. This method should take care of saving this property after the deletion process\&. It returns false if it does nothing and true if it handles the deletion process\&.
.PP
\fBParameters:\fP
.RS 4
\fInode\fP The node from which the node is being deleted\&. 
.br
\fInodeIndex\fP The index of the node being deleted\&. 
.RE
.PP

.SS "template<typename TreeType , template< typename > class HilbertValueType> bool \fBmlpack::tree::HilbertRTreeAuxiliaryInformation\fP< TreeType, HilbertValueType >::HandlePointDeletion (TreeType * node, const size_t localIndex)"

.PP
The Hilbert R tree requires all points to be arranged according to their Hilbert value\&. This method should take care of saving this property after the deletion process\&. It returns false if it does nothing and true if it handles the deletion process\&.
.PP
\fBParameters:\fP
.RS 4
\fInode\fP The node from which the point is being deleted\&. 
.br
\fIlocalIndex\fP The index of the point being deleted\&. 
.RE
.PP

.SS "template<typename TreeType , template< typename > class HilbertValueType> bool \fBmlpack::tree::HilbertRTreeAuxiliaryInformation\fP< TreeType, HilbertValueType >::HandlePointInsertion (TreeType * node, const size_t point)"

.PP
The Hilbert R tree requires to insert points according to their Hilbert value\&. This method should take care of it\&. It returns false if it does nothing and true if it handles the insertion process\&.
.PP
\fBParameters:\fP
.RS 4
\fInode\fP The node in which the point is being inserted\&. 
.br
\fIpoint\fP The number of the point being inserted\&. 
.RE
.PP

.SS "template<typename TreeType , template< typename > class HilbertValueType> const HilbertValueType<\fBElemType\fP>& \fBmlpack::tree::HilbertRTreeAuxiliaryInformation\fP< TreeType, HilbertValueType >::HilbertValue () const\fC [inline]\fP"

.PP
Return the largest Hilbert value of a point covered by the node\&. 
.PP
Definition at line 133 of file hilbert_r_tree_auxiliary_information\&.hpp\&.
.PP
References mlpack::tree::HilbertRTreeAuxiliaryInformation< TreeType, HilbertValueType >::hilbertValue\&.
.SS "template<typename TreeType , template< typename > class HilbertValueType> HilbertValueType<\fBElemType\fP>& \fBmlpack::tree::HilbertRTreeAuxiliaryInformation\fP< TreeType, HilbertValueType >::HilbertValue ()\fC [inline]\fP"

.PP
Modify the largest Hilbert value of a point covered by the node\&. 
.PP
Definition at line 136 of file hilbert_r_tree_auxiliary_information\&.hpp\&.
.PP
References mlpack::tree::HilbertRTreeAuxiliaryInformation< TreeType, HilbertValueType >::hilbertValue, and mlpack::tree::HilbertRTreeAuxiliaryInformation< TreeType, HilbertValueType >::Serialize()\&.
.SS "template<typename TreeType , template< typename > class HilbertValueType> void \fBmlpack::tree::HilbertRTreeAuxiliaryInformation\fP< TreeType, HilbertValueType >::NullifyData ()"

.PP
Clear memory\&. 
.SS "template<typename TreeType , template< typename > class HilbertValueType> \fBHilbertRTreeAuxiliaryInformation\fP& \fBmlpack::tree::HilbertRTreeAuxiliaryInformation\fP< TreeType, HilbertValueType >::operator= (const \fBHilbertRTreeAuxiliaryInformation\fP< TreeType, HilbertValueType > & other)"

.PP
Copy the auxiliary information\&. 
.PP
\fBParameters:\fP
.RS 4
\fIother\fP The object from which the information will be moved\&. 
.RE
.PP

.SS "template<typename TreeType , template< typename > class HilbertValueType> template<typename Archive > void \fBmlpack::tree::HilbertRTreeAuxiliaryInformation\fP< TreeType, HilbertValueType >::Serialize (Archive & ar, const unsigned int)"

.PP
Serialize the information\&. 
.PP
Referenced by mlpack::tree::HilbertRTreeAuxiliaryInformation< TreeType, HilbertValueType >::HilbertValue()\&.
.SS "template<typename TreeType , template< typename > class HilbertValueType> bool \fBmlpack::tree::HilbertRTreeAuxiliaryInformation\fP< TreeType, HilbertValueType >::UpdateAuxiliaryInfo (TreeType * node)"

.PP
Update the auxiliary information in the node\&. The method returns true if the update should be propagated downward\&.
.PP
\fBParameters:\fP
.RS 4
\fInode\fP The node in which the auxiliary information being update\&. 
.RE
.PP

.SH "Member Data Documentation"
.PP 
.SS "template<typename TreeType , template< typename > class HilbertValueType> HilbertValueType<\fBElemType\fP> \fBmlpack::tree::HilbertRTreeAuxiliaryInformation\fP< TreeType, HilbertValueType >::hilbertValue\fC [private]\fP"

.PP
The largest Hilbert value of a point enclosed by the node\&. 
.PP
Definition at line 129 of file hilbert_r_tree_auxiliary_information\&.hpp\&.
.PP
Referenced by mlpack::tree::HilbertRTreeAuxiliaryInformation< TreeType, HilbertValueType >::HilbertValue()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for mlpack from the source code\&.
