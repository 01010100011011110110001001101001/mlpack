.TH "mlpack::neighbor::QDAFN< MatType >" 3 "Sat Mar 25 2017" "Version master" "mlpack" \" -*- nroff -*-
.ad l
.nh
.SH NAME
mlpack::neighbor::QDAFN< MatType > \- 
.SH SYNOPSIS
.br
.PP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBQDAFN\fP (const size_t \fBl\fP, const size_t \fBm\fP)"
.br
.RI "\fIConstruct the \fBQDAFN\fP object but do not train it\&. \fP"
.ti -1c
.RI "\fBQDAFN\fP (const MatType &referenceSet, const size_t \fBl\fP, const size_t \fBm\fP)"
.br
.RI "\fIConstruct the \fBQDAFN\fP object with the given reference set (this is the set that will be searched)\&. \fP"
.ti -1c
.RI "const MatType & \fBCandidateSet\fP (const size_t t) const "
.br
.RI "\fIGet the candidate set for the given projection table\&. \fP"
.ti -1c
.RI "MatType & \fBCandidateSet\fP (const size_t t)"
.br
.RI "\fIModify the candidate set for the given projection table\&. Careful! \fP"
.ti -1c
.RI "size_t \fBNumProjections\fP () const "
.br
.RI "\fIGet the number of projections\&. \fP"
.ti -1c
.RI "void \fBSearch\fP (const MatType &querySet, const size_t k, arma::Mat< size_t > &neighbors, arma::mat &distances)"
.br
.RI "\fISearch for the k furthest neighbors of the given query set\&. \fP"
.ti -1c
.RI "template<typename Archive > void \fBSerialize\fP (Archive &ar, const unsigned int)"
.br
.RI "\fISerialize the model\&. \fP"
.ti -1c
.RI "void \fBTrain\fP (const MatType &referenceSet, const size_t \fBl\fP=0, const size_t \fBm\fP=0)"
.br
.RI "\fITrain the \fBQDAFN\fP model on the given reference set, optionally setting new parameters for the number of projections/tables (l) and the number of elements stored for each projection/table (m)\&. \fP"
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "std::vector< MatType > \fBcandidateSet\fP"
.br
.ti -1c
.RI "size_t \fBl\fP"
.br
.RI "\fIThe number of projections\&. \fP"
.ti -1c
.RI "arma::mat \fBlines\fP"
.br
.RI "\fIThe random lines we are projecting onto\&. Has l columns\&. \fP"
.ti -1c
.RI "size_t \fBm\fP"
.br
.RI "\fIThe number of elements to store for each projection\&. \fP"
.ti -1c
.RI "arma::mat \fBprojections\fP"
.br
.RI "\fIProjections of each point onto each random line\&. \fP"
.ti -1c
.RI "arma::Mat< size_t > \fBsIndices\fP"
.br
.RI "\fIIndices of the points for each S\&. \fP"
.ti -1c
.RI "arma::mat \fBsValues\fP"
.br
.RI "\fIValues of a_i * x for each point in S\&. \fP"
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<typename MatType = arma::mat>
.br
class mlpack::neighbor::QDAFN< MatType >"

.PP
Definition at line 34 of file qdafn\&.hpp\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "template<typename MatType = arma::mat> \fBmlpack::neighbor::QDAFN\fP< MatType >::\fBQDAFN\fP (const size_t l, const size_t m)"

.PP
Construct the \fBQDAFN\fP object but do not train it\&. Be sure to call \fBTrain()\fP before calling \fBSearch()\fP\&.
.PP
\fBParameters:\fP
.RS 4
\fIl\fP Number of projections\&. 
.br
\fIm\fP Number of elements to store for each projection\&. 
.RE
.PP

.SS "template<typename MatType = arma::mat> \fBmlpack::neighbor::QDAFN\fP< MatType >::\fBQDAFN\fP (const MatType & referenceSet, const size_t l, const size_t m)"

.PP
Construct the \fBQDAFN\fP object with the given reference set (this is the set that will be searched)\&. 
.PP
\fBParameters:\fP
.RS 4
\fIreferenceSet\fP Set of reference data\&. 
.br
\fIl\fP Number of projections\&. 
.br
\fIm\fP Number of elements to store for each projection\&. 
.RE
.PP

.SH "Member Function Documentation"
.PP 
.SS "template<typename MatType = arma::mat> const MatType& \fBmlpack::neighbor::QDAFN\fP< MatType >::CandidateSet (const size_t t) const\fC [inline]\fP"

.PP
Get the candidate set for the given projection table\&. 
.PP
Definition at line 90 of file qdafn\&.hpp\&.
.PP
References mlpack::neighbor::QDAFN< MatType >::candidateSet\&.
.SS "template<typename MatType = arma::mat> MatType& \fBmlpack::neighbor::QDAFN\fP< MatType >::CandidateSet (const size_t t)\fC [inline]\fP"

.PP
Modify the candidate set for the given projection table\&. Careful! 
.PP
Definition at line 92 of file qdafn\&.hpp\&.
.PP
References mlpack::neighbor::QDAFN< MatType >::candidateSet\&.
.SS "template<typename MatType = arma::mat> size_t \fBmlpack::neighbor::QDAFN\fP< MatType >::NumProjections () const\fC [inline]\fP"

.PP
Get the number of projections\&. 
.PP
Definition at line 87 of file qdafn\&.hpp\&.
.PP
References mlpack::neighbor::QDAFN< MatType >::candidateSet\&.
.SS "template<typename MatType = arma::mat> void \fBmlpack::neighbor::QDAFN\fP< MatType >::Search (const MatType & querySet, const size_t k, arma::Mat< size_t > & neighbors, arma::mat & distances)"

.PP
Search for the k furthest neighbors of the given query set\&. (The query set can contain just one point, that is okay\&.) The results will be stored in the given neighbors and distances matrices, in the same format as the mlpack \fBNeighborSearch\fP and \fBLSHSearch\fP classes\&. 
.SS "template<typename MatType = arma::mat> template<typename Archive > void \fBmlpack::neighbor::QDAFN\fP< MatType >::Serialize (Archive & ar, const unsigned int)"

.PP
Serialize the model\&. 
.SS "template<typename MatType = arma::mat> void \fBmlpack::neighbor::QDAFN\fP< MatType >::Train (const MatType & referenceSet, const size_t l = \fC0\fP, const size_t m = \fC0\fP)"

.PP
Train the \fBQDAFN\fP model on the given reference set, optionally setting new parameters for the number of projections/tables (l) and the number of elements stored for each projection/table (m)\&. 
.PP
\fBParameters:\fP
.RS 4
\fIreferenceSet\fP Reference set to train on\&. 
.br
\fIl\fP Number of projections\&. 
.br
\fIm\fP Number of elements to store for each projection\&. 
.RE
.PP

.SH "Member Data Documentation"
.PP 
.SS "template<typename MatType = arma::mat> std::vector<MatType> \fBmlpack::neighbor::QDAFN\fP< MatType >::candidateSet\fC [private]\fP"

.PP
Definition at line 110 of file qdafn\&.hpp\&.
.PP
Referenced by mlpack::neighbor::QDAFN< MatType >::CandidateSet(), and mlpack::neighbor::QDAFN< MatType >::NumProjections()\&.
.SS "template<typename MatType = arma::mat> size_t \fBmlpack::neighbor::QDAFN\fP< MatType >::l\fC [private]\fP"

.PP
The number of projections\&. 
.PP
Definition at line 96 of file qdafn\&.hpp\&.
.SS "template<typename MatType = arma::mat> arma::mat \fBmlpack::neighbor::QDAFN\fP< MatType >::lines\fC [private]\fP"

.PP
The random lines we are projecting onto\&. Has l columns\&. 
.PP
Definition at line 100 of file qdafn\&.hpp\&.
.SS "template<typename MatType = arma::mat> size_t \fBmlpack::neighbor::QDAFN\fP< MatType >::m\fC [private]\fP"

.PP
The number of elements to store for each projection\&. 
.PP
Definition at line 98 of file qdafn\&.hpp\&.
.SS "template<typename MatType = arma::mat> arma::mat \fBmlpack::neighbor::QDAFN\fP< MatType >::projections\fC [private]\fP"

.PP
Projections of each point onto each random line\&. 
.PP
Definition at line 102 of file qdafn\&.hpp\&.
.SS "template<typename MatType = arma::mat> arma::Mat<size_t> \fBmlpack::neighbor::QDAFN\fP< MatType >::sIndices\fC [private]\fP"

.PP
Indices of the points for each S\&. 
.PP
Definition at line 105 of file qdafn\&.hpp\&.
.SS "template<typename MatType = arma::mat> arma::mat \fBmlpack::neighbor::QDAFN\fP< MatType >::sValues\fC [private]\fP"

.PP
Values of a_i * x for each point in S\&. 
.PP
Definition at line 107 of file qdafn\&.hpp\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for mlpack from the source code\&.
