.TH "mlpack::tree::RStarTreeSplit" 3 "Sat Mar 25 2017" "Version master" "mlpack" \" -*- nroff -*-
.ad l
.nh
.SH NAME
mlpack::tree::RStarTreeSplit \- A Rectangle Tree has new points inserted at the bottom\&.  

.SH SYNOPSIS
.br
.PP
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "template<typename TreeType > static void \fBSplitLeafNode\fP (TreeType *tree, std::vector< bool > &relevels)"
.br
.RI "\fISplit a leaf node using the algorithm described in "The R*-tree: An Efficient and Robust Access method for Points and Rectangles\&. \fP"
.ti -1c
.RI "template<typename TreeType > static bool \fBSplitNonLeafNode\fP (TreeType *tree, std::vector< bool > &relevels)"
.br
.RI "\fISplit a non-leaf node using the 'default' algorithm\&. \fP"
.in -1c
.SS "Static Private Member Functions"

.in +1c
.ti -1c
.RI "template<typename TreeType > static void \fBInsertNodeIntoTree\fP (TreeType *destTree, TreeType *srcNode)"
.br
.RI "\fIInsert a node into another node\&. \fP"
.ti -1c
.RI "template<typename ElemType > static bool \fBPairComp\fP (const std::pair< ElemType, size_t > &p1, const std::pair< ElemType, size_t > &p2)"
.br
.RI "\fIComparator for sorting with std::pair\&. \fP"
.in -1c
.SH "Detailed Description"
.PP 
A Rectangle Tree has new points inserted at the bottom\&. 

When these nodes overflow, we split them, moving up the tree and splitting nodes as necessary\&. 
.PP
Definition at line 26 of file r_star_tree_split\&.hpp\&.
.SH "Member Function Documentation"
.PP 
.SS "template<typename TreeType > static void mlpack::tree::RStarTreeSplit::InsertNodeIntoTree (TreeType * destTree, TreeType * srcNode)\fC [static]\fP, \fC [private]\fP"

.PP
Insert a node into another node\&. 
.SS "template<typename ElemType > static bool mlpack::tree::RStarTreeSplit::PairComp (const std::pair< ElemType, size_t > & p1, const std::pair< ElemType, size_t > & p2)\fC [inline]\fP, \fC [static]\fP, \fC [private]\fP"

.PP
Comparator for sorting with std::pair\&. This comparator works a little bit faster then the default comparator\&. 
.PP
Definition at line 56 of file r_star_tree_split\&.hpp\&.
.SS "template<typename TreeType > static void mlpack::tree::RStarTreeSplit::SplitLeafNode (TreeType * tree, std::vector< bool > & relevels)\fC [static]\fP"

.PP
Split a leaf node using the algorithm described in "The R*-tree: An Efficient and Robust Access method for Points and Rectangles\&. " If necessary, this split will propagate upwards through the tree\&. 
.SS "template<typename TreeType > static bool mlpack::tree::RStarTreeSplit::SplitNonLeafNode (TreeType * tree, std::vector< bool > & relevels)\fC [static]\fP"

.PP
Split a non-leaf node using the 'default' algorithm\&. If this is a root node, the tree increases in depth\&. 

.SH "Author"
.PP 
Generated automatically by Doxygen for mlpack from the source code\&.
