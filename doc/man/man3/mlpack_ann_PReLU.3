.TH "mlpack::ann::PReLU< InputDataType, OutputDataType >" 3 "Sat Mar 25 2017" "Version master" "mlpack" \" -*- nroff -*-
.ad l
.nh
.SH NAME
mlpack::ann::PReLU< InputDataType, OutputDataType > \- The \fBPReLU\fP activation function, defined by (where alpha is trainable)  

.SH SYNOPSIS
.br
.PP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBPReLU\fP (const double \fBuser_alpha\fP=0\&.03)"
.br
.RI "\fICreate the \fBPReLU\fP object using the specified parameters\&. \fP"
.ti -1c
.RI "double const & \fBAlpha\fP () const "
.br
.RI "\fIGet the non zero gradient\&. \fP"
.ti -1c
.RI "double & \fBAlpha\fP ()"
.br
.RI "\fIModify the non zero gradient\&. \fP"
.ti -1c
.RI "template<typename DataType > void \fBBackward\fP (const DataType &&input, DataType &&gy, DataType &&g)"
.br
.RI "\fIOrdinary feed backward pass of a neural network, calculating the function f(x) by propagating x backwards through f\&. \fP"
.ti -1c
.RI "OutputDataType const & \fBDelta\fP () const "
.br
.RI "\fIGet the delta\&. \fP"
.ti -1c
.RI "OutputDataType & \fBDelta\fP ()"
.br
.RI "\fIModify the delta\&. \fP"
.ti -1c
.RI "template<typename InputType , typename OutputType > void \fBForward\fP (const InputType &&input, OutputType &&output)"
.br
.RI "\fIOrdinary feed forward pass of a neural network, evaluating the function f(x) by propagating the activity forward through f\&. \fP"
.ti -1c
.RI "template<typename eT > void \fBGradient\fP (const arma::Mat< eT > &&input, arma::Mat< eT > &&error, arma::Mat< eT > &&\fBgradient\fP)"
.br
.RI "\fICalculate the gradient using the output delta and the input activation\&. \fP"
.ti -1c
.RI "OutputDataType const & \fBGradient\fP () const "
.br
.RI "\fIGet the gradient\&. \fP"
.ti -1c
.RI "OutputDataType & \fBGradient\fP ()"
.br
.RI "\fIModify the gradient\&. \fP"
.ti -1c
.RI "InputDataType const & \fBInputParameter\fP () const "
.br
.RI "\fIGet the input parameter\&. \fP"
.ti -1c
.RI "InputDataType & \fBInputParameter\fP ()"
.br
.RI "\fIModify the input parameter\&. \fP"
.ti -1c
.RI "OutputDataType const & \fBOutputParameter\fP () const "
.br
.RI "\fIGet the output parameter\&. \fP"
.ti -1c
.RI "OutputDataType & \fBOutputParameter\fP ()"
.br
.RI "\fIModify the output parameter\&. \fP"
.ti -1c
.RI "OutputDataType const & \fBParameters\fP () const "
.br
.RI "\fIGet the parameters\&. \fP"
.ti -1c
.RI "OutputDataType & \fBParameters\fP ()"
.br
.RI "\fIModify the parameters\&. \fP"
.ti -1c
.RI "void \fBReset\fP ()"
.br
.ti -1c
.RI "template<typename Archive > void \fBSerialize\fP (Archive &ar, const unsigned int)"
.br
.RI "\fISerialize the layer\&. \fP"
.in -1c
.SS "Private Member Functions"

.in +1c
.ti -1c
.RI "double \fBDeriv\fP (const double x)"
.br
.RI "\fIComputes the first derivative of the parametric ReLU function\&. \fP"
.ti -1c
.RI "template<typename InputType , typename OutputType > void \fBDeriv\fP (const InputType &x, OutputType &y)"
.br
.RI "\fIComputes the first derivative of the \fBPReLU\fP function\&. \fP"
.ti -1c
.RI "double \fBFn\fP (const double x)"
.br
.RI "\fIComputes the parametric ReLU function\&. \fP"
.ti -1c
.RI "template<typename eT > void \fBFn\fP (const arma::Mat< eT > &x, arma::Mat< eT > &y)"
.br
.RI "\fIComputes the parametric ReLU function using a dense matrix as input\&. \fP"
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "OutputDataType \fBalpha\fP"
.br
.RI "\fILeakyness Parameter object\&. \fP"
.ti -1c
.RI "OutputDataType \fBdelta\fP"
.br
.RI "\fILocally-stored delta object\&. \fP"
.ti -1c
.RI "OutputDataType \fBgradient\fP"
.br
.RI "\fILocally-stored gradient object\&. \fP"
.ti -1c
.RI "InputDataType \fBinputParameter\fP"
.br
.RI "\fILocally-stored input parameter object\&. \fP"
.ti -1c
.RI "OutputDataType \fBoutputParameter\fP"
.br
.RI "\fILocally-stored output parameter object\&. \fP"
.ti -1c
.RI "double \fBuser_alpha\fP"
.br
.RI "\fILeakyness Parameter given by user in the range 0 < alpha < 1\&. \fP"
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<typename InputDataType = arma::mat, typename OutputDataType = arma::mat>
.br
class mlpack::ann::PReLU< InputDataType, OutputDataType >"
The \fBPReLU\fP activation function, defined by (where alpha is trainable) 

\begin{eqnarray*} f(x) &=& \max(x, alpha*x) \\ f'(x) &=& \left\{ \begin{array}{lr} 1 & : x > 0 \\ alpha & : x \le 0 \end{array} \right. \end{eqnarray*}
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIInputDataType\fP Type of the input data (arma::colvec, arma::mat, arma::sp_mat or arma::cube)\&. 
.br
\fIOutputDataType\fP Type of the output data (arma::colvec, arma::mat, arma::sp_mat or arma::cube)\&. 
.RE
.PP

.PP
Definition at line 45 of file parametric_relu\&.hpp\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "template<typename InputDataType  = arma::mat, typename OutputDataType  = arma::mat> \fBmlpack::ann::PReLU\fP< InputDataType, OutputDataType >::\fBPReLU\fP (const double user_alpha = \fC0\&.03\fP)"

.PP
Create the \fBPReLU\fP object using the specified parameters\&. The non zero gradient can be adjusted by specifying tha parameter alpha in the range 0 to 1\&. Default (alpha = 0\&.03)\&. This parameter is trainable\&.
.PP
\fBParameters:\fP
.RS 4
\fIalpha\fP Non zero gradient 
.RE
.PP

.SH "Member Function Documentation"
.PP 
.SS "template<typename InputDataType  = arma::mat, typename OutputDataType  = arma::mat> double const& \fBmlpack::ann::PReLU\fP< InputDataType, OutputDataType >::Alpha () const\fC [inline]\fP"

.PP
Get the non zero gradient\&. 
.PP
Definition at line 123 of file parametric_relu\&.hpp\&.
.PP
References mlpack::ann::PReLU< InputDataType, OutputDataType >::alpha\&.
.SS "template<typename InputDataType  = arma::mat, typename OutputDataType  = arma::mat> double& \fBmlpack::ann::PReLU\fP< InputDataType, OutputDataType >::Alpha ()\fC [inline]\fP"

.PP
Modify the non zero gradient\&. 
.PP
Definition at line 125 of file parametric_relu\&.hpp\&.
.PP
References mlpack::ann::PReLU< InputDataType, OutputDataType >::alpha, and mlpack::ann::PReLU< InputDataType, OutputDataType >::Serialize()\&.
.SS "template<typename InputDataType  = arma::mat, typename OutputDataType  = arma::mat> template<typename DataType > void \fBmlpack::ann::PReLU\fP< InputDataType, OutputDataType >::Backward (const DataType && input, DataType && gy, DataType && g)"

.PP
Ordinary feed backward pass of a neural network, calculating the function f(x) by propagating x backwards through f\&. Using the results from the feed forward pass\&.
.PP
\fBParameters:\fP
.RS 4
\fIinput\fP The propagated input activation\&. 
.br
\fIgy\fP The backpropagated error\&. 
.br
\fIg\fP The calculated gradient\&. 
.RE
.PP

.SS "template<typename InputDataType  = arma::mat, typename OutputDataType  = arma::mat> OutputDataType const& \fBmlpack::ann::PReLU\fP< InputDataType, OutputDataType >::Delta () const\fC [inline]\fP"

.PP
Get the delta\&. 
.PP
Definition at line 113 of file parametric_relu\&.hpp\&.
.PP
References mlpack::ann::PReLU< InputDataType, OutputDataType >::delta\&.
.SS "template<typename InputDataType  = arma::mat, typename OutputDataType  = arma::mat> OutputDataType& \fBmlpack::ann::PReLU\fP< InputDataType, OutputDataType >::Delta ()\fC [inline]\fP"

.PP
Modify the delta\&. 
.PP
Definition at line 115 of file parametric_relu\&.hpp\&.
.PP
References mlpack::ann::PReLU< InputDataType, OutputDataType >::delta\&.
.SS "template<typename InputDataType  = arma::mat, typename OutputDataType  = arma::mat> double \fBmlpack::ann::PReLU\fP< InputDataType, OutputDataType >::Deriv (const double x)\fC [inline]\fP, \fC [private]\fP"

.PP
Computes the first derivative of the parametric ReLU function\&. 
.PP
\fBParameters:\fP
.RS 4
\fIx\fP Input data\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
f'(x) 
.RE
.PP

.PP
Definition at line 165 of file parametric_relu\&.hpp\&.
.PP
References mlpack::ann::PReLU< InputDataType, OutputDataType >::alpha\&.
.PP
Referenced by mlpack::ann::PReLU< InputDataType, OutputDataType >::Deriv()\&.
.SS "template<typename InputDataType  = arma::mat, typename OutputDataType  = arma::mat> template<typename InputType , typename OutputType > void \fBmlpack::ann::PReLU\fP< InputDataType, OutputDataType >::Deriv (const InputType & x, OutputType & y)\fC [inline]\fP, \fC [private]\fP"

.PP
Computes the first derivative of the \fBPReLU\fP function\&. 
.PP
\fBParameters:\fP
.RS 4
\fIy\fP Input activations\&. 
.br
\fIx\fP The resulting derivatives\&. 
.RE
.PP

.PP
Definition at line 178 of file parametric_relu\&.hpp\&.
.PP
References mlpack::ann::PReLU< InputDataType, OutputDataType >::Deriv()\&.
.SS "template<typename InputDataType  = arma::mat, typename OutputDataType  = arma::mat> double \fBmlpack::ann::PReLU\fP< InputDataType, OutputDataType >::Fn (const double x)\fC [inline]\fP, \fC [private]\fP"

.PP
Computes the parametric ReLU function\&. 
.PP
\fBParameters:\fP
.RS 4
\fIx\fP Input data\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
f(x)\&. 
.RE
.PP

.PP
Definition at line 140 of file parametric_relu\&.hpp\&.
.PP
References mlpack::ann::PReLU< InputDataType, OutputDataType >::alpha\&.
.SS "template<typename InputDataType  = arma::mat, typename OutputDataType  = arma::mat> template<typename eT > void \fBmlpack::ann::PReLU\fP< InputDataType, OutputDataType >::Fn (const arma::Mat< eT > & x, arma::Mat< eT > & y)\fC [inline]\fP, \fC [private]\fP"

.PP
Computes the parametric ReLU function using a dense matrix as input\&. 
.PP
\fBParameters:\fP
.RS 4
\fIx\fP Input data\&. 
.br
\fIy\fP The resulting output activation\&. 
.RE
.PP

.PP
Definition at line 152 of file parametric_relu\&.hpp\&.
.PP
References mlpack::ann::PReLU< InputDataType, OutputDataType >::alpha\&.
.SS "template<typename InputDataType  = arma::mat, typename OutputDataType  = arma::mat> template<typename InputType , typename OutputType > void \fBmlpack::ann::PReLU\fP< InputDataType, OutputDataType >::Forward (const InputType && input, OutputType && output)"

.PP
Ordinary feed forward pass of a neural network, evaluating the function f(x) by propagating the activity forward through f\&. 
.PP
\fBParameters:\fP
.RS 4
\fIinput\fP Input data used for evaluating the specified function\&. 
.br
\fIoutput\fP Resulting output activation\&. 
.RE
.PP

.SS "template<typename InputDataType  = arma::mat, typename OutputDataType  = arma::mat> template<typename eT > void \fBmlpack::ann::PReLU\fP< InputDataType, OutputDataType >::Gradient (const arma::Mat< eT > && input, arma::Mat< eT > && error, arma::Mat< eT > && gradient)"

.PP
Calculate the gradient using the output delta and the input activation\&. 
.PP
\fBParameters:\fP
.RS 4
\fIinput\fP The input parameter used for calculating the gradient\&. 
.br
\fIerror\fP The calculated error\&. 
.br
\fIgradient\fP The calculated gradient\&. 
.RE
.PP

.SS "template<typename InputDataType  = arma::mat, typename OutputDataType  = arma::mat> OutputDataType const& \fBmlpack::ann::PReLU\fP< InputDataType, OutputDataType >::Gradient () const\fC [inline]\fP"

.PP
Get the gradient\&. 
.PP
Definition at line 118 of file parametric_relu\&.hpp\&.
.PP
References mlpack::ann::PReLU< InputDataType, OutputDataType >::gradient\&.
.SS "template<typename InputDataType  = arma::mat, typename OutputDataType  = arma::mat> OutputDataType& \fBmlpack::ann::PReLU\fP< InputDataType, OutputDataType >::Gradient ()\fC [inline]\fP"

.PP
Modify the gradient\&. 
.PP
Definition at line 120 of file parametric_relu\&.hpp\&.
.PP
References mlpack::ann::PReLU< InputDataType, OutputDataType >::gradient\&.
.SS "template<typename InputDataType  = arma::mat, typename OutputDataType  = arma::mat> InputDataType const& \fBmlpack::ann::PReLU\fP< InputDataType, OutputDataType >::InputParameter () const\fC [inline]\fP"

.PP
Get the input parameter\&. 
.PP
Definition at line 103 of file parametric_relu\&.hpp\&.
.PP
References mlpack::ann::PReLU< InputDataType, OutputDataType >::inputParameter\&.
.SS "template<typename InputDataType  = arma::mat, typename OutputDataType  = arma::mat> InputDataType& \fBmlpack::ann::PReLU\fP< InputDataType, OutputDataType >::InputParameter ()\fC [inline]\fP"

.PP
Modify the input parameter\&. 
.PP
Definition at line 105 of file parametric_relu\&.hpp\&.
.PP
References mlpack::ann::PReLU< InputDataType, OutputDataType >::inputParameter\&.
.SS "template<typename InputDataType  = arma::mat, typename OutputDataType  = arma::mat> OutputDataType const& \fBmlpack::ann::PReLU\fP< InputDataType, OutputDataType >::OutputParameter () const\fC [inline]\fP"

.PP
Get the output parameter\&. 
.PP
Definition at line 108 of file parametric_relu\&.hpp\&.
.PP
References mlpack::ann::PReLU< InputDataType, OutputDataType >::outputParameter\&.
.SS "template<typename InputDataType  = arma::mat, typename OutputDataType  = arma::mat> OutputDataType& \fBmlpack::ann::PReLU\fP< InputDataType, OutputDataType >::OutputParameter ()\fC [inline]\fP"

.PP
Modify the output parameter\&. 
.PP
Definition at line 110 of file parametric_relu\&.hpp\&.
.PP
References mlpack::ann::PReLU< InputDataType, OutputDataType >::outputParameter\&.
.SS "template<typename InputDataType  = arma::mat, typename OutputDataType  = arma::mat> OutputDataType const& \fBmlpack::ann::PReLU\fP< InputDataType, OutputDataType >::Parameters () const\fC [inline]\fP"

.PP
Get the parameters\&. 
.PP
Definition at line 98 of file parametric_relu\&.hpp\&.
.PP
References mlpack::ann::PReLU< InputDataType, OutputDataType >::alpha\&.
.SS "template<typename InputDataType  = arma::mat, typename OutputDataType  = arma::mat> OutputDataType& \fBmlpack::ann::PReLU\fP< InputDataType, OutputDataType >::Parameters ()\fC [inline]\fP"

.PP
Modify the parameters\&. 
.PP
Definition at line 100 of file parametric_relu\&.hpp\&.
.PP
References mlpack::ann::PReLU< InputDataType, OutputDataType >::alpha\&.
.SS "template<typename InputDataType  = arma::mat, typename OutputDataType  = arma::mat> void \fBmlpack::ann::PReLU\fP< InputDataType, OutputDataType >::Reset ()"

.SS "template<typename InputDataType  = arma::mat, typename OutputDataType  = arma::mat> template<typename Archive > void \fBmlpack::ann::PReLU\fP< InputDataType, OutputDataType >::Serialize (Archive & ar, const unsigned int)"

.PP
Serialize the layer\&. 
.PP
Referenced by mlpack::ann::PReLU< InputDataType, OutputDataType >::Alpha()\&.
.SH "Member Data Documentation"
.PP 
.SS "template<typename InputDataType  = arma::mat, typename OutputDataType  = arma::mat> OutputDataType \fBmlpack::ann::PReLU\fP< InputDataType, OutputDataType >::alpha\fC [private]\fP"

.PP
Leakyness Parameter object\&. 
.PP
Definition at line 198 of file parametric_relu\&.hpp\&.
.PP
Referenced by mlpack::ann::PReLU< InputDataType, OutputDataType >::Alpha(), mlpack::ann::PReLU< InputDataType, OutputDataType >::Deriv(), mlpack::ann::PReLU< InputDataType, OutputDataType >::Fn(), and mlpack::ann::PReLU< InputDataType, OutputDataType >::Parameters()\&.
.SS "template<typename InputDataType  = arma::mat, typename OutputDataType  = arma::mat> OutputDataType \fBmlpack::ann::PReLU\fP< InputDataType, OutputDataType >::delta\fC [private]\fP"

.PP
Locally-stored delta object\&. 
.PP
Definition at line 189 of file parametric_relu\&.hpp\&.
.PP
Referenced by mlpack::ann::PReLU< InputDataType, OutputDataType >::Delta()\&.
.SS "template<typename InputDataType  = arma::mat, typename OutputDataType  = arma::mat> OutputDataType \fBmlpack::ann::PReLU\fP< InputDataType, OutputDataType >::gradient\fC [private]\fP"

.PP
Locally-stored gradient object\&. 
.PP
Definition at line 201 of file parametric_relu\&.hpp\&.
.PP
Referenced by mlpack::ann::PReLU< InputDataType, OutputDataType >::Gradient()\&.
.SS "template<typename InputDataType  = arma::mat, typename OutputDataType  = arma::mat> InputDataType \fBmlpack::ann::PReLU\fP< InputDataType, OutputDataType >::inputParameter\fC [private]\fP"

.PP
Locally-stored input parameter object\&. 
.PP
Definition at line 192 of file parametric_relu\&.hpp\&.
.PP
Referenced by mlpack::ann::PReLU< InputDataType, OutputDataType >::InputParameter()\&.
.SS "template<typename InputDataType  = arma::mat, typename OutputDataType  = arma::mat> OutputDataType \fBmlpack::ann::PReLU\fP< InputDataType, OutputDataType >::outputParameter\fC [private]\fP"

.PP
Locally-stored output parameter object\&. 
.PP
Definition at line 195 of file parametric_relu\&.hpp\&.
.PP
Referenced by mlpack::ann::PReLU< InputDataType, OutputDataType >::OutputParameter()\&.
.SS "template<typename InputDataType  = arma::mat, typename OutputDataType  = arma::mat> double \fBmlpack::ann::PReLU\fP< InputDataType, OutputDataType >::user_alpha\fC [private]\fP"

.PP
Leakyness Parameter given by user in the range 0 < alpha < 1\&. 
.PP
Definition at line 204 of file parametric_relu\&.hpp\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for mlpack from the source code\&.
