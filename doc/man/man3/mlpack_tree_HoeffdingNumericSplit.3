.TH "mlpack::tree::HoeffdingNumericSplit< FitnessFunction, ObservationType >" 3 "Sat Mar 25 2017" "Version master" "mlpack" \" -*- nroff -*-
.ad l
.nh
.SH NAME
mlpack::tree::HoeffdingNumericSplit< FitnessFunction, ObservationType > \- The \fBHoeffdingNumericSplit\fP class implements the numeric feature splitting strategy alluded to by Domingos and Hulten in the following paper:  

.SH SYNOPSIS
.br
.PP
.SS "Public Types"

.in +1c
.ti -1c
.RI "typedef \fBNumericSplitInfo\fP< ObservationType > \fBSplitInfo\fP"
.br
.RI "\fIThe splitting information type required by the \fBHoeffdingNumericSplit\fP\&. \fP"
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBHoeffdingNumericSplit\fP (const size_t numClasses, const size_t \fBbins\fP=10, const size_t \fBobservationsBeforeBinning\fP=100)"
.br
.RI "\fICreate the \fBHoeffdingNumericSplit\fP class, and specify some basic parameters about how the binning should take place\&. \fP"
.ti -1c
.RI "\fBHoeffdingNumericSplit\fP (const size_t numClasses, const \fBHoeffdingNumericSplit\fP &other)"
.br
.RI "\fICreate the \fBHoeffdingNumericSplit\fP class, using the parameters from the given other split object\&. \fP"
.ti -1c
.RI "size_t \fBBins\fP () const "
.br
.RI "\fIReturn the number of bins\&. \fP"
.ti -1c
.RI "void \fBEvaluateFitnessFunction\fP (double &bestFitness, double &secondBestFitness) const "
.br
.RI "\fIEvaluate the fitness function given what has been calculated so far\&. \fP"
.ti -1c
.RI "size_t \fBMajorityClass\fP () const "
.br
.RI "\fIReturn the majority class\&. \fP"
.ti -1c
.RI "double \fBMajorityProbability\fP () const "
.br
.RI "\fIReturn the probability of the majority class\&. \fP"
.ti -1c
.RI "size_t \fBNumChildren\fP () const "
.br
.RI "\fIReturn the number of children if this node splits on this feature\&. \fP"
.ti -1c
.RI "template<typename Archive > void \fBSerialize\fP (Archive &ar, const unsigned int)"
.br
.RI "\fISerialize the object\&. \fP"
.ti -1c
.RI "void \fBSplit\fP (arma::Col< size_t > &childMajorities, \fBSplitInfo\fP &splitInfo) const "
.br
.RI "\fIReturn the majority class of each child to be created, if a split on this dimension was performed\&. \fP"
.ti -1c
.RI "void \fBTrain\fP (ObservationType value, const size_t label)"
.br
.RI "\fITrain the \fBHoeffdingNumericSplit\fP on the given observed value (remember that this object only cares about the information for a single feature, not an entire point)\&. \fP"
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "size_t \fBbins\fP"
.br
.RI "\fIThe number of bins\&. \fP"
.ti -1c
.RI "arma::Col< size_t > \fBlabels\fP"
.br
.RI "\fIThis holds the labels of the points before binning\&. \fP"
.ti -1c
.RI "arma::Col< ObservationType > \fBobservations\fP"
.br
.RI "\fIBefore binning, this holds the points we have seen so far\&. \fP"
.ti -1c
.RI "size_t \fBobservationsBeforeBinning\fP"
.br
.RI "\fIThe number of observations we must see before binning\&. \fP"
.ti -1c
.RI "size_t \fBsamplesSeen\fP"
.br
.RI "\fIThe number of samples we have seen so far\&. \fP"
.ti -1c
.RI "arma::Col< ObservationType > \fBsplitPoints\fP"
.br
.RI "\fIThe split points for the binning (length bins - 1)\&. \fP"
.ti -1c
.RI "arma::Mat< size_t > \fBsufficientStatistics\fP"
.br
.RI "\fIAfter binning, this contains the sufficient statistics\&. \fP"
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<typename FitnessFunction, typename ObservationType = double>
.br
class mlpack::tree::HoeffdingNumericSplit< FitnessFunction, ObservationType >"
The \fBHoeffdingNumericSplit\fP class implements the numeric feature splitting strategy alluded to by Domingos and Hulten in the following paper: 


.PP
.nf
@inproceedings{domingos2000mining,
  title={{Mining High-Speed Data Streams}},
  author={Domingos, P\&. and Hulten, G\&.},
  year={2000},
  booktitle={Proceedings of the Sixth ACM SIGKDD International Conference on
      Knowledge Discovery and Data Mining (KDD '00)},
  pages={71--80}
}

.fi
.PP
.PP
The strategy alluded to is very simple: we discretize the numeric features that we see\&. But in this case, we don't know how many bins we have, which makes things a little difficult\&. This class only makes binary splits, and has a maximum number of bins\&. The binning strategy is simple: the split caches the minimum and maximum value of points seen so far, and when the number of points hits a predefined threshold, the cached minimum-maximum range is equally split into bins, and splitting proceeds in the same way as with the categorical splits\&. This is a simple and stupid strategy, so don't expect it to be the best possible thing you can do\&.
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIFitnessFunction\fP Fitness function to use for calculating gain\&. 
.br
\fIObservationType\fP Type of observations in this dimension\&. 
.RE
.PP

.PP
Definition at line 53 of file hoeffding_numeric_split\&.hpp\&.
.SH "Member Typedef Documentation"
.PP 
.SS "template<typename FitnessFunction , typename ObservationType  = double> typedef \fBNumericSplitInfo\fP<ObservationType> \fBmlpack::tree::HoeffdingNumericSplit\fP< FitnessFunction, ObservationType >::\fBSplitInfo\fP"

.PP
The splitting information type required by the \fBHoeffdingNumericSplit\fP\&. 
.PP
Definition at line 57 of file hoeffding_numeric_split\&.hpp\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "template<typename FitnessFunction , typename ObservationType  = double> \fBmlpack::tree::HoeffdingNumericSplit\fP< FitnessFunction, ObservationType >::\fBHoeffdingNumericSplit\fP (const size_t numClasses, const size_t bins = \fC10\fP, const size_t observationsBeforeBinning = \fC100\fP)"

.PP
Create the \fBHoeffdingNumericSplit\fP class, and specify some basic parameters about how the binning should take place\&. 
.PP
\fBParameters:\fP
.RS 4
\fInumClasses\fP Number of classes\&. 
.br
\fIbins\fP Number of bins\&. 
.br
\fIobservationsBeforeBinning\fP Number of points to see before binning is performed\&. 
.RE
.PP

.SS "template<typename FitnessFunction , typename ObservationType  = double> \fBmlpack::tree::HoeffdingNumericSplit\fP< FitnessFunction, ObservationType >::\fBHoeffdingNumericSplit\fP (const size_t numClasses, const \fBHoeffdingNumericSplit\fP< FitnessFunction, ObservationType > & other)"

.PP
Create the \fBHoeffdingNumericSplit\fP class, using the parameters from the given other split object\&. 
.SH "Member Function Documentation"
.PP 
.SS "template<typename FitnessFunction , typename ObservationType  = double> size_t \fBmlpack::tree::HoeffdingNumericSplit\fP< FitnessFunction, ObservationType >::Bins () const\fC [inline]\fP"

.PP
Return the number of bins\&. 
.PP
Definition at line 120 of file hoeffding_numeric_split\&.hpp\&.
.PP
References mlpack::tree::HoeffdingNumericSplit< FitnessFunction, ObservationType >::bins, and mlpack::tree::HoeffdingNumericSplit< FitnessFunction, ObservationType >::Serialize()\&.
.SS "template<typename FitnessFunction , typename ObservationType  = double> void \fBmlpack::tree::HoeffdingNumericSplit\fP< FitnessFunction, ObservationType >::EvaluateFitnessFunction (double & bestFitness, double & secondBestFitness) const"

.PP
Evaluate the fitness function given what has been calculated so far\&. In this case, if binning has not yet been performed, 0 will be returned (i\&.e\&., no gain)\&. Because this split can only split one possible way, secondBestFitness (the fitness function for the second best possible split) will be set to 0\&.
.PP
\fBParameters:\fP
.RS 4
\fIbestFitness\fP Value of the fitness function for the best possible split\&. 
.br
\fIsecondBestFitness\fP Value of the fitness function for the second best possible split (always 0 for this split)\&. 
.RE
.PP

.SS "template<typename FitnessFunction , typename ObservationType  = double> size_t \fBmlpack::tree::HoeffdingNumericSplit\fP< FitnessFunction, ObservationType >::MajorityClass () const"

.PP
Return the majority class\&. 
.PP
Referenced by mlpack::tree::HoeffdingNumericSplit< FitnessFunction, ObservationType >::NumChildren()\&.
.SS "template<typename FitnessFunction , typename ObservationType  = double> double \fBmlpack::tree::HoeffdingNumericSplit\fP< FitnessFunction, ObservationType >::MajorityProbability () const"

.PP
Return the probability of the majority class\&. 
.PP
Referenced by mlpack::tree::HoeffdingNumericSplit< FitnessFunction, ObservationType >::NumChildren()\&.
.SS "template<typename FitnessFunction , typename ObservationType  = double> size_t \fBmlpack::tree::HoeffdingNumericSplit\fP< FitnessFunction, ObservationType >::NumChildren () const\fC [inline]\fP"

.PP
Return the number of children if this node splits on this feature\&. 
.PP
Definition at line 106 of file hoeffding_numeric_split\&.hpp\&.
.PP
References mlpack::tree::HoeffdingNumericSplit< FitnessFunction, ObservationType >::bins, mlpack::tree::HoeffdingNumericSplit< FitnessFunction, ObservationType >::MajorityClass(), mlpack::tree::HoeffdingNumericSplit< FitnessFunction, ObservationType >::MajorityProbability(), and mlpack::tree::HoeffdingNumericSplit< FitnessFunction, ObservationType >::Split()\&.
.SS "template<typename FitnessFunction , typename ObservationType  = double> template<typename Archive > void \fBmlpack::tree::HoeffdingNumericSplit\fP< FitnessFunction, ObservationType >::Serialize (Archive & ar, const unsigned int)"

.PP
Serialize the object\&. 
.PP
Referenced by mlpack::tree::HoeffdingNumericSplit< FitnessFunction, ObservationType >::Bins()\&.
.SS "template<typename FitnessFunction , typename ObservationType  = double> void \fBmlpack::tree::HoeffdingNumericSplit\fP< FitnessFunction, ObservationType >::Split (arma::Col< size_t > & childMajorities, \fBSplitInfo\fP & splitInfo) const"

.PP
Return the majority class of each child to be created, if a split on this dimension was performed\&. Also create the split object\&. 
.PP
Referenced by mlpack::tree::HoeffdingNumericSplit< FitnessFunction, ObservationType >::NumChildren()\&.
.SS "template<typename FitnessFunction , typename ObservationType  = double> void \fBmlpack::tree::HoeffdingNumericSplit\fP< FitnessFunction, ObservationType >::Train (ObservationType value, const size_t label)"

.PP
Train the \fBHoeffdingNumericSplit\fP on the given observed value (remember that this object only cares about the information for a single feature, not an entire point)\&. 
.PP
\fBParameters:\fP
.RS 4
\fIvalue\fP Value in the dimension that this \fBHoeffdingNumericSplit\fP refers to\&. 
.br
\fIlabel\fP Label of the given point\&. 
.RE
.PP

.SH "Member Data Documentation"
.PP 
.SS "template<typename FitnessFunction , typename ObservationType  = double> size_t \fBmlpack::tree::HoeffdingNumericSplit\fP< FitnessFunction, ObservationType >::bins\fC [private]\fP"

.PP
The number of bins\&. 
.PP
Definition at line 135 of file hoeffding_numeric_split\&.hpp\&.
.PP
Referenced by mlpack::tree::HoeffdingNumericSplit< FitnessFunction, ObservationType >::Bins(), and mlpack::tree::HoeffdingNumericSplit< FitnessFunction, ObservationType >::NumChildren()\&.
.SS "template<typename FitnessFunction , typename ObservationType  = double> arma::Col<size_t> \fBmlpack::tree::HoeffdingNumericSplit\fP< FitnessFunction, ObservationType >::labels\fC [private]\fP"

.PP
This holds the labels of the points before binning\&. 
.PP
Definition at line 130 of file hoeffding_numeric_split\&.hpp\&.
.SS "template<typename FitnessFunction , typename ObservationType  = double> arma::Col<ObservationType> \fBmlpack::tree::HoeffdingNumericSplit\fP< FitnessFunction, ObservationType >::observations\fC [private]\fP"

.PP
Before binning, this holds the points we have seen so far\&. 
.PP
Definition at line 128 of file hoeffding_numeric_split\&.hpp\&.
.SS "template<typename FitnessFunction , typename ObservationType  = double> size_t \fBmlpack::tree::HoeffdingNumericSplit\fP< FitnessFunction, ObservationType >::observationsBeforeBinning\fC [private]\fP"

.PP
The number of observations we must see before binning\&. 
.PP
Definition at line 137 of file hoeffding_numeric_split\&.hpp\&.
.SS "template<typename FitnessFunction , typename ObservationType  = double> size_t \fBmlpack::tree::HoeffdingNumericSplit\fP< FitnessFunction, ObservationType >::samplesSeen\fC [private]\fP"

.PP
The number of samples we have seen so far\&. 
.PP
Definition at line 139 of file hoeffding_numeric_split\&.hpp\&.
.SS "template<typename FitnessFunction , typename ObservationType  = double> arma::Col<ObservationType> \fBmlpack::tree::HoeffdingNumericSplit\fP< FitnessFunction, ObservationType >::splitPoints\fC [private]\fP"

.PP
The split points for the binning (length bins - 1)\&. 
.PP
Definition at line 133 of file hoeffding_numeric_split\&.hpp\&.
.SS "template<typename FitnessFunction , typename ObservationType  = double> arma::Mat<size_t> \fBmlpack::tree::HoeffdingNumericSplit\fP< FitnessFunction, ObservationType >::sufficientStatistics\fC [private]\fP"

.PP
After binning, this contains the sufficient statistics\&. 
.PP
Definition at line 142 of file hoeffding_numeric_split\&.hpp\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for mlpack from the source code\&.
