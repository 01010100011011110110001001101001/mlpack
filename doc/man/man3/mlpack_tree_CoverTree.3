.TH "mlpack::tree::CoverTree< MetricType, StatisticType, MatType, RootPointPolicy >" 3 "Sat Mar 25 2017" "Version master" "mlpack" \" -*- nroff -*-
.ad l
.nh
.SH NAME
mlpack::tree::CoverTree< MetricType, StatisticType, MatType, RootPointPolicy > \- A cover tree is a tree specifically designed to speed up nearest-neighbor computation in high-dimensional spaces\&.  

.SH SYNOPSIS
.br
.PP
.SS "Classes"

.in +1c
.ti -1c
.RI "class \fBDualTreeTraverser\fP"
.br
.RI "\fIA dual-tree cover tree traverser; see dual_tree_traverser\&.hpp\&. \fP"
.ti -1c
.RI "class \fBSingleTreeTraverser\fP"
.br
.RI "\fIA single-tree cover tree traverser; see single_tree_traverser\&.hpp for implementation\&. \fP"
.in -1c
.SS "Public Types"

.in +1c
.ti -1c
.RI "template<typename RuleType > using \fBBreadthFirstDualTreeTraverser\fP = \fBDualTreeTraverser\fP< RuleType >"
.br
.ti -1c
.RI "typedef MatType::elem_type \fBElemType\fP"
.br
.RI "\fIThe type held by the matrix type\&. \fP"
.ti -1c
.RI "typedef MatType \fBMat\fP"
.br
.RI "\fISo that other classes can access the matrix type\&. \fP"
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBCoverTree\fP (const MatType &\fBdataset\fP, const \fBElemType\fP \fBbase\fP=2\&.0, MetricType *\fBmetric\fP=NULL)"
.br
.RI "\fICreate the cover tree with the given dataset and given base\&. \fP"
.ti -1c
.RI "\fBCoverTree\fP (const MatType &\fBdataset\fP, MetricType &\fBmetric\fP, const \fBElemType\fP \fBbase\fP=2\&.0)"
.br
.RI "\fICreate the cover tree with the given dataset and the given instantiated metric\&. \fP"
.ti -1c
.RI "\fBCoverTree\fP (MatType &&\fBdataset\fP, const \fBElemType\fP \fBbase\fP=2\&.0)"
.br
.RI "\fICreate the cover tree with the given dataset, taking ownership of the dataset\&. \fP"
.ti -1c
.RI "\fBCoverTree\fP (MatType &&\fBdataset\fP, MetricType &\fBmetric\fP, const \fBElemType\fP \fBbase\fP=2\&.0)"
.br
.RI "\fICreate the cover tree with the given dataset and the given instantiated metric, taking ownership of the dataset\&. \fP"
.ti -1c
.RI "\fBCoverTree\fP (const MatType &\fBdataset\fP, const \fBElemType\fP \fBbase\fP, const size_t pointIndex, const int \fBscale\fP, \fBCoverTree\fP *\fBparent\fP, const \fBElemType\fP \fBparentDistance\fP, arma::Col< size_t > &indices, arma::vec &distances, size_t nearSetSize, size_t &farSetSize, size_t &usedSetSize, MetricType &\fBmetric\fP=NULL)"
.br
.RI "\fIConstruct a child cover tree node\&. \fP"
.ti -1c
.RI "\fBCoverTree\fP (const MatType &\fBdataset\fP, const \fBElemType\fP \fBbase\fP, const size_t pointIndex, const int \fBscale\fP, \fBCoverTree\fP *\fBparent\fP, const \fBElemType\fP \fBparentDistance\fP, const \fBElemType\fP \fBfurthestDescendantDistance\fP, MetricType *\fBmetric\fP=NULL)"
.br
.RI "\fIManually construct a cover tree node; no tree assembly is done in this constructor, and children must be added manually (use \fBChildren()\fP)\&. \fP"
.ti -1c
.RI "\fBCoverTree\fP (const \fBCoverTree\fP &other)"
.br
.RI "\fICreate a cover tree from another tree\&. \fP"
.ti -1c
.RI "\fBCoverTree\fP (\fBCoverTree\fP &&other)"
.br
.RI "\fIMove constructor for a Cover Tree, possess all the members of the given tree\&. \fP"
.ti -1c
.RI "template<typename Archive > \fBCoverTree\fP (Archive &ar, const typename \fBstd::enable_if_t\fP< Archive::is_loading::value > *=0)"
.br
.RI "\fICreate a cover tree from a \fBboost::serialization\fP archive\&. \fP"
.ti -1c
.RI "\fB~CoverTree\fP ()"
.br
.RI "\fIDelete this cover tree node and its children\&. \fP"
.ti -1c
.RI "\fBElemType\fP \fBBase\fP () const "
.br
.RI "\fIGet the base\&. \fP"
.ti -1c
.RI "\fBElemType\fP & \fBBase\fP ()"
.br
.RI "\fIModify the base; don't do this, you'll break everything\&. \fP"
.ti -1c
.RI "void \fBCenter\fP (arma::vec &center) const "
.br
.RI "\fIGet the center of the node and store it in the given vector\&. \fP"
.ti -1c
.RI "const \fBCoverTree\fP & \fBChild\fP (const size_t index) const "
.br
.RI "\fIGet a particular child node\&. \fP"
.ti -1c
.RI "\fBCoverTree\fP & \fBChild\fP (const size_t index)"
.br
.RI "\fIModify a particular child node\&. \fP"
.ti -1c
.RI "\fBCoverTree\fP *& \fBChildPtr\fP (const size_t index)"
.br
.ti -1c
.RI "const std::vector< \fBCoverTree\fP * > & \fBChildren\fP () const "
.br
.RI "\fIGet the children\&. \fP"
.ti -1c
.RI "std::vector< \fBCoverTree\fP * > & \fBChildren\fP ()"
.br
.RI "\fIModify the children manually (maybe not a great idea)\&. \fP"
.ti -1c
.RI "const MatType & \fBDataset\fP () const "
.br
.RI "\fIGet a reference to the dataset\&. \fP"
.ti -1c
.RI "size_t \fBDescendant\fP (const size_t index) const "
.br
.RI "\fIGet the index of a particular descendant point\&. \fP"
.ti -1c
.RI "size_t \fBDistanceComps\fP () const "
.br
.ti -1c
.RI "size_t & \fBDistanceComps\fP ()"
.br
.ti -1c
.RI "\fBElemType\fP \fBFurthestDescendantDistance\fP () const "
.br
.RI "\fIGet the distance from the center of the node to the furthest descendant\&. \fP"
.ti -1c
.RI "\fBElemType\fP & \fBFurthestDescendantDistance\fP ()"
.br
.RI "\fIModify the distance from the center of the node to the furthest descendant\&. \fP"
.ti -1c
.RI "\fBElemType\fP \fBFurthestPointDistance\fP () const "
.br
.RI "\fIGet the distance to the furthest point\&. This is always 0 for cover trees\&. \fP"
.ti -1c
.RI "template<typename VecType > size_t \fBGetFurthestChild\fP (const VecType &\fBpoint\fP, typename \fBstd::enable_if_t\fP< \fBIsVector\fP< VecType >::value > *=0)"
.br
.RI "\fIReturn the index of the furthest child node to the given query point\&. \fP"
.ti -1c
.RI "size_t \fBGetFurthestChild\fP (const \fBCoverTree\fP &queryNode)"
.br
.RI "\fIReturn the index of the furthest child node to the given query node\&. \fP"
.ti -1c
.RI "template<typename VecType > size_t \fBGetNearestChild\fP (const VecType &\fBpoint\fP, typename \fBstd::enable_if_t\fP< \fBIsVector\fP< VecType >::value > *=0)"
.br
.RI "\fIReturn the index of the nearest child node to the given query point\&. \fP"
.ti -1c
.RI "size_t \fBGetNearestChild\fP (const \fBCoverTree\fP &queryNode)"
.br
.RI "\fIReturn the index of the nearest child node to the given query node\&. \fP"
.ti -1c
.RI "bool \fBIsLeaf\fP () const "
.br
.ti -1c
.RI "\fBElemType\fP \fBMaxDistance\fP (const \fBCoverTree\fP &other) const "
.br
.RI "\fIReturn the maximum distance to another node\&. \fP"
.ti -1c
.RI "\fBElemType\fP \fBMaxDistance\fP (const \fBCoverTree\fP &other, const \fBElemType\fP distance) const "
.br
.RI "\fIReturn the maximum distance to another node given that the point-to-point distance has already been calculated\&. \fP"
.ti -1c
.RI "\fBElemType\fP \fBMaxDistance\fP (const arma::vec &other) const "
.br
.RI "\fIReturn the maximum distance to another point\&. \fP"
.ti -1c
.RI "\fBElemType\fP \fBMaxDistance\fP (const arma::vec &other, const \fBElemType\fP distance) const "
.br
.RI "\fIReturn the maximum distance to another point given that the distance from the center to the point has already been calculated\&. \fP"
.ti -1c
.RI "MetricType & \fBMetric\fP () const "
.br
.RI "\fIGet the instantiated metric\&. \fP"
.ti -1c
.RI "\fBElemType\fP \fBMinDistance\fP (const \fBCoverTree\fP &other) const "
.br
.RI "\fIReturn the minimum distance to another node\&. \fP"
.ti -1c
.RI "\fBElemType\fP \fBMinDistance\fP (const \fBCoverTree\fP &other, const \fBElemType\fP distance) const "
.br
.RI "\fIReturn the minimum distance to another node given that the point-to-point distance has already been calculated\&. \fP"
.ti -1c
.RI "\fBElemType\fP \fBMinDistance\fP (const arma::vec &other) const "
.br
.RI "\fIReturn the minimum distance to another point\&. \fP"
.ti -1c
.RI "\fBElemType\fP \fBMinDistance\fP (const arma::vec &other, const \fBElemType\fP distance) const "
.br
.RI "\fIReturn the minimum distance to another point given that the distance from the center to the point has already been calculated\&. \fP"
.ti -1c
.RI "\fBElemType\fP \fBMinimumBoundDistance\fP () const "
.br
.RI "\fIGet the minimum distance from the center to any bound edge (this is the same as furthestDescendantDistance)\&. \fP"
.ti -1c
.RI "size_t \fBNumChildren\fP () const "
.br
.RI "\fIGet the number of children\&. \fP"
.ti -1c
.RI "size_t \fBNumDescendants\fP () const "
.br
.RI "\fIGet the number of descendant points\&. \fP"
.ti -1c
.RI "size_t \fBNumPoints\fP () const "
.br
.ti -1c
.RI "\fBCoverTree\fP * \fBParent\fP () const "
.br
.RI "\fIGet the parent node\&. \fP"
.ti -1c
.RI "\fBCoverTree\fP *& \fBParent\fP ()"
.br
.RI "\fIModify the parent node\&. \fP"
.ti -1c
.RI "\fBElemType\fP \fBParentDistance\fP () const "
.br
.RI "\fIGet the distance to the parent\&. \fP"
.ti -1c
.RI "\fBElemType\fP & \fBParentDistance\fP ()"
.br
.RI "\fIModify the distance to the parent\&. \fP"
.ti -1c
.RI "size_t \fBPoint\fP () const "
.br
.RI "\fIGet the index of the point which this node represents\&. \fP"
.ti -1c
.RI "size_t \fBPoint\fP (const size_t) const "
.br
.RI "\fIFor compatibility with other trees; the argument is ignored\&. \fP"
.ti -1c
.RI "\fBmath::RangeType\fP< \fBElemType\fP > \fBRangeDistance\fP (const \fBCoverTree\fP &other) const "
.br
.RI "\fIReturn the minimum and maximum distance to another node\&. \fP"
.ti -1c
.RI "\fBmath::RangeType\fP< \fBElemType\fP > \fBRangeDistance\fP (const \fBCoverTree\fP &other, const \fBElemType\fP distance) const "
.br
.RI "\fIReturn the minimum and maximum distance to another node given that the point-to-point distance has already been calculated\&. \fP"
.ti -1c
.RI "\fBmath::RangeType\fP< \fBElemType\fP > \fBRangeDistance\fP (const arma::vec &other) const "
.br
.RI "\fIReturn the minimum and maximum distance to another point\&. \fP"
.ti -1c
.RI "\fBmath::RangeType\fP< \fBElemType\fP > \fBRangeDistance\fP (const arma::vec &other, const \fBElemType\fP distance) const "
.br
.RI "\fIReturn the minimum and maximum distance to another point given that the point-to-point distance has already been calculated\&. \fP"
.ti -1c
.RI "int \fBScale\fP () const "
.br
.RI "\fIGet the scale of this node\&. \fP"
.ti -1c
.RI "int & \fBScale\fP ()"
.br
.RI "\fIModify the scale of this node\&. Be careful\&.\&.\&. \fP"
.ti -1c
.RI "template<typename Archive > void \fBSerialize\fP (Archive &ar, const unsigned int)"
.br
.RI "\fISerialize the tree\&. \fP"
.ti -1c
.RI "const StatisticType & \fBStat\fP () const "
.br
.RI "\fIGet the statistic for this node\&. \fP"
.ti -1c
.RI "StatisticType & \fBStat\fP ()"
.br
.RI "\fIModify the statistic for this node\&. \fP"
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "\fBCoverTree\fP ()"
.br
.RI "\fIA default constructor\&. \fP"
.in -1c
.SS "Private Member Functions"

.in +1c
.ti -1c
.RI "void \fBComputeDistances\fP (const size_t pointIndex, const arma::Col< size_t > &indices, arma::vec &distances, const size_t pointSetSize)"
.br
.RI "\fIFill the vector of distances with the distances between the point specified by pointIndex and each point in the indices array\&. \fP"
.ti -1c
.RI "void \fBCreateChildren\fP (arma::Col< size_t > &indices, arma::vec &distances, size_t nearSetSize, size_t &farSetSize, size_t &usedSetSize)"
.br
.RI "\fICreate the children for this node\&. \fP"
.ti -1c
.RI "void \fBMoveToUsedSet\fP (arma::Col< size_t > &indices, arma::vec &distances, size_t &nearSetSize, size_t &farSetSize, size_t &usedSetSize, arma::Col< size_t > &childIndices, const size_t childFarSetSize, const size_t childUsedSetSize)"
.br
.ti -1c
.RI "size_t \fBPruneFarSet\fP (arma::Col< size_t > &indices, arma::vec &distances, const \fBElemType\fP bound, const size_t nearSetSize, const size_t pointSetSize)"
.br
.ti -1c
.RI "void \fBRemoveNewImplicitNodes\fP ()"
.br
.RI "\fITake a look at the last child (the most recently created one) and remove any implicit nodes that have been created\&. \fP"
.ti -1c
.RI "size_t \fBSortPointSet\fP (arma::Col< size_t > &indices, arma::vec &distances, const size_t childFarSetSize, const size_t childUsedSetSize, const size_t farSetSize)"
.br
.RI "\fIAssuming that the list of indices and distances is sorted as [ childFarSet | childUsedSet | farSet | usedSet ], resort the sets so the organization is [ childFarSet | farSet | childUsedSet | usedSet ]\&. \fP"
.ti -1c
.RI "size_t \fBSplitNearFar\fP (arma::Col< size_t > &indices, arma::vec &distances, const \fBElemType\fP bound, const size_t pointSetSize)"
.br
.RI "\fISplit the given indices and distances into a near and a far set, returning the number of points in the near set\&. \fP"
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "\fBElemType\fP \fBbase\fP"
.br
.RI "\fIThe base used to construct the tree\&. \fP"
.ti -1c
.RI "std::vector< \fBCoverTree\fP * > \fBchildren\fP"
.br
.RI "\fIThe list of children; the first is the self-child\&. \fP"
.ti -1c
.RI "const MatType * \fBdataset\fP"
.br
.RI "\fIReference to the matrix which this tree is built on\&. \fP"
.ti -1c
.RI "size_t \fBdistanceComps\fP"
.br
.ti -1c
.RI "\fBElemType\fP \fBfurthestDescendantDistance\fP"
.br
.RI "\fIDistance to the furthest descendant\&. \fP"
.ti -1c
.RI "bool \fBlocalDataset\fP"
.br
.RI "\fIIf true, we own the dataset and need to destroy it in the destructor\&. \fP"
.ti -1c
.RI "bool \fBlocalMetric\fP"
.br
.RI "\fIWhether or not we need to destroy the metric in the destructor\&. \fP"
.ti -1c
.RI "MetricType * \fBmetric\fP"
.br
.RI "\fIThe metric used for this tree\&. \fP"
.ti -1c
.RI "size_t \fBnumDescendants\fP"
.br
.RI "\fIThe number of descendant points\&. \fP"
.ti -1c
.RI "\fBCoverTree\fP * \fBparent\fP"
.br
.RI "\fIThe parent node (NULL if this is the root of the tree)\&. \fP"
.ti -1c
.RI "\fBElemType\fP \fBparentDistance\fP"
.br
.RI "\fIDistance to the parent\&. \fP"
.ti -1c
.RI "size_t \fBpoint\fP"
.br
.RI "\fIIndex of the point in the matrix which this node represents\&. \fP"
.ti -1c
.RI "int \fBscale\fP"
.br
.RI "\fIScale level of the node\&. \fP"
.ti -1c
.RI "StatisticType \fBstat\fP"
.br
.RI "\fIThe instantiated statistic\&. \fP"
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<typename MetricType = metric::LMetric<2, true>, typename StatisticType = EmptyStatistic, typename MatType = arma::mat, typename RootPointPolicy = FirstPointIsRoot>
.br
class mlpack::tree::CoverTree< MetricType, StatisticType, MatType, RootPointPolicy >"
A cover tree is a tree specifically designed to speed up nearest-neighbor computation in high-dimensional spaces\&. 

Each non-leaf node references a point and has a nonzero number of children, including a 'self-child' which references the same point\&. A leaf node represents only one point\&.
.PP
The tree can be thought of as a hierarchy with the root node at the top level and the leaf nodes at the bottom level\&. Each level in the tree has an assigned 'scale' i\&. The tree follows these two invariants:
.PP
.IP "\(bu" 2
nesting: the level C_i is a subset of the level C_{i - 1}\&.
.IP "\(bu" 2
covering: all node in level C_{i - 1} have at least one node in the level C_i with distance less than or equal to b^i (exactly one of these is a parent of the point in level C_{i - 1}\&.
.PP
.PP
Note that in the cover tree paper, there is a third invariant (the 'separation invariant'), but that does not apply to our implementation, because we have relaxed the invariant\&.
.PP
The value 'b' refers to the base, which is a parameter of the tree\&. These three properties make the cover tree very good for fast, high-dimensional nearest-neighbor search\&.
.PP
The theoretical structure of the tree contains many 'implicit' nodes which only have a 'self-child' (a child referencing the same point, but at a lower scale level)\&. This practical implementation only constructs explicit nodes -- non-leaf nodes with more than one child\&. A leaf node has no children, and its scale level is INT_MIN\&.
.PP
For more information on cover trees, see
.PP
.PP
.nf
@inproceedings{
  author = {Beygelzimer, Alina and Kakade, Sham and Langford, John},
  title = {Cover trees for nearest neighbor},
  booktitle = {Proceedings of the 23rd International Conference on Machine
    Learning},
  series = {ICML '06},
  year = {2006},
  pages = {97--104]
}
.fi
.PP
.PP
For information on runtime bounds of the nearest-neighbor computation using cover trees, see the following paper, presented at NIPS 2009:
.PP
.PP
.nf
@inproceedings{
  author = {Ram, P\&., and Lee, D\&., and March, W\&.B\&., and Gray, A\&.G\&.},
  title = {Linear-time Algorithms for Pairwise Statistical Problems},
  booktitle = {Advances in Neural Information Processing Systems 22},
  editor = {Y\&. Bengio and D\&. Schuurmans and J\&. Lafferty and C\&.K\&.I\&. Williams
    and A\&. Culotta},
  pages = {1527--1535},
  year = {2009}
}
.fi
.PP
.PP
The \fBCoverTree\fP class offers three template parameters; a custom metric type can be used with MetricType (this class defaults to the L2-squared metric)\&. The root node's point can be chosen with the RootPointPolicy; by default, the \fBFirstPointIsRoot\fP policy is used, meaning the first point in the dataset is used\&. The StatisticType policy allows you to define statistics which can be gathered during the creation of the tree\&.
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIMetricType\fP Metric type to use during tree construction\&. 
.br
\fIRootPointPolicy\fP Determines which point to use as the root node\&. 
.br
\fIStatisticType\fP Statistic to be used during tree creation\&. 
.br
\fIMatType\fP Type of matrix to build the tree on (generally mat or sp_mat)\&. 
.RE
.PP

.PP
Definition at line 99 of file cover_tree\&.hpp\&.
.SH "Member Typedef Documentation"
.PP 
.SS "template<typename MetricType  = metric::LMetric<2, true>, typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat, typename RootPointPolicy  = FirstPointIsRoot> template<typename RuleType > using \fBmlpack::tree::CoverTree\fP< MetricType, StatisticType, MatType, RootPointPolicy >::\fBBreadthFirstDualTreeTraverser\fP =  \fBDualTreeTraverser\fP<RuleType>"

.PP
Definition at line 264 of file cover_tree\&.hpp\&.
.SS "template<typename MetricType  = metric::LMetric<2, true>, typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat, typename RootPointPolicy  = FirstPointIsRoot> typedef MatType::elem_type \fBmlpack::tree::CoverTree\fP< MetricType, StatisticType, MatType, RootPointPolicy >::\fBElemType\fP"

.PP
The type held by the matrix type\&. 
.PP
Definition at line 105 of file cover_tree\&.hpp\&.
.SS "template<typename MetricType  = metric::LMetric<2, true>, typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat, typename RootPointPolicy  = FirstPointIsRoot> typedef MatType \fBmlpack::tree::CoverTree\fP< MetricType, StatisticType, MatType, RootPointPolicy >::\fBMat\fP"

.PP
So that other classes can access the matrix type\&. 
.PP
Definition at line 103 of file cover_tree\&.hpp\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "template<typename MetricType  = metric::LMetric<2, true>, typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat, typename RootPointPolicy  = FirstPointIsRoot> \fBmlpack::tree::CoverTree\fP< MetricType, StatisticType, MatType, RootPointPolicy >::\fBCoverTree\fP (const MatType & dataset, const \fBElemType\fP base = \fC2\&.0\fP, MetricType * metric = \fCNULL\fP)"

.PP
Create the cover tree with the given dataset and given base\&. The dataset will not be modified during the building procedure (unlike \fBBinarySpaceTree\fP)\&.
.PP
The last argument will be removed in mlpack 1\&.1\&.0 (see #274 and #273)\&.
.PP
\fBParameters:\fP
.RS 4
\fIdataset\fP Reference to the dataset to build a tree on\&. 
.br
\fIbase\fP Base to use during tree building (default 2\&.0)\&. 
.RE
.PP

.SS "template<typename MetricType  = metric::LMetric<2, true>, typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat, typename RootPointPolicy  = FirstPointIsRoot> \fBmlpack::tree::CoverTree\fP< MetricType, StatisticType, MatType, RootPointPolicy >::\fBCoverTree\fP (const MatType & dataset, MetricType & metric, const \fBElemType\fP base = \fC2\&.0\fP)"

.PP
Create the cover tree with the given dataset and the given instantiated metric\&. Optionally, set the base\&. The dataset will not be modified during the building procedure (unlike \fBBinarySpaceTree\fP)\&.
.PP
\fBParameters:\fP
.RS 4
\fIdataset\fP Reference to the dataset to build a tree on\&. 
.br
\fImetric\fP Instantiated metric to use during tree building\&. 
.br
\fIbase\fP Base to use during tree building (default 2\&.0)\&. 
.RE
.PP

.SS "template<typename MetricType  = metric::LMetric<2, true>, typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat, typename RootPointPolicy  = FirstPointIsRoot> \fBmlpack::tree::CoverTree\fP< MetricType, StatisticType, MatType, RootPointPolicy >::\fBCoverTree\fP (MatType && dataset, const \fBElemType\fP base = \fC2\&.0\fP)"

.PP
Create the cover tree with the given dataset, taking ownership of the dataset\&. Optionally, set the base\&.
.PP
\fBParameters:\fP
.RS 4
\fIdataset\fP Reference to the dataset to build a tree on\&. 
.br
\fIbase\fP Base to use during tree building (default 2\&.0)\&. 
.RE
.PP

.SS "template<typename MetricType  = metric::LMetric<2, true>, typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat, typename RootPointPolicy  = FirstPointIsRoot> \fBmlpack::tree::CoverTree\fP< MetricType, StatisticType, MatType, RootPointPolicy >::\fBCoverTree\fP (MatType && dataset, MetricType & metric, const \fBElemType\fP base = \fC2\&.0\fP)"

.PP
Create the cover tree with the given dataset and the given instantiated metric, taking ownership of the dataset\&. Optionally, set the base\&.
.PP
\fBParameters:\fP
.RS 4
\fIdataset\fP Reference to the dataset to build a tree on\&. 
.br
\fImetric\fP Instantiated metric to use during tree building\&. 
.br
\fIbase\fP Base to use during tree building (default 2\&.0)\&. 
.RE
.PP

.SS "template<typename MetricType  = metric::LMetric<2, true>, typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat, typename RootPointPolicy  = FirstPointIsRoot> \fBmlpack::tree::CoverTree\fP< MetricType, StatisticType, MatType, RootPointPolicy >::\fBCoverTree\fP (const MatType & dataset, const \fBElemType\fP base, const size_t pointIndex, const int scale, \fBCoverTree\fP< MetricType, StatisticType, MatType, RootPointPolicy > * parent, const \fBElemType\fP parentDistance, arma::Col< size_t > & indices, arma::vec & distances, size_t nearSetSize, size_t & farSetSize, size_t & usedSetSize, MetricType & metric = \fCNULL\fP)"

.PP
Construct a child cover tree node\&. This constructor is not meant to be used externally, but it could be used to insert another node into a tree\&. This procedure uses only one vector for the near set, the far set, and the used set (this is to prevent unnecessary memory allocation in recursive calls to this constructor)\&. Therefore, the size of the near set, far set, and used set must be passed in\&. The near set will be entirely used up, and some of the far set may be used\&. The value of usedSetSize will be set to the number of points used in the construction of this node, and the value of farSetSize will be modified to reflect the number of points in the far set \fIafter\fP the construction of this node\&.
.PP
If you are calling this manually, be careful that the given scale is as small as possible, or you may be creating an implicit node in your tree\&.
.PP
\fBParameters:\fP
.RS 4
\fIdataset\fP Reference to the dataset to build a tree on\&. 
.br
\fIbase\fP Base to use during tree building\&. 
.br
\fIpointIndex\fP Index of the point this node references\&. 
.br
\fIscale\fP Scale of this level in the tree\&. 
.br
\fIparent\fP Parent of this node (NULL indicates no parent)\&. 
.br
\fIparentDistance\fP Distance to the parent node\&. 
.br
\fIindices\fP Array of indices, ordered [ nearSet | farSet | usedSet ]; will be modified to [ farSet | usedSet ]\&. 
.br
\fIdistances\fP Array of distances, ordered the same way as the indices\&. These represent the distances between the point specified by pointIndex and each point in the indices array\&. 
.br
\fInearSetSize\fP Size of the near set; if 0, this will be a leaf\&. 
.br
\fIfarSetSize\fP Size of the far set; may be modified (if this node uses any points in the far set)\&. 
.br
\fIusedSetSize\fP The number of points used will be added to this number\&. 
.RE
.PP

.SS "template<typename MetricType  = metric::LMetric<2, true>, typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat, typename RootPointPolicy  = FirstPointIsRoot> \fBmlpack::tree::CoverTree\fP< MetricType, StatisticType, MatType, RootPointPolicy >::\fBCoverTree\fP (const MatType & dataset, const \fBElemType\fP base, const size_t pointIndex, const int scale, \fBCoverTree\fP< MetricType, StatisticType, MatType, RootPointPolicy > * parent, const \fBElemType\fP parentDistance, const \fBElemType\fP furthestDescendantDistance, MetricType * metric = \fCNULL\fP)"

.PP
Manually construct a cover tree node; no tree assembly is done in this constructor, and children must be added manually (use \fBChildren()\fP)\&. This constructor is useful when the tree is being 'imported' into the \fBCoverTree\fP class after being created in some other manner\&.
.PP
\fBParameters:\fP
.RS 4
\fIdataset\fP Reference to the dataset this node is a part of\&. 
.br
\fIbase\fP Base that was used for tree building\&. 
.br
\fIpointIndex\fP Index of the point in the dataset which this node refers to\&. 
.br
\fIscale\fP Scale of this node's level in the tree\&. 
.br
\fIparent\fP Parent node (NULL indicates no parent)\&. 
.br
\fIparentDistance\fP Distance to parent node point\&. 
.br
\fIfurthestDescendantDistance\fP Distance to furthest descendant point\&. 
.br
\fImetric\fP Instantiated metric (optional)\&. 
.RE
.PP

.SS "template<typename MetricType  = metric::LMetric<2, true>, typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat, typename RootPointPolicy  = FirstPointIsRoot> \fBmlpack::tree::CoverTree\fP< MetricType, StatisticType, MatType, RootPointPolicy >::\fBCoverTree\fP (const \fBCoverTree\fP< MetricType, StatisticType, MatType, RootPointPolicy > & other)"

.PP
Create a cover tree from another tree\&. Be careful! This may use a lot of memory and take a lot of time\&. This will also make a copy of the dataset\&.
.PP
\fBParameters:\fP
.RS 4
\fIother\fP Cover tree to copy from\&. 
.RE
.PP

.SS "template<typename MetricType  = metric::LMetric<2, true>, typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat, typename RootPointPolicy  = FirstPointIsRoot> \fBmlpack::tree::CoverTree\fP< MetricType, StatisticType, MatType, RootPointPolicy >::\fBCoverTree\fP (\fBCoverTree\fP< MetricType, StatisticType, MatType, RootPointPolicy > && other)"

.PP
Move constructor for a Cover Tree, possess all the members of the given tree\&. 
.PP
\fBParameters:\fP
.RS 4
\fIother\fP Cover Tree to move\&. 
.RE
.PP

.SS "template<typename MetricType  = metric::LMetric<2, true>, typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat, typename RootPointPolicy  = FirstPointIsRoot> template<typename Archive > \fBmlpack::tree::CoverTree\fP< MetricType, StatisticType, MatType, RootPointPolicy >::\fBCoverTree\fP (Archive & ar, const typename \fBstd::enable_if_t\fP< Archive::is_loading::value > * = \fC0\fP)"

.PP
Create a cover tree from a \fBboost::serialization\fP archive\&. 
.SS "template<typename MetricType  = metric::LMetric<2, true>, typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat, typename RootPointPolicy  = FirstPointIsRoot> \fBmlpack::tree::CoverTree\fP< MetricType, StatisticType, MatType, RootPointPolicy >::~\fBCoverTree\fP ()"

.PP
Delete this cover tree node and its children\&. 
.SS "template<typename MetricType  = metric::LMetric<2, true>, typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat, typename RootPointPolicy  = FirstPointIsRoot> \fBmlpack::tree::CoverTree\fP< MetricType, StatisticType, MatType, RootPointPolicy >::\fBCoverTree\fP ()\fC [protected]\fP"

.PP
A default constructor\&. This is meant to only be used with \fBboost::serialization\fP, which is allowed with the friend declaration below\&. This does not return a valid tree! This method must be protected, so that the serialization shim can work with the default constructor\&. 
.SH "Member Function Documentation"
.PP 
.SS "template<typename MetricType  = metric::LMetric<2, true>, typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat, typename RootPointPolicy  = FirstPointIsRoot> \fBElemType\fP \fBmlpack::tree::CoverTree\fP< MetricType, StatisticType, MatType, RootPointPolicy >::Base () const\fC [inline]\fP"

.PP
Get the base\&. 
.PP
Definition at line 304 of file cover_tree\&.hpp\&.
.PP
References mlpack::tree::CoverTree< MetricType, StatisticType, MatType, RootPointPolicy >::base\&.
.SS "template<typename MetricType  = metric::LMetric<2, true>, typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat, typename RootPointPolicy  = FirstPointIsRoot> \fBElemType\fP& \fBmlpack::tree::CoverTree\fP< MetricType, StatisticType, MatType, RootPointPolicy >::Base ()\fC [inline]\fP"

.PP
Modify the base; don't do this, you'll break everything\&. 
.PP
Definition at line 306 of file cover_tree\&.hpp\&.
.PP
References mlpack::tree::CoverTree< MetricType, StatisticType, MatType, RootPointPolicy >::base\&.
.SS "template<typename MetricType  = metric::LMetric<2, true>, typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat, typename RootPointPolicy  = FirstPointIsRoot> void \fBmlpack::tree::CoverTree\fP< MetricType, StatisticType, MatType, RootPointPolicy >::Center (arma::vec & center) const\fC [inline]\fP"

.PP
Get the center of the node and store it in the given vector\&. 
.PP
Definition at line 412 of file cover_tree\&.hpp\&.
.PP
References mlpack::tree::CoverTree< MetricType, StatisticType, MatType, RootPointPolicy >::dataset\&.
.SS "template<typename MetricType  = metric::LMetric<2, true>, typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat, typename RootPointPolicy  = FirstPointIsRoot> const \fBCoverTree\fP& \fBmlpack::tree::CoverTree\fP< MetricType, StatisticType, MatType, RootPointPolicy >::Child (const size_t index) const\fC [inline]\fP"

.PP
Get a particular child node\&. 
.PP
Definition at line 278 of file cover_tree\&.hpp\&.
.PP
References mlpack::tree::CoverTree< MetricType, StatisticType, MatType, RootPointPolicy >::children\&.
.SS "template<typename MetricType  = metric::LMetric<2, true>, typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat, typename RootPointPolicy  = FirstPointIsRoot> \fBCoverTree\fP& \fBmlpack::tree::CoverTree\fP< MetricType, StatisticType, MatType, RootPointPolicy >::Child (const size_t index)\fC [inline]\fP"

.PP
Modify a particular child node\&. 
.PP
Definition at line 280 of file cover_tree\&.hpp\&.
.PP
References mlpack::tree::CoverTree< MetricType, StatisticType, MatType, RootPointPolicy >::children\&.
.SS "template<typename MetricType  = metric::LMetric<2, true>, typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat, typename RootPointPolicy  = FirstPointIsRoot> \fBCoverTree\fP*& \fBmlpack::tree::CoverTree\fP< MetricType, StatisticType, MatType, RootPointPolicy >::ChildPtr (const size_t index)\fC [inline]\fP"

.PP
Definition at line 282 of file cover_tree\&.hpp\&.
.PP
References mlpack::tree::CoverTree< MetricType, StatisticType, MatType, RootPointPolicy >::children\&.
.SS "template<typename MetricType  = metric::LMetric<2, true>, typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat, typename RootPointPolicy  = FirstPointIsRoot> const std::vector<\fBCoverTree\fP*>& \fBmlpack::tree::CoverTree\fP< MetricType, StatisticType, MatType, RootPointPolicy >::Children () const\fC [inline]\fP"

.PP
Get the children\&. 
.PP
Definition at line 288 of file cover_tree\&.hpp\&.
.PP
References mlpack::tree::CoverTree< MetricType, StatisticType, MatType, RootPointPolicy >::children\&.
.SS "template<typename MetricType  = metric::LMetric<2, true>, typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat, typename RootPointPolicy  = FirstPointIsRoot> std::vector<\fBCoverTree\fP*>& \fBmlpack::tree::CoverTree\fP< MetricType, StatisticType, MatType, RootPointPolicy >::Children ()\fC [inline]\fP"

.PP
Modify the children manually (maybe not a great idea)\&. 
.PP
Definition at line 290 of file cover_tree\&.hpp\&.
.PP
References mlpack::tree::CoverTree< MetricType, StatisticType, MatType, RootPointPolicy >::children, mlpack::tree::CoverTree< MetricType, StatisticType, MatType, RootPointPolicy >::Descendant(), and mlpack::tree::CoverTree< MetricType, StatisticType, MatType, RootPointPolicy >::NumDescendants()\&.
.SS "template<typename MetricType  = metric::LMetric<2, true>, typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat, typename RootPointPolicy  = FirstPointIsRoot> void \fBmlpack::tree::CoverTree\fP< MetricType, StatisticType, MatType, RootPointPolicy >::ComputeDistances (const size_t pointIndex, const arma::Col< size_t > & indices, arma::vec & distances, const size_t pointSetSize)\fC [private]\fP"

.PP
Fill the vector of distances with the distances between the point specified by pointIndex and each point in the indices array\&. The distances of the first pointSetSize points in indices are calculated (so, this does not necessarily need to use all of the points in the arrays)\&.
.PP
\fBParameters:\fP
.RS 4
\fIpointIndex\fP Point to build the distances for\&. 
.br
\fIindices\fP List of indices to compute distances for\&. 
.br
\fIdistances\fP Vector to store calculated distances in\&. 
.br
\fIpointSetSize\fP Number of points in arrays to calculate distances for\&. 
.RE
.PP

.SS "template<typename MetricType  = metric::LMetric<2, true>, typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat, typename RootPointPolicy  = FirstPointIsRoot> void \fBmlpack::tree::CoverTree\fP< MetricType, StatisticType, MatType, RootPointPolicy >::CreateChildren (arma::Col< size_t > & indices, arma::vec & distances, size_t nearSetSize, size_t & farSetSize, size_t & usedSetSize)\fC [private]\fP"

.PP
Create the children for this node\&. 
.SS "template<typename MetricType  = metric::LMetric<2, true>, typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat, typename RootPointPolicy  = FirstPointIsRoot> const MatType& \fBmlpack::tree::CoverTree\fP< MetricType, StatisticType, MatType, RootPointPolicy >::Dataset () const\fC [inline]\fP"

.PP
Get a reference to the dataset\&. 
.PP
Definition at line 267 of file cover_tree\&.hpp\&.
.PP
References mlpack::tree::CoverTree< MetricType, StatisticType, MatType, RootPointPolicy >::dataset\&.
.SS "template<typename MetricType  = metric::LMetric<2, true>, typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat, typename RootPointPolicy  = FirstPointIsRoot> size_t \fBmlpack::tree::CoverTree\fP< MetricType, StatisticType, MatType, RootPointPolicy >::Descendant (const size_t index) const"

.PP
Get the index of a particular descendant point\&. 
.PP
Referenced by mlpack::tree::CoverTree< MetricType, StatisticType, MatType, RootPointPolicy >::Children()\&.
.SS "template<typename MetricType  = metric::LMetric<2, true>, typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat, typename RootPointPolicy  = FirstPointIsRoot> size_t \fBmlpack::tree::CoverTree\fP< MetricType, StatisticType, MatType, RootPointPolicy >::DistanceComps () const\fC [inline]\fP"

.PP
Definition at line 555 of file cover_tree\&.hpp\&.
.PP
References mlpack::tree::CoverTree< MetricType, StatisticType, MatType, RootPointPolicy >::distanceComps\&.
.SS "template<typename MetricType  = metric::LMetric<2, true>, typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat, typename RootPointPolicy  = FirstPointIsRoot> size_t& \fBmlpack::tree::CoverTree\fP< MetricType, StatisticType, MatType, RootPointPolicy >::DistanceComps ()\fC [inline]\fP"

.PP
Definition at line 556 of file cover_tree\&.hpp\&.
.PP
References mlpack::tree::CoverTree< MetricType, StatisticType, MatType, RootPointPolicy >::distanceComps\&.
.SS "template<typename MetricType  = metric::LMetric<2, true>, typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat, typename RootPointPolicy  = FirstPointIsRoot> \fBElemType\fP \fBmlpack::tree::CoverTree\fP< MetricType, StatisticType, MatType, RootPointPolicy >::FurthestDescendantDistance () const\fC [inline]\fP"

.PP
Get the distance from the center of the node to the furthest descendant\&. 
.PP
Definition at line 401 of file cover_tree\&.hpp\&.
.PP
References mlpack::tree::CoverTree< MetricType, StatisticType, MatType, RootPointPolicy >::furthestDescendantDistance\&.
.SS "template<typename MetricType  = metric::LMetric<2, true>, typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat, typename RootPointPolicy  = FirstPointIsRoot> \fBElemType\fP& \fBmlpack::tree::CoverTree\fP< MetricType, StatisticType, MatType, RootPointPolicy >::FurthestDescendantDistance ()\fC [inline]\fP"

.PP
Modify the distance from the center of the node to the furthest descendant\&. 
.PP
Definition at line 405 of file cover_tree\&.hpp\&.
.PP
References mlpack::tree::CoverTree< MetricType, StatisticType, MatType, RootPointPolicy >::furthestDescendantDistance\&.
.SS "template<typename MetricType  = metric::LMetric<2, true>, typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat, typename RootPointPolicy  = FirstPointIsRoot> \fBElemType\fP \fBmlpack::tree::CoverTree\fP< MetricType, StatisticType, MatType, RootPointPolicy >::FurthestPointDistance () const\fC [inline]\fP"

.PP
Get the distance to the furthest point\&. This is always 0 for cover trees\&. 
.PP
Definition at line 398 of file cover_tree\&.hpp\&.
.SS "template<typename MetricType  = metric::LMetric<2, true>, typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat, typename RootPointPolicy  = FirstPointIsRoot> template<typename VecType > size_t \fBmlpack::tree::CoverTree\fP< MetricType, StatisticType, MatType, RootPointPolicy >::GetFurthestChild (const VecType & point, typename \fBstd::enable_if_t\fP< \fBIsVector\fP< VecType >::value > * = \fC0\fP)"

.PP
Return the index of the furthest child node to the given query point\&. If this is a leaf node, it will return \fBNumChildren()\fP (invalid index)\&. 
.PP
Referenced by mlpack::tree::CoverTree< MetricType, StatisticType, MatType, RootPointPolicy >::Stat()\&.
.SS "template<typename MetricType  = metric::LMetric<2, true>, typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat, typename RootPointPolicy  = FirstPointIsRoot> size_t \fBmlpack::tree::CoverTree\fP< MetricType, StatisticType, MatType, RootPointPolicy >::GetFurthestChild (const \fBCoverTree\fP< MetricType, StatisticType, MatType, RootPointPolicy > & queryNode)"

.PP
Return the index of the furthest child node to the given query node\&. If it can't decide, it will return \fBNumChildren()\fP (invalid index)\&. 
.SS "template<typename MetricType  = metric::LMetric<2, true>, typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat, typename RootPointPolicy  = FirstPointIsRoot> template<typename VecType > size_t \fBmlpack::tree::CoverTree\fP< MetricType, StatisticType, MatType, RootPointPolicy >::GetNearestChild (const VecType & point, typename \fBstd::enable_if_t\fP< \fBIsVector\fP< VecType >::value > * = \fC0\fP)"

.PP
Return the index of the nearest child node to the given query point\&. If this is a leaf node, it will return \fBNumChildren()\fP (invalid index)\&. 
.PP
Referenced by mlpack::tree::CoverTree< MetricType, StatisticType, MatType, RootPointPolicy >::Stat()\&.
.SS "template<typename MetricType  = metric::LMetric<2, true>, typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat, typename RootPointPolicy  = FirstPointIsRoot> size_t \fBmlpack::tree::CoverTree\fP< MetricType, StatisticType, MatType, RootPointPolicy >::GetNearestChild (const \fBCoverTree\fP< MetricType, StatisticType, MatType, RootPointPolicy > & queryNode)"

.PP
Return the index of the nearest child node to the given query node\&. If it can't decide, it will return \fBNumChildren()\fP (invalid index)\&. 
.SS "template<typename MetricType  = metric::LMetric<2, true>, typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat, typename RootPointPolicy  = FirstPointIsRoot> bool \fBmlpack::tree::CoverTree\fP< MetricType, StatisticType, MatType, RootPointPolicy >::IsLeaf () const\fC [inline]\fP"

.PP
Definition at line 274 of file cover_tree\&.hpp\&.
.PP
References mlpack::tree::CoverTree< MetricType, StatisticType, MatType, RootPointPolicy >::children\&.
.SS "template<typename MetricType  = metric::LMetric<2, true>, typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat, typename RootPointPolicy  = FirstPointIsRoot> \fBElemType\fP \fBmlpack::tree::CoverTree\fP< MetricType, StatisticType, MatType, RootPointPolicy >::MaxDistance (const \fBCoverTree\fP< MetricType, StatisticType, MatType, RootPointPolicy > & other) const"

.PP
Return the maximum distance to another node\&. 
.PP
Referenced by mlpack::tree::CoverTree< MetricType, StatisticType, MatType, RootPointPolicy >::Stat()\&.
.SS "template<typename MetricType  = metric::LMetric<2, true>, typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat, typename RootPointPolicy  = FirstPointIsRoot> \fBElemType\fP \fBmlpack::tree::CoverTree\fP< MetricType, StatisticType, MatType, RootPointPolicy >::MaxDistance (const \fBCoverTree\fP< MetricType, StatisticType, MatType, RootPointPolicy > & other, const \fBElemType\fP distance) const"

.PP
Return the maximum distance to another node given that the point-to-point distance has already been calculated\&. 
.SS "template<typename MetricType  = metric::LMetric<2, true>, typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat, typename RootPointPolicy  = FirstPointIsRoot> \fBElemType\fP \fBmlpack::tree::CoverTree\fP< MetricType, StatisticType, MatType, RootPointPolicy >::MaxDistance (const arma::vec & other) const"

.PP
Return the maximum distance to another point\&. 
.SS "template<typename MetricType  = metric::LMetric<2, true>, typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat, typename RootPointPolicy  = FirstPointIsRoot> \fBElemType\fP \fBmlpack::tree::CoverTree\fP< MetricType, StatisticType, MatType, RootPointPolicy >::MaxDistance (const arma::vec & other, const \fBElemType\fP distance) const"

.PP
Return the maximum distance to another point given that the distance from the center to the point has already been calculated\&. 
.SS "template<typename MetricType  = metric::LMetric<2, true>, typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat, typename RootPointPolicy  = FirstPointIsRoot> MetricType& \fBmlpack::tree::CoverTree\fP< MetricType, StatisticType, MatType, RootPointPolicy >::Metric () const\fC [inline]\fP"

.PP
Get the instantiated metric\&. 
.PP
Definition at line 418 of file cover_tree\&.hpp\&.
.PP
References mlpack::tree::CoverTree< MetricType, StatisticType, MatType, RootPointPolicy >::metric\&.
.SS "template<typename MetricType  = metric::LMetric<2, true>, typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat, typename RootPointPolicy  = FirstPointIsRoot> \fBElemType\fP \fBmlpack::tree::CoverTree\fP< MetricType, StatisticType, MatType, RootPointPolicy >::MinDistance (const \fBCoverTree\fP< MetricType, StatisticType, MatType, RootPointPolicy > & other) const"

.PP
Return the minimum distance to another node\&. 
.PP
Referenced by mlpack::tree::CoverTree< MetricType, StatisticType, MatType, RootPointPolicy >::Stat()\&.
.SS "template<typename MetricType  = metric::LMetric<2, true>, typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat, typename RootPointPolicy  = FirstPointIsRoot> \fBElemType\fP \fBmlpack::tree::CoverTree\fP< MetricType, StatisticType, MatType, RootPointPolicy >::MinDistance (const \fBCoverTree\fP< MetricType, StatisticType, MatType, RootPointPolicy > & other, const \fBElemType\fP distance) const"

.PP
Return the minimum distance to another node given that the point-to-point distance has already been calculated\&. 
.SS "template<typename MetricType  = metric::LMetric<2, true>, typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat, typename RootPointPolicy  = FirstPointIsRoot> \fBElemType\fP \fBmlpack::tree::CoverTree\fP< MetricType, StatisticType, MatType, RootPointPolicy >::MinDistance (const arma::vec & other) const"

.PP
Return the minimum distance to another point\&. 
.SS "template<typename MetricType  = metric::LMetric<2, true>, typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat, typename RootPointPolicy  = FirstPointIsRoot> \fBElemType\fP \fBmlpack::tree::CoverTree\fP< MetricType, StatisticType, MatType, RootPointPolicy >::MinDistance (const arma::vec & other, const \fBElemType\fP distance) const"

.PP
Return the minimum distance to another point given that the distance from the center to the point has already been calculated\&. 
.SS "template<typename MetricType  = metric::LMetric<2, true>, typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat, typename RootPointPolicy  = FirstPointIsRoot> \fBElemType\fP \fBmlpack::tree::CoverTree\fP< MetricType, StatisticType, MatType, RootPointPolicy >::MinimumBoundDistance () const\fC [inline]\fP"

.PP
Get the minimum distance from the center to any bound edge (this is the same as furthestDescendantDistance)\&. 
.PP
Definition at line 409 of file cover_tree\&.hpp\&.
.PP
References mlpack::tree::CoverTree< MetricType, StatisticType, MatType, RootPointPolicy >::furthestDescendantDistance\&.
.SS "template<typename MetricType  = metric::LMetric<2, true>, typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat, typename RootPointPolicy  = FirstPointIsRoot> void \fBmlpack::tree::CoverTree\fP< MetricType, StatisticType, MatType, RootPointPolicy >::MoveToUsedSet (arma::Col< size_t > & indices, arma::vec & distances, size_t & nearSetSize, size_t & farSetSize, size_t & usedSetSize, arma::Col< size_t > & childIndices, const size_t childFarSetSize, const size_t childUsedSetSize)\fC [private]\fP"

.SS "template<typename MetricType  = metric::LMetric<2, true>, typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat, typename RootPointPolicy  = FirstPointIsRoot> size_t \fBmlpack::tree::CoverTree\fP< MetricType, StatisticType, MatType, RootPointPolicy >::NumChildren () const\fC [inline]\fP"

.PP
Get the number of children\&. 
.PP
Definition at line 285 of file cover_tree\&.hpp\&.
.PP
References mlpack::tree::CoverTree< MetricType, StatisticType, MatType, RootPointPolicy >::children\&.
.SS "template<typename MetricType  = metric::LMetric<2, true>, typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat, typename RootPointPolicy  = FirstPointIsRoot> size_t \fBmlpack::tree::CoverTree\fP< MetricType, StatisticType, MatType, RootPointPolicy >::NumDescendants () const"

.PP
Get the number of descendant points\&. 
.PP
Referenced by mlpack::tree::CoverTree< MetricType, StatisticType, MatType, RootPointPolicy >::Children()\&.
.SS "template<typename MetricType  = metric::LMetric<2, true>, typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat, typename RootPointPolicy  = FirstPointIsRoot> size_t \fBmlpack::tree::CoverTree\fP< MetricType, StatisticType, MatType, RootPointPolicy >::NumPoints () const\fC [inline]\fP"

.PP
Definition at line 275 of file cover_tree\&.hpp\&.
.SS "template<typename MetricType  = metric::LMetric<2, true>, typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat, typename RootPointPolicy  = FirstPointIsRoot> \fBCoverTree\fP* \fBmlpack::tree::CoverTree\fP< MetricType, StatisticType, MatType, RootPointPolicy >::Parent () const\fC [inline]\fP"

.PP
Get the parent node\&. 
.PP
Definition at line 388 of file cover_tree\&.hpp\&.
.PP
References mlpack::tree::CoverTree< MetricType, StatisticType, MatType, RootPointPolicy >::parent\&.
.SS "template<typename MetricType  = metric::LMetric<2, true>, typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat, typename RootPointPolicy  = FirstPointIsRoot> \fBCoverTree\fP*& \fBmlpack::tree::CoverTree\fP< MetricType, StatisticType, MatType, RootPointPolicy >::Parent ()\fC [inline]\fP"

.PP
Modify the parent node\&. 
.PP
Definition at line 390 of file cover_tree\&.hpp\&.
.PP
References mlpack::tree::CoverTree< MetricType, StatisticType, MatType, RootPointPolicy >::parent\&.
.SS "template<typename MetricType  = metric::LMetric<2, true>, typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat, typename RootPointPolicy  = FirstPointIsRoot> \fBElemType\fP \fBmlpack::tree::CoverTree\fP< MetricType, StatisticType, MatType, RootPointPolicy >::ParentDistance () const\fC [inline]\fP"

.PP
Get the distance to the parent\&. 
.PP
Definition at line 393 of file cover_tree\&.hpp\&.
.PP
References mlpack::tree::CoverTree< MetricType, StatisticType, MatType, RootPointPolicy >::parentDistance\&.
.SS "template<typename MetricType  = metric::LMetric<2, true>, typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat, typename RootPointPolicy  = FirstPointIsRoot> \fBElemType\fP& \fBmlpack::tree::CoverTree\fP< MetricType, StatisticType, MatType, RootPointPolicy >::ParentDistance ()\fC [inline]\fP"

.PP
Modify the distance to the parent\&. 
.PP
Definition at line 395 of file cover_tree\&.hpp\&.
.PP
References mlpack::tree::CoverTree< MetricType, StatisticType, MatType, RootPointPolicy >::parentDistance\&.
.SS "template<typename MetricType  = metric::LMetric<2, true>, typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat, typename RootPointPolicy  = FirstPointIsRoot> size_t \fBmlpack::tree::CoverTree\fP< MetricType, StatisticType, MatType, RootPointPolicy >::Point () const\fC [inline]\fP"

.PP
Get the index of the point which this node represents\&. 
.PP
Definition at line 270 of file cover_tree\&.hpp\&.
.PP
References mlpack::tree::CoverTree< MetricType, StatisticType, MatType, RootPointPolicy >::point\&.
.SS "template<typename MetricType  = metric::LMetric<2, true>, typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat, typename RootPointPolicy  = FirstPointIsRoot> size_t \fBmlpack::tree::CoverTree\fP< MetricType, StatisticType, MatType, RootPointPolicy >::Point (const size_t) const\fC [inline]\fP"

.PP
For compatibility with other trees; the argument is ignored\&. 
.PP
Definition at line 272 of file cover_tree\&.hpp\&.
.PP
References mlpack::tree::CoverTree< MetricType, StatisticType, MatType, RootPointPolicy >::point\&.
.SS "template<typename MetricType  = metric::LMetric<2, true>, typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat, typename RootPointPolicy  = FirstPointIsRoot> size_t \fBmlpack::tree::CoverTree\fP< MetricType, StatisticType, MatType, RootPointPolicy >::PruneFarSet (arma::Col< size_t > & indices, arma::vec & distances, const \fBElemType\fP bound, const size_t nearSetSize, const size_t pointSetSize)\fC [private]\fP"

.SS "template<typename MetricType  = metric::LMetric<2, true>, typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat, typename RootPointPolicy  = FirstPointIsRoot> \fBmath::RangeType\fP<\fBElemType\fP> \fBmlpack::tree::CoverTree\fP< MetricType, StatisticType, MatType, RootPointPolicy >::RangeDistance (const \fBCoverTree\fP< MetricType, StatisticType, MatType, RootPointPolicy > & other) const"

.PP
Return the minimum and maximum distance to another node\&. 
.PP
Referenced by mlpack::tree::CoverTree< MetricType, StatisticType, MatType, RootPointPolicy >::Stat()\&.
.SS "template<typename MetricType  = metric::LMetric<2, true>, typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat, typename RootPointPolicy  = FirstPointIsRoot> \fBmath::RangeType\fP<\fBElemType\fP> \fBmlpack::tree::CoverTree\fP< MetricType, StatisticType, MatType, RootPointPolicy >::RangeDistance (const \fBCoverTree\fP< MetricType, StatisticType, MatType, RootPointPolicy > & other, const \fBElemType\fP distance) const"

.PP
Return the minimum and maximum distance to another node given that the point-to-point distance has already been calculated\&. 
.SS "template<typename MetricType  = metric::LMetric<2, true>, typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat, typename RootPointPolicy  = FirstPointIsRoot> \fBmath::RangeType\fP<\fBElemType\fP> \fBmlpack::tree::CoverTree\fP< MetricType, StatisticType, MatType, RootPointPolicy >::RangeDistance (const arma::vec & other) const"

.PP
Return the minimum and maximum distance to another point\&. 
.SS "template<typename MetricType  = metric::LMetric<2, true>, typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat, typename RootPointPolicy  = FirstPointIsRoot> \fBmath::RangeType\fP<\fBElemType\fP> \fBmlpack::tree::CoverTree\fP< MetricType, StatisticType, MatType, RootPointPolicy >::RangeDistance (const arma::vec & other, const \fBElemType\fP distance) const"

.PP
Return the minimum and maximum distance to another point given that the point-to-point distance has already been calculated\&. 
.SS "template<typename MetricType  = metric::LMetric<2, true>, typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat, typename RootPointPolicy  = FirstPointIsRoot> void \fBmlpack::tree::CoverTree\fP< MetricType, StatisticType, MatType, RootPointPolicy >::RemoveNewImplicitNodes ()\fC [private]\fP"

.PP
Take a look at the last child (the most recently created one) and remove any implicit nodes that have been created\&. 
.SS "template<typename MetricType  = metric::LMetric<2, true>, typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat, typename RootPointPolicy  = FirstPointIsRoot> int \fBmlpack::tree::CoverTree\fP< MetricType, StatisticType, MatType, RootPointPolicy >::Scale () const\fC [inline]\fP"

.PP
Get the scale of this node\&. 
.PP
Definition at line 299 of file cover_tree\&.hpp\&.
.PP
References mlpack::tree::CoverTree< MetricType, StatisticType, MatType, RootPointPolicy >::scale\&.
.SS "template<typename MetricType  = metric::LMetric<2, true>, typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat, typename RootPointPolicy  = FirstPointIsRoot> int& \fBmlpack::tree::CoverTree\fP< MetricType, StatisticType, MatType, RootPointPolicy >::Scale ()\fC [inline]\fP"

.PP
Modify the scale of this node\&. Be careful\&.\&.\&. 
.PP
Definition at line 301 of file cover_tree\&.hpp\&.
.PP
References mlpack::tree::CoverTree< MetricType, StatisticType, MatType, RootPointPolicy >::scale\&.
.SS "template<typename MetricType  = metric::LMetric<2, true>, typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat, typename RootPointPolicy  = FirstPointIsRoot> template<typename Archive > void \fBmlpack::tree::CoverTree\fP< MetricType, StatisticType, MatType, RootPointPolicy >::Serialize (Archive & ar, const unsigned int)"

.PP
Serialize the tree\&. 
.SS "template<typename MetricType  = metric::LMetric<2, true>, typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat, typename RootPointPolicy  = FirstPointIsRoot> size_t \fBmlpack::tree::CoverTree\fP< MetricType, StatisticType, MatType, RootPointPolicy >::SortPointSet (arma::Col< size_t > & indices, arma::vec & distances, const size_t childFarSetSize, const size_t childUsedSetSize, const size_t farSetSize)\fC [private]\fP"

.PP
Assuming that the list of indices and distances is sorted as [ childFarSet | childUsedSet | farSet | usedSet ], resort the sets so the organization is [ childFarSet | farSet | childUsedSet | usedSet ]\&. The size_t parameters specify the sizes of each set in the array\&. Only the ordering of the indices and distances arrays will be modified (not their actual contents)\&.
.PP
The size of any of the four sets can be zero and this method will handle that case accordingly\&.
.PP
\fBParameters:\fP
.RS 4
\fIindices\fP List of indices to sort\&. 
.br
\fIdistances\fP List of distances to sort\&. 
.br
\fIchildFarSetSize\fP Number of points in child far set (childFarSet)\&. 
.br
\fIchildUsedSetSize\fP Number of points in child used set (childUsedSet)\&. 
.br
\fIfarSetSize\fP Number of points in far set (farSet)\&. 
.RE
.PP

.SS "template<typename MetricType  = metric::LMetric<2, true>, typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat, typename RootPointPolicy  = FirstPointIsRoot> size_t \fBmlpack::tree::CoverTree\fP< MetricType, StatisticType, MatType, RootPointPolicy >::SplitNearFar (arma::Col< size_t > & indices, arma::vec & distances, const \fBElemType\fP bound, const size_t pointSetSize)\fC [private]\fP"

.PP
Split the given indices and distances into a near and a far set, returning the number of points in the near set\&. The distances must already be initialized\&. This will order the indices and distances such that the points in the near set make up the first part of the array and the far set makes up the rest: [ nearSet | farSet ]\&.
.PP
\fBParameters:\fP
.RS 4
\fIindices\fP List of indices; will be reordered\&. 
.br
\fIdistances\fP List of distances; will be reordered\&. 
.br
\fIbound\fP If the distance is less than or equal to this bound, the point is placed into the near set\&. 
.br
\fIpointSetSize\fP Size of point set (because we may be sorting a smaller list than the indices vector will hold)\&. 
.RE
.PP

.SS "template<typename MetricType  = metric::LMetric<2, true>, typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat, typename RootPointPolicy  = FirstPointIsRoot> const StatisticType& \fBmlpack::tree::CoverTree\fP< MetricType, StatisticType, MatType, RootPointPolicy >::Stat () const\fC [inline]\fP"

.PP
Get the statistic for this node\&. 
.PP
Definition at line 309 of file cover_tree\&.hpp\&.
.PP
References mlpack::tree::CoverTree< MetricType, StatisticType, MatType, RootPointPolicy >::stat\&.
.SS "template<typename MetricType  = metric::LMetric<2, true>, typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat, typename RootPointPolicy  = FirstPointIsRoot> StatisticType& \fBmlpack::tree::CoverTree\fP< MetricType, StatisticType, MatType, RootPointPolicy >::Stat ()\fC [inline]\fP"

.PP
Modify the statistic for this node\&. 
.PP
Definition at line 311 of file cover_tree\&.hpp\&.
.PP
References mlpack::tree::CoverTree< MetricType, StatisticType, MatType, RootPointPolicy >::GetFurthestChild(), mlpack::tree::CoverTree< MetricType, StatisticType, MatType, RootPointPolicy >::GetNearestChild(), mlpack::tree::CoverTree< MetricType, StatisticType, MatType, RootPointPolicy >::MaxDistance(), mlpack::tree::CoverTree< MetricType, StatisticType, MatType, RootPointPolicy >::MinDistance(), mlpack::tree::CoverTree< MetricType, StatisticType, MatType, RootPointPolicy >::point, mlpack::tree::CoverTree< MetricType, StatisticType, MatType, RootPointPolicy >::RangeDistance(), and mlpack::tree::CoverTree< MetricType, StatisticType, MatType, RootPointPolicy >::stat\&.
.SH "Member Data Documentation"
.PP 
.SS "template<typename MetricType  = metric::LMetric<2, true>, typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat, typename RootPointPolicy  = FirstPointIsRoot> \fBElemType\fP \fBmlpack::tree::CoverTree\fP< MetricType, StatisticType, MatType, RootPointPolicy >::base\fC [private]\fP"

.PP
The base used to construct the tree\&. 
.PP
Definition at line 430 of file cover_tree\&.hpp\&.
.PP
Referenced by mlpack::tree::CoverTree< MetricType, StatisticType, MatType, RootPointPolicy >::Base()\&.
.SS "template<typename MetricType  = metric::LMetric<2, true>, typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat, typename RootPointPolicy  = FirstPointIsRoot> std::vector<\fBCoverTree\fP*> \fBmlpack::tree::CoverTree\fP< MetricType, StatisticType, MatType, RootPointPolicy >::children\fC [private]\fP"

.PP
The list of children; the first is the self-child\&. 
.PP
Definition at line 426 of file cover_tree\&.hpp\&.
.PP
Referenced by mlpack::tree::CoverTree< MetricType, StatisticType, MatType, RootPointPolicy >::Child(), mlpack::tree::CoverTree< MetricType, StatisticType, MatType, RootPointPolicy >::ChildPtr(), mlpack::tree::CoverTree< MetricType, StatisticType, MatType, RootPointPolicy >::Children(), mlpack::tree::CoverTree< MetricType, StatisticType, MatType, RootPointPolicy >::IsLeaf(), and mlpack::tree::CoverTree< MetricType, StatisticType, MatType, RootPointPolicy >::NumChildren()\&.
.SS "template<typename MetricType  = metric::LMetric<2, true>, typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat, typename RootPointPolicy  = FirstPointIsRoot> const MatType* \fBmlpack::tree::CoverTree\fP< MetricType, StatisticType, MatType, RootPointPolicy >::dataset\fC [private]\fP"

.PP
Reference to the matrix which this tree is built on\&. 
.PP
Definition at line 422 of file cover_tree\&.hpp\&.
.PP
Referenced by mlpack::tree::CoverTree< MetricType, StatisticType, MatType, RootPointPolicy >::Center(), and mlpack::tree::CoverTree< MetricType, StatisticType, MatType, RootPointPolicy >::Dataset()\&.
.SS "template<typename MetricType  = metric::LMetric<2, true>, typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat, typename RootPointPolicy  = FirstPointIsRoot> size_t \fBmlpack::tree::CoverTree\fP< MetricType, StatisticType, MatType, RootPointPolicy >::distanceComps\fC [private]\fP"

.PP
Definition at line 559 of file cover_tree\&.hpp\&.
.PP
Referenced by mlpack::tree::CoverTree< MetricType, StatisticType, MatType, RootPointPolicy >::DistanceComps()\&.
.SS "template<typename MetricType  = metric::LMetric<2, true>, typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat, typename RootPointPolicy  = FirstPointIsRoot> \fBElemType\fP \fBmlpack::tree::CoverTree\fP< MetricType, StatisticType, MatType, RootPointPolicy >::furthestDescendantDistance\fC [private]\fP"

.PP
Distance to the furthest descendant\&. 
.PP
Definition at line 440 of file cover_tree\&.hpp\&.
.PP
Referenced by mlpack::tree::CoverTree< MetricType, StatisticType, MatType, RootPointPolicy >::FurthestDescendantDistance(), and mlpack::tree::CoverTree< MetricType, StatisticType, MatType, RootPointPolicy >::MinimumBoundDistance()\&.
.SS "template<typename MetricType  = metric::LMetric<2, true>, typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat, typename RootPointPolicy  = FirstPointIsRoot> bool \fBmlpack::tree::CoverTree\fP< MetricType, StatisticType, MatType, RootPointPolicy >::localDataset\fC [private]\fP"

.PP
If true, we own the dataset and need to destroy it in the destructor\&. 
.PP
Definition at line 444 of file cover_tree\&.hpp\&.
.SS "template<typename MetricType  = metric::LMetric<2, true>, typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat, typename RootPointPolicy  = FirstPointIsRoot> bool \fBmlpack::tree::CoverTree\fP< MetricType, StatisticType, MatType, RootPointPolicy >::localMetric\fC [private]\fP"

.PP
Whether or not we need to destroy the metric in the destructor\&. 
.PP
Definition at line 442 of file cover_tree\&.hpp\&.
.SS "template<typename MetricType  = metric::LMetric<2, true>, typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat, typename RootPointPolicy  = FirstPointIsRoot> MetricType* \fBmlpack::tree::CoverTree\fP< MetricType, StatisticType, MatType, RootPointPolicy >::metric\fC [private]\fP"

.PP
The metric used for this tree\&. 
.PP
Definition at line 446 of file cover_tree\&.hpp\&.
.PP
Referenced by mlpack::tree::CoverTree< MetricType, StatisticType, MatType, RootPointPolicy >::Metric()\&.
.SS "template<typename MetricType  = metric::LMetric<2, true>, typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat, typename RootPointPolicy  = FirstPointIsRoot> size_t \fBmlpack::tree::CoverTree\fP< MetricType, StatisticType, MatType, RootPointPolicy >::numDescendants\fC [private]\fP"

.PP
The number of descendant points\&. 
.PP
Definition at line 434 of file cover_tree\&.hpp\&.
.SS "template<typename MetricType  = metric::LMetric<2, true>, typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat, typename RootPointPolicy  = FirstPointIsRoot> \fBCoverTree\fP* \fBmlpack::tree::CoverTree\fP< MetricType, StatisticType, MatType, RootPointPolicy >::parent\fC [private]\fP"

.PP
The parent node (NULL if this is the root of the tree)\&. 
.PP
Definition at line 436 of file cover_tree\&.hpp\&.
.PP
Referenced by mlpack::tree::CoverTree< MetricType, StatisticType, MatType, RootPointPolicy >::Parent()\&.
.SS "template<typename MetricType  = metric::LMetric<2, true>, typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat, typename RootPointPolicy  = FirstPointIsRoot> \fBElemType\fP \fBmlpack::tree::CoverTree\fP< MetricType, StatisticType, MatType, RootPointPolicy >::parentDistance\fC [private]\fP"

.PP
Distance to the parent\&. 
.PP
Definition at line 438 of file cover_tree\&.hpp\&.
.PP
Referenced by mlpack::tree::CoverTree< MetricType, StatisticType, MatType, RootPointPolicy >::ParentDistance()\&.
.SS "template<typename MetricType  = metric::LMetric<2, true>, typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat, typename RootPointPolicy  = FirstPointIsRoot> size_t \fBmlpack::tree::CoverTree\fP< MetricType, StatisticType, MatType, RootPointPolicy >::point\fC [private]\fP"

.PP
Index of the point in the matrix which this node represents\&. 
.PP
Definition at line 424 of file cover_tree\&.hpp\&.
.PP
Referenced by mlpack::tree::CoverTree< MetricType, StatisticType, MatType, RootPointPolicy >::Point(), and mlpack::tree::CoverTree< MetricType, StatisticType, MatType, RootPointPolicy >::Stat()\&.
.SS "template<typename MetricType  = metric::LMetric<2, true>, typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat, typename RootPointPolicy  = FirstPointIsRoot> int \fBmlpack::tree::CoverTree\fP< MetricType, StatisticType, MatType, RootPointPolicy >::scale\fC [private]\fP"

.PP
Scale level of the node\&. 
.PP
Definition at line 428 of file cover_tree\&.hpp\&.
.PP
Referenced by mlpack::tree::CoverTree< MetricType, StatisticType, MatType, RootPointPolicy >::Scale()\&.
.SS "template<typename MetricType  = metric::LMetric<2, true>, typename StatisticType  = EmptyStatistic, typename MatType  = arma::mat, typename RootPointPolicy  = FirstPointIsRoot> StatisticType \fBmlpack::tree::CoverTree\fP< MetricType, StatisticType, MatType, RootPointPolicy >::stat\fC [private]\fP"

.PP
The instantiated statistic\&. 
.PP
Definition at line 432 of file cover_tree\&.hpp\&.
.PP
Referenced by mlpack::tree::CoverTree< MetricType, StatisticType, MatType, RootPointPolicy >::Stat()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for mlpack from the source code\&.
