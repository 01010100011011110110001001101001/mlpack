.TH "mlpack::tree::RPTreeMaxSplit< BoundType, MatType >" 3 "Sat Mar 25 2017" "Version master" "mlpack" \" -*- nroff -*-
.ad l
.nh
.SH NAME
mlpack::tree::RPTreeMaxSplit< BoundType, MatType > \- This class splits a node by a random hyperplane\&.  

.SH SYNOPSIS
.br
.PP
.SS "Classes"

.in +1c
.ti -1c
.RI "struct \fBSplitInfo\fP"
.br
.RI "\fIAn information about the partition\&. \fP"
.in -1c
.SS "Public Types"

.in +1c
.ti -1c
.RI "typedef MatType::elem_type \fBElemType\fP"
.br
.RI "\fIThe element type held by the matrix type\&. \fP"
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "template<typename VecType > static bool \fBAssignToLeftNode\fP (const VecType &point, const \fBSplitInfo\fP &splitInfo)"
.br
.RI "\fIIndicates that a point should be assigned to the left subtree\&. \fP"
.ti -1c
.RI "static size_t \fBPerformSplit\fP (MatType &data, const size_t begin, const size_t count, const \fBSplitInfo\fP &splitInfo)"
.br
.RI "\fIPerform the split process according to the information about the split\&. \fP"
.ti -1c
.RI "static size_t \fBPerformSplit\fP (MatType &data, const size_t begin, const size_t count, const \fBSplitInfo\fP &splitInfo, std::vector< size_t > &oldFromNew)"
.br
.RI "\fIPerform the split process according to the information about the split and return the list of changed indices\&. \fP"
.ti -1c
.RI "static bool \fBSplitNode\fP (const BoundType &, MatType &data, const size_t begin, const size_t count, \fBSplitInfo\fP &splitInfo)"
.br
.RI "\fISplit the node by a random hyperplane\&. \fP"
.in -1c
.SS "Static Private Member Functions"

.in +1c
.ti -1c
.RI "static bool \fBGetSplitVal\fP (const MatType &data, const size_t begin, const size_t count, const arma::Col< \fBElemType\fP > &direction, \fBElemType\fP &splitVal)"
.br
.RI "\fIThis method finds the position of the hyperplane that will split the node\&. \fP"
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<typename BoundType, typename MatType = arma::mat>
.br
class mlpack::tree::RPTreeMaxSplit< BoundType, MatType >"
This class splits a node by a random hyperplane\&. 

In order to choose the hyperplane we need to choose the normal to the hyperplane and the position of the hyperplane i\&.e\&. the scalar product of the normal and a point\&.
.PP
A point will be assigned to the left subtree if the product of this point and the normal is less or equal to the split value (i\&.e\&. the position of the hyperplane)\&. 
.PP
Definition at line 32 of file rp_tree_max_split\&.hpp\&.
.SH "Member Typedef Documentation"
.PP 
.SS "template<typename BoundType , typename MatType  = arma::mat> typedef MatType::elem_type \fBmlpack::tree::RPTreeMaxSplit\fP< BoundType, MatType >::\fBElemType\fP"

.PP
The element type held by the matrix type\&. 
.PP
Definition at line 36 of file rp_tree_max_split\&.hpp\&.
.SH "Member Function Documentation"
.PP 
.SS "template<typename BoundType , typename MatType  = arma::mat> template<typename VecType > static bool \fBmlpack::tree::RPTreeMaxSplit\fP< BoundType, MatType >::AssignToLeftNode (const VecType & point, const \fBSplitInfo\fP & splitInfo)\fC [inline]\fP, \fC [static]\fP"

.PP
Indicates that a point should be assigned to the left subtree\&. 
.PP
\fBParameters:\fP
.RS 4
\fIpoint\fP The point that is being assigned\&. 
.br
\fIsplitInfo\fP An information about the split\&. 
.RE
.PP

.PP
Definition at line 118 of file rp_tree_max_split\&.hpp\&.
.PP
References mlpack::tree::RPTreeMaxSplit< BoundType, MatType >::SplitInfo::direction, mlpack::tree::RPTreeMaxSplit< BoundType, MatType >::GetSplitVal(), and mlpack::tree::RPTreeMaxSplit< BoundType, MatType >::SplitInfo::splitVal\&.
.SS "template<typename BoundType , typename MatType  = arma::mat> static bool \fBmlpack::tree::RPTreeMaxSplit\fP< BoundType, MatType >::GetSplitVal (const MatType & data, const size_t begin, const size_t count, const arma::Col< \fBElemType\fP > & direction, \fBElemType\fP & splitVal)\fC [static]\fP, \fC [private]\fP"

.PP
This method finds the position of the hyperplane that will split the node\&. 
.PP
\fBParameters:\fP
.RS 4
\fIdata\fP The dataset used by the binary space tree\&. 
.br
\fIbegin\fP Index of the starting point in the dataset that belongs to this node\&. 
.br
\fIcount\fP Number of points in this node\&. 
.br
\fIdirection\fP A random vector that is the normal to the hyperplane which will split the node\&. 
.br
\fIsplitVal\fP The value according which the node will be split\&. 
.RE
.PP

.PP
Referenced by mlpack::tree::RPTreeMaxSplit< BoundType, MatType >::AssignToLeftNode()\&.
.SS "template<typename BoundType , typename MatType  = arma::mat> static size_t \fBmlpack::tree::RPTreeMaxSplit\fP< BoundType, MatType >::PerformSplit (MatType & data, const size_t begin, const size_t count, const \fBSplitInfo\fP & splitInfo)\fC [inline]\fP, \fC [static]\fP"

.PP
Perform the split process according to the information about the split\&. This will order the dataset such that points that belong to the left subtree are on the left of the split column, and points from the right subtree are on the right side of the split column\&.
.PP
\fBParameters:\fP
.RS 4
\fIbound\fP The bound used for this node\&. 
.br
\fIdata\fP The dataset used by the binary space tree\&. 
.br
\fIbegin\fP Index of the starting point in the dataset that belongs to this node\&. 
.br
\fIcount\fP Number of points in this node\&. 
.br
\fIsplitInfo\fP The information about the split\&. 
.RE
.PP

.PP
Definition at line 76 of file rp_tree_max_split\&.hpp\&.
.SS "template<typename BoundType , typename MatType  = arma::mat> static size_t \fBmlpack::tree::RPTreeMaxSplit\fP< BoundType, MatType >::PerformSplit (MatType & data, const size_t begin, const size_t count, const \fBSplitInfo\fP & splitInfo, std::vector< size_t > & oldFromNew)\fC [inline]\fP, \fC [static]\fP"

.PP
Perform the split process according to the information about the split and return the list of changed indices\&. This will order the dataset such that points that belong to the left subtree are on the left of the split column, and points from the right subtree are on the right side of the split column\&.
.PP
\fBParameters:\fP
.RS 4
\fIbound\fP The bound used for this node\&. 
.br
\fIdata\fP The dataset used by the binary space tree\&. 
.br
\fIbegin\fP Index of the starting point in the dataset that belongs to this node\&. 
.br
\fIcount\fP Number of points in this node\&. 
.br
\fIsplitInfo\fP The information about the split\&. 
.br
\fIoldFromNew\fP Vector which will be filled with the old positions for each new point\&. 
.RE
.PP

.PP
Definition at line 101 of file rp_tree_max_split\&.hpp\&.
.SS "template<typename BoundType , typename MatType  = arma::mat> static bool \fBmlpack::tree::RPTreeMaxSplit\fP< BoundType, MatType >::SplitNode (const BoundType &, MatType & data, const size_t begin, const size_t count, \fBSplitInfo\fP & splitInfo)\fC [static]\fP"

.PP
Split the node by a random hyperplane\&. 
.PP
\fBParameters:\fP
.RS 4
\fIbound\fP The bound used for this node\&. 
.br
\fIdata\fP The dataset used by the binary space tree\&. 
.br
\fIbegin\fP Index of the starting point in the dataset that belongs to this node\&. 
.br
\fIcount\fP Number of points in this node\&. 
.br
\fIsplitInfo\fP An information about the split\&. This information contains the direction and the value\&. 
.RE
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for mlpack from the source code\&.
