.TH "mlpack::regression::LogisticRegression< MatType >" 3 "Sat Mar 25 2017" "Version master" "mlpack" \" -*- nroff -*-
.ad l
.nh
.SH NAME
mlpack::regression::LogisticRegression< MatType > \- The \fBLogisticRegression\fP class implements an L2-regularized logistic regression model, and supports training with multiple optimizers and classification\&.  

.SH SYNOPSIS
.br
.PP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBLogisticRegression\fP (const MatType &predictors, const arma::Row< size_t > &responses, const double \fBlambda\fP=0)"
.br
.RI "\fIConstruct the \fBLogisticRegression\fP class with the given labeled training data\&. \fP"
.ti -1c
.RI "\fBLogisticRegression\fP (const MatType &predictors, const arma::Row< size_t > &responses, const arma::vec &initialPoint, const double \fBlambda\fP=0)"
.br
.RI "\fIConstruct the \fBLogisticRegression\fP class with the given labeled training data\&. \fP"
.ti -1c
.RI "\fBLogisticRegression\fP (const size_t dimensionality=0, const double \fBlambda\fP=0)"
.br
.RI "\fIConstruct the \fBLogisticRegression\fP class without performing any training\&. \fP"
.ti -1c
.RI "template<template< typename, typename\&.\&.\&. > class OptimizerType, typename\&.\&.\&. OptimizerTypeArgs> \fBLogisticRegression\fP (OptimizerType< \fBLogisticRegressionFunction\fP< MatType >, OptimizerTypeArgs\&.\&.\&. > &optimizer)"
.br
.RI "\fIConstruct the \fBLogisticRegression\fP class with the given labeled training data\&. \fP"
.ti -1c
.RI "template<typename VecType > size_t \fBClassify\fP (const VecType &point, const double decisionBoundary=0\&.5) const "
.br
.RI "\fIClassify the given point\&. \fP"
.ti -1c
.RI "void \fBClassify\fP (const MatType &dataset, arma::Row< size_t > &labels, const double decisionBoundary=0\&.5) const "
.br
.RI "\fIClassify the given points, returning the predicted labels for each point\&. \fP"
.ti -1c
.RI "void \fBClassify\fP (const MatType &dataset, arma::mat &probabilities) const "
.br
.RI "\fIClassify the given points, returning class probabilities for each point\&. \fP"
.ti -1c
.RI "double \fBComputeAccuracy\fP (const MatType &predictors, const arma::Row< size_t > &responses, const double decisionBoundary=0\&.5) const "
.br
.RI "\fICompute the accuracy of the model on the given predictors and responses, optionally using the given decision boundary\&. \fP"
.ti -1c
.RI "double \fBComputeError\fP (const MatType &predictors, const arma::Row< size_t > &responses) const "
.br
.RI "\fICompute the error of the model\&. \fP"
.ti -1c
.RI "const double & \fBLambda\fP () const "
.br
.RI "\fIReturn the lambda value for L2-regularization\&. \fP"
.ti -1c
.RI "double & \fBLambda\fP ()"
.br
.RI "\fIModify the lambda value for L2-regularization\&. \fP"
.ti -1c
.RI "const arma::vec & \fBParameters\fP () const "
.br
.RI "\fIReturn the parameters (the b vector)\&. \fP"
.ti -1c
.RI "arma::vec & \fBParameters\fP ()"
.br
.RI "\fIModify the parameters (the b vector)\&. \fP"
.ti -1c
.RI "\fBmlpack_deprecated\fP void \fBPredict\fP (const MatType &predictors, arma::Row< size_t > &responses, const double decisionBoundary=0\&.5) const "
.br
.RI "\fIPredict the responses to a given set of predictors\&. \fP"
.ti -1c
.RI "template<typename Archive > void \fBSerialize\fP (Archive &ar, const unsigned int)"
.br
.RI "\fISerialize the model\&. \fP"
.ti -1c
.RI "template<template< typename > class OptimizerType = mlpack::optimization::L_BFGS> void \fBTrain\fP (const MatType &predictors, const arma::Row< size_t > &responses)"
.br
.RI "\fITrain the \fBLogisticRegression\fP model on the given input data\&. \fP"
.ti -1c
.RI "template<template< typename, typename\&.\&.\&. > class OptimizerType = mlpack::optimization::L_BFGS, typename\&.\&.\&. OptimizerTypeArgs> void \fBTrain\fP (OptimizerType< \fBLogisticRegressionFunction\fP< MatType >, OptimizerTypeArgs\&.\&.\&. > &optimizer)"
.br
.RI "\fITrain the \fBLogisticRegression\fP model with the given instantiated optimizer\&. \fP"
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "double \fBlambda\fP"
.br
.RI "\fIL2-regularization penalty parameter\&. \fP"
.ti -1c
.RI "arma::vec \fBparameters\fP"
.br
.RI "\fIVector of trained parameters (size: dimensionality plus one)\&. \fP"
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<typename MatType = arma::mat>
.br
class mlpack::regression::LogisticRegression< MatType >"
The \fBLogisticRegression\fP class implements an L2-regularized logistic regression model, and supports training with multiple optimizers and classification\&. 

The class supports different observation types via the MatType template parameter; for instance, logistic regression can be performed on sparse datasets by specifying arma::sp_mat as the MatType parameter\&.
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIMatType\fP Type of data matrix\&. 
.RE
.PP

.PP
Definition at line 35 of file logistic_regression\&.hpp\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "template<typename MatType  = arma::mat> \fBmlpack::regression::LogisticRegression\fP< MatType >::\fBLogisticRegression\fP (const MatType & predictors, const arma::Row< size_t > & responses, const double lambda = \fC0\fP)"

.PP
Construct the \fBLogisticRegression\fP class with the given labeled training data\&. This will train the model\&. Optionally, specify lambda, which is the penalty parameter for L2-regularization\&. If not specified, it is set to 0, which results in standard (unregularized) logistic regression\&.
.PP
It is not possible to set a custom optimizer with this constructor\&. Either use a constructor that does not train and call \fBTrain()\fP with a custom optimizer type, or use the constructor that takes an instantiated optimizer\&. (This unfortunate situation is a language restriction of C++\&.)
.PP
\fBParameters:\fP
.RS 4
\fIpredictors\fP Input training variables\&. 
.br
\fIresponses\fP Outputs resulting from input training variables\&. 
.br
\fIlambda\fP L2-regularization parameter\&. 
.RE
.PP

.SS "template<typename MatType  = arma::mat> \fBmlpack::regression::LogisticRegression\fP< MatType >::\fBLogisticRegression\fP (const MatType & predictors, const arma::Row< size_t > & responses, const arma::vec & initialPoint, const double lambda = \fC0\fP)"

.PP
Construct the \fBLogisticRegression\fP class with the given labeled training data\&. This will train the model\&. Optionally, specify lambda, which is the penalty parameter for L2-regularization\&. If not specified, it is set to 0, which results in standard (unregularized) logistic regression\&.
.PP
It is not possible to set a custom optimizer with this constructor\&. Either use a constructor that does not train and call \fBTrain()\fP with a custom optimizer type, or use the constructor that takes an instantiated optimizer\&. (This unfortunate situation is a language restriction of C++\&.)
.PP
\fBParameters:\fP
.RS 4
\fIpredictors\fP Input training variables\&. 
.br
\fIresponses\fP Outputs results from input training variables\&. 
.br
\fIinitialPoint\fP Initial model to train with\&. 
.br
\fIlambda\fP L2-regularization parameter\&. 
.RE
.PP

.SS "template<typename MatType  = arma::mat> \fBmlpack::regression::LogisticRegression\fP< MatType >::\fBLogisticRegression\fP (const size_t dimensionality = \fC0\fP, const double lambda = \fC0\fP)"

.PP
Construct the \fBLogisticRegression\fP class without performing any training\&. The dimensionality of the data (which will be used to set the size of the parameters vector) must be specified, and all of the parameters in the model will be set to 0\&. Note that the dimensionality may be changed later by directly modifying the parameters vector (using \fBParameters()\fP)\&.
.PP
\fBParameters:\fP
.RS 4
\fIdimensionality\fP Dimensionality of the data\&. 
.br
\fIlambda\fP L2-regularization parameter\&. 
.RE
.PP

.SS "template<typename MatType  = arma::mat> template<template< typename, typename\&.\&.\&. > class OptimizerType, typename\&.\&.\&. OptimizerTypeArgs> \fBmlpack::regression::LogisticRegression\fP< MatType >::\fBLogisticRegression\fP (OptimizerType< \fBLogisticRegressionFunction\fP< MatType >, OptimizerTypeArgs\&.\&.\&. > & optimizer)"

.PP
Construct the \fBLogisticRegression\fP class with the given labeled training data\&. This will train the model\&. This overload takes an already instantiated optimizer (which holds the \fBLogisticRegressionFunction\fP error function, which must also be instantiated), so that the optimizer can be configured before the training is run by this constructor\&. The update policy of the optimizer can be set through the policy argument\&. The predictors and responses and initial point are all taken from the error function contained in the optimizer\&.
.PP
\fBParameters:\fP
.RS 4
\fIoptimizer\fP Instantiated optimizer with instantiated error function\&. 
.RE
.PP

.SH "Member Function Documentation"
.PP 
.SS "template<typename MatType  = arma::mat> template<typename VecType > size_t \fBmlpack::regression::LogisticRegression\fP< MatType >::Classify (const VecType & point, const double decisionBoundary = \fC0\&.5\fP) const"

.PP
Classify the given point\&. The predicted label is returned\&. Optionally, specify the decision boundary; logistic regression returns a value between 0 and 1\&. If the value is greater than the decision boundary, the response is taken to be 1; otherwise, it is 0\&. By default the decision boundary is 0\&.5\&.
.PP
\fBParameters:\fP
.RS 4
\fIpoint\fP Point to classify\&. 
.br
\fIdecisionBoundary\fP Decision boundary (default 0\&.5)\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Predicted label of point\&. 
.RE
.PP

.PP
Referenced by mlpack::regression::LogisticRegression< MatType >::Lambda()\&.
.SS "template<typename MatType  = arma::mat> void \fBmlpack::regression::LogisticRegression\fP< MatType >::Classify (const MatType & dataset, arma::Row< size_t > & labels, const double decisionBoundary = \fC0\&.5\fP) const"

.PP
Classify the given points, returning the predicted labels for each point\&. Optionally, specify the decision boundary; logistic regression returns a value between 0 and 1\&. If the value is greater than the decision boundary, the response is taken to be 1; otherwise, it is 0\&. By default the decision boundary is 0\&.5\&.
.PP
\fBParameters:\fP
.RS 4
\fIdataset\fP Set of points to classify\&. 
.br
\fIlabels\fP Predicted labels for each point\&. 
.br
\fIdecisionBoundary\fP Decision boundary (default 0\&.5)\&. 
.RE
.PP

.SS "template<typename MatType  = arma::mat> void \fBmlpack::regression::LogisticRegression\fP< MatType >::Classify (const MatType & dataset, arma::mat & probabilities) const"

.PP
Classify the given points, returning class probabilities for each point\&. 
.PP
\fBParameters:\fP
.RS 4
\fIdataset\fP Set of points to classify\&. 
.br
\fIprobabilities\fP Class probabilities for each point (output)\&. 
.RE
.PP

.SS "template<typename MatType  = arma::mat> double \fBmlpack::regression::LogisticRegression\fP< MatType >::ComputeAccuracy (const MatType & predictors, const arma::Row< size_t > & responses, const double decisionBoundary = \fC0\&.5\fP) const"

.PP
Compute the accuracy of the model on the given predictors and responses, optionally using the given decision boundary\&. The responses should be either 0 or 1\&. Logistic regression returns a value between 0 and 1\&. If the value is greater than the decision boundary, the response is taken to be 1; otherwise, it is 0\&. By default, the decision boundary is 0\&.5\&.
.PP
The accuracy is returned as a percentage, between 0 and 100\&.
.PP
\fBParameters:\fP
.RS 4
\fIpredictors\fP Input predictors\&. 
.br
\fIresponses\fP Vector of responses\&. 
.br
\fIdecisionBoundary\fP Decision boundary (default 0\&.5)\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Percentage of responses that are predicted correctly\&. 
.RE
.PP

.PP
Referenced by mlpack::regression::LogisticRegression< MatType >::Lambda()\&.
.SS "template<typename MatType  = arma::mat> double \fBmlpack::regression::LogisticRegression\fP< MatType >::ComputeError (const MatType & predictors, const arma::Row< size_t > & responses) const"

.PP
Compute the error of the model\&. This returns the negative objective function of the logistic regression log-likelihood function\&. For the model to be optimal, the negative log-likelihood function should be minimized\&.
.PP
\fBParameters:\fP
.RS 4
\fIpredictors\fP Input predictors\&. 
.br
\fIresponses\fP Vector of responses\&. 
.RE
.PP

.PP
Referenced by mlpack::regression::LogisticRegression< MatType >::Lambda()\&.
.SS "template<typename MatType  = arma::mat> const double& \fBmlpack::regression::LogisticRegression\fP< MatType >::Lambda () const\fC [inline]\fP"

.PP
Return the lambda value for L2-regularization\&. 
.PP
Definition at line 157 of file logistic_regression\&.hpp\&.
.PP
References mlpack::regression::LogisticRegression< MatType >::lambda\&.
.SS "template<typename MatType  = arma::mat> double& \fBmlpack::regression::LogisticRegression\fP< MatType >::Lambda ()\fC [inline]\fP"

.PP
Modify the lambda value for L2-regularization\&. 
.PP
Definition at line 159 of file logistic_regression\&.hpp\&.
.PP
References mlpack::regression::LogisticRegression< MatType >::Classify(), mlpack::regression::LogisticRegression< MatType >::ComputeAccuracy(), mlpack::regression::LogisticRegression< MatType >::ComputeError(), mlpack::regression::LogisticRegression< MatType >::lambda, mlpack_deprecated, mlpack::regression::LogisticRegression< MatType >::Predict(), and mlpack::regression::LogisticRegression< MatType >::Serialize()\&.
.SS "template<typename MatType  = arma::mat> const arma::vec& \fBmlpack::regression::LogisticRegression\fP< MatType >::Parameters () const\fC [inline]\fP"

.PP
Return the parameters (the b vector)\&. 
.PP
Definition at line 152 of file logistic_regression\&.hpp\&.
.PP
References mlpack::regression::LogisticRegression< MatType >::parameters\&.
.SS "template<typename MatType  = arma::mat> arma::vec& \fBmlpack::regression::LogisticRegression\fP< MatType >::Parameters ()\fC [inline]\fP"

.PP
Modify the parameters (the b vector)\&. 
.PP
Definition at line 154 of file logistic_regression\&.hpp\&.
.PP
References mlpack::regression::LogisticRegression< MatType >::parameters\&.
.SS "template<typename MatType  = arma::mat> \fBmlpack_deprecated\fP void \fBmlpack::regression::LogisticRegression\fP< MatType >::Predict (const MatType & predictors, arma::Row< size_t > & responses, const double decisionBoundary = \fC0\&.5\fP) const"

.PP
Predict the responses to a given set of predictors\&. The responses will be either 0 or 1\&. Optionally, specify the decision boundary; logistic regression returns a value between 0 and 1\&. If the value is greater than the decision boundary, the response is taken to be 1; otherwise, it is 0\&. By default the decision boundary is 0\&.5\&.
.PP
This method is deprecated---you should use \fBClassify()\fP instead\&.
.PP
\fBParameters:\fP
.RS 4
\fIpredictors\fP Input predictors\&. 
.br
\fIresponses\fP Vector to put output predictions of responses into\&. 
.br
\fIdecisionBoundary\fP Decision boundary (default 0\&.5)\&. 
.RE
.PP

.PP
Referenced by mlpack::regression::LogisticRegression< MatType >::Lambda()\&.
.SS "template<typename MatType  = arma::mat> template<typename Archive > void \fBmlpack::regression::LogisticRegression\fP< MatType >::Serialize (Archive & ar, const unsigned int)"

.PP
Serialize the model\&. 
.PP
Referenced by mlpack::regression::LogisticRegression< MatType >::Lambda()\&.
.SS "template<typename MatType  = arma::mat> template<template< typename > class OptimizerType = mlpack::optimization::L_BFGS> void \fBmlpack::regression::LogisticRegression\fP< MatType >::Train (const MatType & predictors, const arma::Row< size_t > & responses)"

.PP
Train the \fBLogisticRegression\fP model on the given input data\&. By default, the L-BFGS optimization algorithm is used, but others can be specified (such as \fBmlpack::optimization::SGD\fP)\&.
.PP
This will use the existing model parameters as a starting point for the optimization\&. If this is not what you want, then you should access the parameters vector directly with \fBParameters()\fP and modify it as desired\&.
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIOptimizerType\fP Type of optimizer to use to train the model\&. 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIpredictors\fP Input training variables\&. 
.br
\fIresponses\fP Outputs results from input training variables\&. 
.RE
.PP

.SS "template<typename MatType  = arma::mat> template<template< typename, typename\&.\&.\&. > class OptimizerType = mlpack::optimization::L_BFGS, typename\&.\&.\&. OptimizerTypeArgs> void \fBmlpack::regression::LogisticRegression\fP< MatType >::Train (OptimizerType< \fBLogisticRegressionFunction\fP< MatType >, OptimizerTypeArgs\&.\&.\&. > & optimizer)"

.PP
Train the \fBLogisticRegression\fP model with the given instantiated optimizer\&. Using this overload allows configuring the instantiated optimizer before training is performed\&.
.PP
Note that the initial point of the optimizer (optimizer\&.Function()\&.GetInitialPoint()) will be used as the initial point of the optimization, overwriting any existing trained model\&. If you don't want to overwrite the existing model, set optimizer\&.Function()\&.GetInitialPoint() to the current parameters vector, accessible via \fBParameters()\fP\&.
.PP
\fBParameters:\fP
.RS 4
\fIoptimizer\fP Instantiated optimizer with instantiated error function\&. 
.RE
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIOptimizerTypeArgs\fP Optimizer arguments to customize the behavior of the optimizer\&. 
.RE
.PP

.SH "Member Data Documentation"
.PP 
.SS "template<typename MatType  = arma::mat> double \fBmlpack::regression::LogisticRegression\fP< MatType >::lambda\fC [private]\fP"

.PP
L2-regularization penalty parameter\&. 
.PP
Definition at line 254 of file logistic_regression\&.hpp\&.
.PP
Referenced by mlpack::regression::LogisticRegression< MatType >::Lambda()\&.
.SS "template<typename MatType  = arma::mat> arma::vec \fBmlpack::regression::LogisticRegression\fP< MatType >::parameters\fC [private]\fP"

.PP
Vector of trained parameters (size: dimensionality plus one)\&. 
.PP
Definition at line 252 of file logistic_regression\&.hpp\&.
.PP
Referenced by mlpack::regression::LogisticRegression< MatType >::Parameters()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for mlpack from the source code\&.
