.TH "mlpack::range::RangeSearchRules< MetricType, TreeType >" 3 "Sat Mar 25 2017" "Version master" "mlpack" \" -*- nroff -*-
.ad l
.nh
.SH NAME
mlpack::range::RangeSearchRules< MetricType, TreeType > \- The \fBRangeSearchRules\fP class is a template helper class used by \fBRangeSearch\fP class when performing range searches\&.  

.SH SYNOPSIS
.br
.PP
.SS "Public Types"

.in +1c
.ti -1c
.RI "typedef \fBtree::TraversalInfo\fP< TreeType > \fBTraversalInfoType\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBRangeSearchRules\fP (const arma::mat &\fBreferenceSet\fP, const arma::mat &\fBquerySet\fP, const \fBmath::Range\fP &\fBrange\fP, std::vector< std::vector< size_t > > &\fBneighbors\fP, std::vector< std::vector< double > > &\fBdistances\fP, MetricType &\fBmetric\fP, const bool \fBsameSet\fP=false)"
.br
.RI "\fIConstruct the \fBRangeSearchRules\fP object\&. \fP"
.ti -1c
.RI "double \fBBaseCase\fP (const size_t queryIndex, const size_t referenceIndex)"
.br
.RI "\fICompute the base case between the given query point and reference point\&. \fP"
.ti -1c
.RI "size_t \fBBaseCases\fP () const "
.br
.RI "\fIGet the number of base cases\&. \fP"
.ti -1c
.RI "double \fBRescore\fP (const size_t queryIndex, TreeType &referenceNode, const double oldScore) const "
.br
.RI "\fIRe-evaluate the score for recursion order\&. \fP"
.ti -1c
.RI "double \fBRescore\fP (TreeType &queryNode, TreeType &referenceNode, const double oldScore) const "
.br
.RI "\fIRe-evaluate the score for recursion order\&. \fP"
.ti -1c
.RI "double \fBScore\fP (const size_t queryIndex, TreeType &referenceNode)"
.br
.RI "\fIGet the score for recursion order\&. \fP"
.ti -1c
.RI "double \fBScore\fP (TreeType &queryNode, TreeType &referenceNode)"
.br
.RI "\fIGet the score for recursion order\&. \fP"
.ti -1c
.RI "size_t \fBScores\fP () const "
.br
.RI "\fIGet the number of scores (that is, calls to RangeDistance())\&. \fP"
.ti -1c
.RI "const \fBTraversalInfoType\fP & \fBTraversalInfo\fP () const "
.br
.ti -1c
.RI "\fBTraversalInfoType\fP & \fBTraversalInfo\fP ()"
.br
.in -1c
.SS "Private Member Functions"

.in +1c
.ti -1c
.RI "void \fBAddResult\fP (const size_t queryIndex, TreeType &referenceNode)"
.br
.RI "\fIAdd all the points in the given node to the results for the given query point\&. \fP"
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "size_t \fBbaseCases\fP"
.br
.RI "\fIThe number of base cases\&. \fP"
.ti -1c
.RI "std::vector< std::vector< double > > & \fBdistances\fP"
.br
.RI "\fIThe vector the resultant neighbor distances should be stored in\&. \fP"
.ti -1c
.RI "size_t \fBlastQueryIndex\fP"
.br
.RI "\fIThe last query index\&. \fP"
.ti -1c
.RI "size_t \fBlastReferenceIndex\fP"
.br
.RI "\fIThe last reference index\&. \fP"
.ti -1c
.RI "MetricType & \fBmetric\fP"
.br
.RI "\fIThe instantiated metric\&. \fP"
.ti -1c
.RI "std::vector< std::vector< size_t > > & \fBneighbors\fP"
.br
.RI "\fIThe vector the resultant neighbor indices should be stored in\&. \fP"
.ti -1c
.RI "const arma::mat & \fBquerySet\fP"
.br
.RI "\fIThe query set\&. \fP"
.ti -1c
.RI "const \fBmath::Range\fP & \fBrange\fP"
.br
.RI "\fIThe range of distances for which we are searching\&. \fP"
.ti -1c
.RI "const arma::mat & \fBreferenceSet\fP"
.br
.RI "\fIThe reference set\&. \fP"
.ti -1c
.RI "bool \fBsameSet\fP"
.br
.RI "\fIIf true, the query and reference set are taken to be the same\&. \fP"
.ti -1c
.RI "size_t \fBscores\fP"
.br
.RI "\fITHe number of scores\&. \fP"
.ti -1c
.RI "\fBTraversalInfoType\fP \fBtraversalInfo\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<typename MetricType, typename TreeType>
.br
class mlpack::range::RangeSearchRules< MetricType, TreeType >"
The \fBRangeSearchRules\fP class is a template helper class used by \fBRangeSearch\fP class when performing range searches\&. 


.PP
\fBTemplate Parameters:\fP
.RS 4
\fIMetricType\fP The metric to use for computation\&. 
.br
\fITreeType\fP The tree type to use; must adhere to the TreeType API\&. 
.RE
.PP

.PP
Definition at line 28 of file range_search_rules\&.hpp\&.
.SH "Member Typedef Documentation"
.PP 
.SS "template<typename MetricType , typename TreeType > typedef \fBtree::TraversalInfo\fP<TreeType> \fBmlpack::range::RangeSearchRules\fP< MetricType, TreeType >::\fBTraversalInfoType\fP"

.PP
Definition at line 110 of file range_search_rules\&.hpp\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "template<typename MetricType , typename TreeType > \fBmlpack::range::RangeSearchRules\fP< MetricType, TreeType >::\fBRangeSearchRules\fP (const arma::mat & referenceSet, const arma::mat & querySet, const \fBmath::Range\fP & range, std::vector< std::vector< size_t > > & neighbors, std::vector< std::vector< double > > & distances, MetricType & metric, const bool sameSet = \fCfalse\fP)"

.PP
Construct the \fBRangeSearchRules\fP object\&. This is usually done from within the \fBRangeSearch\fP class at search time\&.
.PP
\fBParameters:\fP
.RS 4
\fIreferenceSet\fP Set of reference data\&. 
.br
\fIquerySet\fP Set of query data\&. 
.br
\fIrange\fP Range to search for\&. 
.br
\fIneighbors\fP Vector to store resulting neighbors in\&. 
.br
\fIdistances\fP Vector to store resulting distances in\&. 
.br
\fImetric\fP Instantiated metric\&. 
.br
\fIsameSet\fP If true, the query and reference set are taken to be the same, and a query point will not return itself in the results\&. 
.RE
.PP

.SH "Member Function Documentation"
.PP 
.SS "template<typename MetricType , typename TreeType > void \fBmlpack::range::RangeSearchRules\fP< MetricType, TreeType >::AddResult (const size_t queryIndex, TreeType & referenceNode)\fC [private]\fP"

.PP
Add all the points in the given node to the results for the given query point\&. If the base case has already been calculated, we make sure to not add that to the results twice\&. 
.SS "template<typename MetricType , typename TreeType > double \fBmlpack::range::RangeSearchRules\fP< MetricType, TreeType >::BaseCase (const size_t queryIndex, const size_t referenceIndex)"

.PP
Compute the base case between the given query point and reference point\&. 
.PP
\fBParameters:\fP
.RS 4
\fIqueryIndex\fP Index of query point\&. 
.br
\fIreferenceIndex\fP Index of reference point\&. 
.RE
.PP

.SS "template<typename MetricType , typename TreeType > size_t \fBmlpack::range::RangeSearchRules\fP< MetricType, TreeType >::BaseCases () const\fC [inline]\fP"

.PP
Get the number of base cases\&. 
.PP
Definition at line 116 of file range_search_rules\&.hpp\&.
.PP
References mlpack::range::RangeSearchRules< MetricType, TreeType >::baseCases\&.
.SS "template<typename MetricType , typename TreeType > double \fBmlpack::range::RangeSearchRules\fP< MetricType, TreeType >::Rescore (const size_t queryIndex, TreeType & referenceNode, const double oldScore) const"

.PP
Re-evaluate the score for recursion order\&. A low score indicates priority for recursion, while DBL_MAX indicates that the node should not be recursed into at all (it should be pruned)\&. This is used when the score has already been calculated, but another recursion may have modified the bounds for pruning\&. So the old score is checked against the new pruning bound\&.
.PP
\fBParameters:\fP
.RS 4
\fIqueryIndex\fP Index of query point\&. 
.br
\fIreferenceNode\fP Candidate node to be recursed into\&. 
.br
\fIoldScore\fP Old score produced by \fBScore()\fP (or \fBRescore()\fP)\&. 
.RE
.PP

.SS "template<typename MetricType , typename TreeType > double \fBmlpack::range::RangeSearchRules\fP< MetricType, TreeType >::Rescore (TreeType & queryNode, TreeType & referenceNode, const double oldScore) const"

.PP
Re-evaluate the score for recursion order\&. A low score indicates priority for recursion, while DBL_MAX indicates that the node should not be recursed into at all (it should be pruned)\&. This is used when the score has already been calculated, but another recursion may have modified the bounds for pruning\&. So the old score is checked against the new pruning bound\&.
.PP
\fBParameters:\fP
.RS 4
\fIqueryNode\fP Candidate query node to recurse into\&. 
.br
\fIreferenceNode\fP Candidate reference node to recurse into\&. 
.br
\fIoldScore\fP Old score produced by \fBScore()\fP (or \fBRescore()\fP)\&. 
.RE
.PP

.SS "template<typename MetricType , typename TreeType > double \fBmlpack::range::RangeSearchRules\fP< MetricType, TreeType >::Score (const size_t queryIndex, TreeType & referenceNode)"

.PP
Get the score for recursion order\&. A low score indicates priority for recursion, while DBL_MAX indicates that the node should not be recursed into at all (it should be pruned)\&.
.PP
\fBParameters:\fP
.RS 4
\fIqueryIndex\fP Index of query point\&. 
.br
\fIreferenceNode\fP Candidate node to be recursed into\&. 
.RE
.PP

.SS "template<typename MetricType , typename TreeType > double \fBmlpack::range::RangeSearchRules\fP< MetricType, TreeType >::Score (TreeType & queryNode, TreeType & referenceNode)"

.PP
Get the score for recursion order\&. A low score indicates priority for recursion, while DBL_MAX indicates that the node should not be recursed into at all (it should be pruned)\&.
.PP
\fBParameters:\fP
.RS 4
\fIqueryNode\fP Candidate query node to recurse into\&. 
.br
\fIreferenceNode\fP Candidate reference node to recurse into\&. 
.RE
.PP

.SS "template<typename MetricType , typename TreeType > size_t \fBmlpack::range::RangeSearchRules\fP< MetricType, TreeType >::Scores () const\fC [inline]\fP"

.PP
Get the number of scores (that is, calls to RangeDistance())\&. 
.PP
Definition at line 118 of file range_search_rules\&.hpp\&.
.PP
References mlpack::range::RangeSearchRules< MetricType, TreeType >::scores\&.
.SS "template<typename MetricType , typename TreeType > const \fBTraversalInfoType\fP& \fBmlpack::range::RangeSearchRules\fP< MetricType, TreeType >::TraversalInfo () const\fC [inline]\fP"

.PP
Definition at line 112 of file range_search_rules\&.hpp\&.
.PP
References mlpack::range::RangeSearchRules< MetricType, TreeType >::traversalInfo\&.
.SS "template<typename MetricType , typename TreeType > \fBTraversalInfoType\fP& \fBmlpack::range::RangeSearchRules\fP< MetricType, TreeType >::TraversalInfo ()\fC [inline]\fP"

.PP
Definition at line 113 of file range_search_rules\&.hpp\&.
.PP
References mlpack::range::RangeSearchRules< MetricType, TreeType >::traversalInfo\&.
.SH "Member Data Documentation"
.PP 
.SS "template<typename MetricType , typename TreeType > size_t \fBmlpack::range::RangeSearchRules\fP< MetricType, TreeType >::baseCases\fC [private]\fP"

.PP
The number of base cases\&. 
.PP
Definition at line 156 of file range_search_rules\&.hpp\&.
.PP
Referenced by mlpack::range::RangeSearchRules< MetricType, TreeType >::BaseCases()\&.
.SS "template<typename MetricType , typename TreeType > std::vector<std::vector<double> >& \fBmlpack::range::RangeSearchRules\fP< MetricType, TreeType >::distances\fC [private]\fP"

.PP
The vector the resultant neighbor distances should be stored in\&. 
.PP
Definition at line 134 of file range_search_rules\&.hpp\&.
.SS "template<typename MetricType , typename TreeType > size_t \fBmlpack::range::RangeSearchRules\fP< MetricType, TreeType >::lastQueryIndex\fC [private]\fP"

.PP
The last query index\&. 
.PP
Definition at line 143 of file range_search_rules\&.hpp\&.
.SS "template<typename MetricType , typename TreeType > size_t \fBmlpack::range::RangeSearchRules\fP< MetricType, TreeType >::lastReferenceIndex\fC [private]\fP"

.PP
The last reference index\&. 
.PP
Definition at line 145 of file range_search_rules\&.hpp\&.
.SS "template<typename MetricType , typename TreeType > MetricType& \fBmlpack::range::RangeSearchRules\fP< MetricType, TreeType >::metric\fC [private]\fP"

.PP
The instantiated metric\&. 
.PP
Definition at line 137 of file range_search_rules\&.hpp\&.
.SS "template<typename MetricType , typename TreeType > std::vector<std::vector<size_t> >& \fBmlpack::range::RangeSearchRules\fP< MetricType, TreeType >::neighbors\fC [private]\fP"

.PP
The vector the resultant neighbor indices should be stored in\&. 
.PP
Definition at line 131 of file range_search_rules\&.hpp\&.
.SS "template<typename MetricType , typename TreeType > const arma::mat& \fBmlpack::range::RangeSearchRules\fP< MetricType, TreeType >::querySet\fC [private]\fP"

.PP
The query set\&. 
.PP
Definition at line 125 of file range_search_rules\&.hpp\&.
.SS "template<typename MetricType , typename TreeType > const \fBmath::Range\fP& \fBmlpack::range::RangeSearchRules\fP< MetricType, TreeType >::range\fC [private]\fP"

.PP
The range of distances for which we are searching\&. 
.PP
Definition at line 128 of file range_search_rules\&.hpp\&.
.SS "template<typename MetricType , typename TreeType > const arma::mat& \fBmlpack::range::RangeSearchRules\fP< MetricType, TreeType >::referenceSet\fC [private]\fP"

.PP
The reference set\&. 
.PP
Definition at line 122 of file range_search_rules\&.hpp\&.
.SS "template<typename MetricType , typename TreeType > bool \fBmlpack::range::RangeSearchRules\fP< MetricType, TreeType >::sameSet\fC [private]\fP"

.PP
If true, the query and reference set are taken to be the same\&. 
.PP
Definition at line 140 of file range_search_rules\&.hpp\&.
.SS "template<typename MetricType , typename TreeType > size_t \fBmlpack::range::RangeSearchRules\fP< MetricType, TreeType >::scores\fC [private]\fP"

.PP
THe number of scores\&. 
.PP
Definition at line 158 of file range_search_rules\&.hpp\&.
.PP
Referenced by mlpack::range::RangeSearchRules< MetricType, TreeType >::Scores()\&.
.SS "template<typename MetricType , typename TreeType > \fBTraversalInfoType\fP \fBmlpack::range::RangeSearchRules\fP< MetricType, TreeType >::traversalInfo\fC [private]\fP"

.PP
Definition at line 153 of file range_search_rules\&.hpp\&.
.PP
Referenced by mlpack::range::RangeSearchRules< MetricType, TreeType >::TraversalInfo()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for mlpack from the source code\&.
