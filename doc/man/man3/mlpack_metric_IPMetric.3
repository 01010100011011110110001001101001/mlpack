.TH "mlpack::metric::IPMetric< KernelType >" 3 "Sat Mar 25 2017" "Version master" "mlpack" \" -*- nroff -*-
.ad l
.nh
.SH NAME
mlpack::metric::IPMetric< KernelType > \- The inner product metric, \fBIPMetric\fP, takes a given Mercer kernel (KernelType), and when \fBEvaluate()\fP is called, returns the distance between the two points in kernel space:  

.SH SYNOPSIS
.br
.PP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBIPMetric\fP ()"
.br
.RI "\fICreate the \fBIPMetric\fP without an instantiated kernel\&. \fP"
.ti -1c
.RI "\fBIPMetric\fP (KernelType &\fBkernel\fP)"
.br
.RI "\fICreate the \fBIPMetric\fP with an instantiated kernel\&. \fP"
.ti -1c
.RI "\fB~IPMetric\fP ()"
.br
.RI "\fIDestroy the \fBIPMetric\fP object\&. \fP"
.ti -1c
.RI "template<typename VecTypeA , typename VecTypeB > VecTypeA::elem_type \fBEvaluate\fP (const VecTypeA &a, const VecTypeB &b)"
.br
.RI "\fIEvaluate the metric\&. \fP"
.ti -1c
.RI "const KernelType & \fBKernel\fP () const "
.br
.RI "\fIGet the kernel\&. \fP"
.ti -1c
.RI "KernelType & \fBKernel\fP ()"
.br
.RI "\fIModify the kernel\&. \fP"
.ti -1c
.RI "template<typename Archive > void \fBSerialize\fP (Archive &ar, const unsigned int version)"
.br
.RI "\fISerialize the metric\&. \fP"
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "KernelType * \fBkernel\fP"
.br
.RI "\fIThe kernel we are using\&. \fP"
.ti -1c
.RI "bool \fBkernelOwner\fP"
.br
.RI "\fIIf true, we are responsible for deleting the kernel\&. \fP"
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<typename KernelType>
.br
class mlpack::metric::IPMetric< KernelType >"
The inner product metric, \fBIPMetric\fP, takes a given Mercer kernel (KernelType), and when \fBEvaluate()\fP is called, returns the distance between the two points in kernel space: 

\[ d(x, y) = \sqrt{ K(x, x) + K(y, y) - 2K(x, y) }. \]
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIKernelType\fP Type of Kernel to use\&. This must be a Mercer kernel (positive definite), otherwise the metric may not be valid\&. 
.RE
.PP

.PP
Definition at line 32 of file ip_metric\&.hpp\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "template<typename KernelType> \fBmlpack::metric::IPMetric\fP< KernelType >::\fBIPMetric\fP ()"

.PP
Create the \fBIPMetric\fP without an instantiated kernel\&. 
.SS "template<typename KernelType> \fBmlpack::metric::IPMetric\fP< KernelType >::\fBIPMetric\fP (KernelType & kernel)"

.PP
Create the \fBIPMetric\fP with an instantiated kernel\&. 
.SS "template<typename KernelType> \fBmlpack::metric::IPMetric\fP< KernelType >::~\fBIPMetric\fP ()"

.PP
Destroy the \fBIPMetric\fP object\&. 
.SH "Member Function Documentation"
.PP 
.SS "template<typename KernelType> template<typename VecTypeA , typename VecTypeB > VecTypeA::elem_type \fBmlpack::metric::IPMetric\fP< KernelType >::Evaluate (const VecTypeA & a, const VecTypeB & b)"

.PP
Evaluate the metric\&. 
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIVecTypeA\fP Type of first vector\&. 
.br
\fIVecTypeB\fP Type of second vector\&. 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIa\fP First vector\&. 
.br
\fIb\fP Second vector\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Distance between the two points in kernel space\&. 
.RE
.PP

.SS "template<typename KernelType> const KernelType& \fBmlpack::metric::IPMetric\fP< KernelType >::Kernel () const\fC [inline]\fP"

.PP
Get the kernel\&. 
.PP
Definition at line 57 of file ip_metric\&.hpp\&.
.SS "template<typename KernelType> KernelType& \fBmlpack::metric::IPMetric\fP< KernelType >::Kernel ()\fC [inline]\fP"

.PP
Modify the kernel\&. 
.PP
Definition at line 59 of file ip_metric\&.hpp\&.
.SS "template<typename KernelType> template<typename Archive > void \fBmlpack::metric::IPMetric\fP< KernelType >::Serialize (Archive & ar, const unsigned int version)"

.PP
Serialize the metric\&. 
.PP
Referenced by mlpack::metric::IPMetric< kernel::EpanechnikovKernel >::Kernel()\&.
.SH "Member Data Documentation"
.PP 
.SS "template<typename KernelType> KernelType* \fBmlpack::metric::IPMetric\fP< KernelType >::kernel\fC [private]\fP"

.PP
The kernel we are using\&. 
.PP
Definition at line 67 of file ip_metric\&.hpp\&.
.PP
Referenced by mlpack::metric::IPMetric< kernel::EpanechnikovKernel >::Kernel()\&.
.SS "template<typename KernelType> bool \fBmlpack::metric::IPMetric\fP< KernelType >::kernelOwner\fC [private]\fP"

.PP
If true, we are responsible for deleting the kernel\&. 
.PP
Definition at line 69 of file ip_metric\&.hpp\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for mlpack from the source code\&.
