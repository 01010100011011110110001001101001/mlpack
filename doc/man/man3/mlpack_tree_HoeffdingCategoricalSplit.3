.TH "mlpack::tree::HoeffdingCategoricalSplit< FitnessFunction >" 3 "Sat Mar 25 2017" "Version master" "mlpack" \" -*- nroff -*-
.ad l
.nh
.SH NAME
mlpack::tree::HoeffdingCategoricalSplit< FitnessFunction > \- This is the standard Hoeffding-bound categorical feature proposed in the paper below:  

.SH SYNOPSIS
.br
.PP
.SS "Public Types"

.in +1c
.ti -1c
.RI "typedef \fBCategoricalSplitInfo\fP \fBSplitInfo\fP"
.br
.RI "\fIThe type of split information required by the \fBHoeffdingCategoricalSplit\fP\&. \fP"
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBHoeffdingCategoricalSplit\fP (const size_t numCategories, const size_t numClasses)"
.br
.RI "\fICreate the \fBHoeffdingCategoricalSplit\fP given a number of categories for this dimension and a number of classes\&. \fP"
.ti -1c
.RI "\fBHoeffdingCategoricalSplit\fP (const size_t numCategories, const size_t numClasses, const \fBHoeffdingCategoricalSplit\fP &other)"
.br
.RI "\fICreate the \fBHoeffdingCategoricalSplit\fP given a number of categories for this dimension and a number of classes and another \fBHoeffdingCategoricalSplit\fP to take parameters from\&. \fP"
.ti -1c
.RI "void \fBEvaluateFitnessFunction\fP (double &bestFitness, double &secondBestFitness) const "
.br
.RI "\fIGiven the points seen so far, evaluate the fitness function, returning the gain for the best possible split and the second best possible split\&. \fP"
.ti -1c
.RI "size_t \fBMajorityClass\fP () const "
.br
.RI "\fIGet the majority class seen so far\&. \fP"
.ti -1c
.RI "double \fBMajorityProbability\fP () const "
.br
.RI "\fIGet the probability of the majority class given the points seen so far\&. \fP"
.ti -1c
.RI "size_t \fBNumChildren\fP () const "
.br
.RI "\fIReturn the number of children, if the node were to split\&. \fP"
.ti -1c
.RI "template<typename Archive > void \fBSerialize\fP (Archive &ar, const unsigned int)"
.br
.RI "\fISerialize the categorical split\&. \fP"
.ti -1c
.RI "void \fBSplit\fP (arma::Col< size_t > &childMajorities, \fBSplitInfo\fP &splitInfo)"
.br
.RI "\fIGather the information for a split: get the labels of the child majorities, and initialize the SplitInfo object\&. \fP"
.ti -1c
.RI "template<typename eT > void \fBTrain\fP (eT value, const size_t label)"
.br
.RI "\fITrain on the given value with the given label\&. \fP"
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "arma::Mat< size_t > \fBsufficientStatistics\fP"
.br
.RI "\fIThe sufficient statistics for all points seen so far\&. \fP"
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<typename FitnessFunction>
.br
class mlpack::tree::HoeffdingCategoricalSplit< FitnessFunction >"
This is the standard Hoeffding-bound categorical feature proposed in the paper below: 


.PP
.nf
@inproceedings{domingos2000mining,
  title={{Mining High-Speed Data Streams}},
  author={Domingos, P\&. and Hulten, G\&.},
  year={2000},
  booktitle={Proceedings of the Sixth ACM SIGKDD International Conference on
      Knowledge Discovery and Data Mining (KDD '00)},
  pages={71--80}
}

.fi
.PP
.PP
This class will track the sufficient statistics of the training points it has seen\&. The HoeffdingSplit class (and other related classes) can use this class to track categorical features and split decision tree nodes\&.
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIFitnessFunction\fP Fitness function to use for calculating gain\&. 
.RE
.PP

.PP
Definition at line 44 of file hoeffding_categorical_split\&.hpp\&.
.SH "Member Typedef Documentation"
.PP 
.SS "template<typename FitnessFunction > typedef \fBCategoricalSplitInfo\fP \fBmlpack::tree::HoeffdingCategoricalSplit\fP< FitnessFunction >::\fBSplitInfo\fP"

.PP
The type of split information required by the \fBHoeffdingCategoricalSplit\fP\&. 
.PP
Definition at line 48 of file hoeffding_categorical_split\&.hpp\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "template<typename FitnessFunction > \fBmlpack::tree::HoeffdingCategoricalSplit\fP< FitnessFunction >::\fBHoeffdingCategoricalSplit\fP (const size_t numCategories, const size_t numClasses)"

.PP
Create the \fBHoeffdingCategoricalSplit\fP given a number of categories for this dimension and a number of classes\&. 
.PP
\fBParameters:\fP
.RS 4
\fInumCategories\fP Number of categories in this dimension\&. 
.br
\fInumClasses\fP Number of classes in this dimension\&. 
.RE
.PP

.SS "template<typename FitnessFunction > \fBmlpack::tree::HoeffdingCategoricalSplit\fP< FitnessFunction >::\fBHoeffdingCategoricalSplit\fP (const size_t numCategories, const size_t numClasses, const \fBHoeffdingCategoricalSplit\fP< FitnessFunction > & other)"

.PP
Create the \fBHoeffdingCategoricalSplit\fP given a number of categories for this dimension and a number of classes and another \fBHoeffdingCategoricalSplit\fP to take parameters from\&. In this particular case, there are no parameters to take, but this constructor is required by the \fBHoeffdingTree\fP class\&. 
.SH "Member Function Documentation"
.PP 
.SS "template<typename FitnessFunction > void \fBmlpack::tree::HoeffdingCategoricalSplit\fP< FitnessFunction >::EvaluateFitnessFunction (double & bestFitness, double & secondBestFitness) const"

.PP
Given the points seen so far, evaluate the fitness function, returning the gain for the best possible split and the second best possible split\&. In this splitting technique, we only split one possible way, so secondBestFitness will always be 0\&.
.PP
\fBParameters:\fP
.RS 4
\fIbestFitness\fP The fitness function result for this split\&. 
.br
\fIsecondBestFitness\fP This is always set to 0 (this split only splits one way)\&. 
.RE
.PP

.SS "template<typename FitnessFunction > size_t \fBmlpack::tree::HoeffdingCategoricalSplit\fP< FitnessFunction >::MajorityClass () const"

.PP
Get the majority class seen so far\&. 
.PP
Referenced by mlpack::tree::HoeffdingCategoricalSplit< FitnessFunction >::NumChildren()\&.
.SS "template<typename FitnessFunction > double \fBmlpack::tree::HoeffdingCategoricalSplit\fP< FitnessFunction >::MajorityProbability () const"

.PP
Get the probability of the majority class given the points seen so far\&. 
.PP
Referenced by mlpack::tree::HoeffdingCategoricalSplit< FitnessFunction >::NumChildren()\&.
.SS "template<typename FitnessFunction > size_t \fBmlpack::tree::HoeffdingCategoricalSplit\fP< FitnessFunction >::NumChildren () const\fC [inline]\fP"

.PP
Return the number of children, if the node were to split\&. 
.PP
Definition at line 93 of file hoeffding_categorical_split\&.hpp\&.
.PP
References mlpack::tree::HoeffdingCategoricalSplit< FitnessFunction >::MajorityClass(), mlpack::tree::HoeffdingCategoricalSplit< FitnessFunction >::MajorityProbability(), mlpack::tree::HoeffdingCategoricalSplit< FitnessFunction >::Split(), and mlpack::tree::HoeffdingCategoricalSplit< FitnessFunction >::sufficientStatistics\&.
.SS "template<typename FitnessFunction > template<typename Archive > void \fBmlpack::tree::HoeffdingCategoricalSplit\fP< FitnessFunction >::Serialize (Archive & ar, const unsigned int)\fC [inline]\fP"

.PP
Serialize the categorical split\&. 
.PP
Definition at line 111 of file hoeffding_categorical_split\&.hpp\&.
.PP
References mlpack::data::CreateNVP(), and mlpack::tree::HoeffdingCategoricalSplit< FitnessFunction >::sufficientStatistics\&.
.SS "template<typename FitnessFunction > void \fBmlpack::tree::HoeffdingCategoricalSplit\fP< FitnessFunction >::Split (arma::Col< size_t > & childMajorities, \fBSplitInfo\fP & splitInfo)"

.PP
Gather the information for a split: get the labels of the child majorities, and initialize the SplitInfo object\&. 
.PP
\fBParameters:\fP
.RS 4
\fIchildMajorities\fP Majorities of child nodes to be created\&. 
.br
\fIsplitInfo\fP Information for splitting\&. 
.RE
.PP

.PP
Referenced by mlpack::tree::HoeffdingCategoricalSplit< FitnessFunction >::NumChildren()\&.
.SS "template<typename FitnessFunction > template<typename eT > void \fBmlpack::tree::HoeffdingCategoricalSplit\fP< FitnessFunction >::Train (eT value, const size_t label)"

.PP
Train on the given value with the given label\&. 
.PP
\fBParameters:\fP
.RS 4
\fIvalue\fP Value to train on\&. 
.br
\fIlabel\fP Label to train on\&. 
.RE
.PP

.SH "Member Data Documentation"
.PP 
.SS "template<typename FitnessFunction > arma::Mat<size_t> \fBmlpack::tree::HoeffdingCategoricalSplit\fP< FitnessFunction >::sufficientStatistics\fC [private]\fP"

.PP
The sufficient statistics for all points seen so far\&. Each column corresponds to a category, and contains a count of each of the classes seen for points in that category\&. 
.PP
Definition at line 120 of file hoeffding_categorical_split\&.hpp\&.
.PP
Referenced by mlpack::tree::HoeffdingCategoricalSplit< FitnessFunction >::NumChildren(), and mlpack::tree::HoeffdingCategoricalSplit< FitnessFunction >::Serialize()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for mlpack from the source code\&.
