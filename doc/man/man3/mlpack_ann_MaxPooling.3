.TH "mlpack::ann::MaxPooling< InputDataType, OutputDataType >" 3 "Sat Mar 25 2017" "Version master" "mlpack" \" -*- nroff -*-
.ad l
.nh
.SH NAME
mlpack::ann::MaxPooling< InputDataType, OutputDataType > \- Implementation of the \fBMaxPooling\fP layer\&.  

.SH SYNOPSIS
.br
.PP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBMaxPooling\fP ()"
.br
.RI "\fICreate the \fBMaxPooling\fP object\&. \fP"
.ti -1c
.RI "\fBMaxPooling\fP (const size_t \fBkW\fP, const size_t \fBkH\fP, const size_t \fBdW\fP=1, const size_t \fBdH\fP=1, const bool \fBfloor\fP=true)"
.br
.RI "\fICreate the \fBMaxPooling\fP object using the specified number of units\&. \fP"
.ti -1c
.RI "template<typename eT > void \fBBackward\fP (const arma::Mat< eT > &&, arma::Mat< eT > &&gy, arma::Mat< eT > &&g)"
.br
.RI "\fIOrdinary feed backward pass of a neural network, using 3rd-order tensors as input, calculating the function f(x) by propagating x backwards through f\&. \fP"
.ti -1c
.RI "OutputDataType const & \fBDelta\fP () const "
.br
.RI "\fIGet the delta\&. \fP"
.ti -1c
.RI "OutputDataType & \fBDelta\fP ()"
.br
.RI "\fIModify the delta\&. \fP"
.ti -1c
.RI "bool \fBDeterministic\fP () const "
.br
.RI "\fIGet the value of the deterministic parameter\&. \fP"
.ti -1c
.RI "bool & \fBDeterministic\fP ()"
.br
.RI "\fIModify the value of the deterministic parameter\&. \fP"
.ti -1c
.RI "template<typename eT > void \fBForward\fP (const arma::Mat< eT > &&input, arma::Mat< eT > &&output)"
.br
.RI "\fIOrdinary feed forward pass of a neural network, evaluating the function f(x) by propagating the activity forward through f\&. \fP"
.ti -1c
.RI "size_t const & \fBInputHeight\fP () const "
.br
.RI "\fIGet the height\&. \fP"
.ti -1c
.RI "size_t & \fBInputHeight\fP ()"
.br
.RI "\fIModify the height\&. \fP"
.ti -1c
.RI "InputDataType const & \fBInputParameter\fP () const "
.br
.RI "\fIGet the input parameter\&. \fP"
.ti -1c
.RI "InputDataType & \fBInputParameter\fP ()"
.br
.RI "\fIModify the input parameter\&. \fP"
.ti -1c
.RI "size_t const & \fBInputWidth\fP () const "
.br
.RI "\fIGet the width\&. \fP"
.ti -1c
.RI "size_t & \fBInputWidth\fP ()"
.br
.RI "\fIModify the width\&. \fP"
.ti -1c
.RI "size_t const & \fBOutputHeight\fP () const "
.br
.RI "\fIGet the height\&. \fP"
.ti -1c
.RI "size_t & \fBOutputHeight\fP ()"
.br
.RI "\fIModify the height\&. \fP"
.ti -1c
.RI "OutputDataType const & \fBOutputParameter\fP () const "
.br
.RI "\fIGet the output parameter\&. \fP"
.ti -1c
.RI "OutputDataType & \fBOutputParameter\fP ()"
.br
.RI "\fIModify the output parameter\&. \fP"
.ti -1c
.RI "size_t const & \fBOutputWidth\fP () const "
.br
.RI "\fIGet the width\&. \fP"
.ti -1c
.RI "size_t & \fBOutputWidth\fP ()"
.br
.RI "\fIModify the width\&. \fP"
.ti -1c
.RI "template<typename Archive > void \fBSerialize\fP (Archive &ar, const unsigned int)"
.br
.RI "\fISerialize the layer\&. \fP"
.in -1c
.SS "Private Member Functions"

.in +1c
.ti -1c
.RI "template<typename eT > void \fBPoolingOperation\fP (const arma::Mat< eT > &input, arma::Mat< eT > &output, arma::Mat< eT > &\fBpoolingIndices\fP)"
.br
.RI "\fIApply pooling to the input and store the results\&. \fP"
.ti -1c
.RI "template<typename eT > void \fBUnpooling\fP (const arma::Mat< eT > &error, arma::Mat< eT > &output, arma::Mat< eT > &\fBpoolingIndices\fP)"
.br
.RI "\fIApply unpooling to the input and store the results\&. \fP"
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "OutputDataType \fBdelta\fP"
.br
.RI "\fILocally-stored delta object\&. \fP"
.ti -1c
.RI "bool \fBdeterministic\fP"
.br
.RI "\fIIf true use maximum a posteriori during the forward pass\&. \fP"
.ti -1c
.RI "size_t \fBdH\fP"
.br
.RI "\fILocally-stored height of the stride operation\&. \fP"
.ti -1c
.RI "size_t \fBdW\fP"
.br
.RI "\fILocally-stored width of the stride operation\&. \fP"
.ti -1c
.RI "bool \fBfloor\fP"
.br
.RI "\fIRounding operation used\&. \fP"
.ti -1c
.RI "OutputDataType \fBgradient\fP"
.br
.RI "\fILocally-stored gradient object\&. \fP"
.ti -1c
.RI "arma::cube \fBgTemp\fP"
.br
.RI "\fILocally-stored transformed output parameter\&. \fP"
.ti -1c
.RI "arma::Mat< size_t > \fBindices\fP"
.br
.RI "\fILocally-stored indices matrix parameter\&. \fP"
.ti -1c
.RI "arma::Col< size_t > \fBindicesCol\fP"
.br
.RI "\fILocally-stored indices column parameter\&. \fP"
.ti -1c
.RI "size_t \fBinputHeight\fP"
.br
.RI "\fILocally-stored input height\&. \fP"
.ti -1c
.RI "InputDataType \fBinputParameter\fP"
.br
.RI "\fILocally-stored input parameter object\&. \fP"
.ti -1c
.RI "arma::cube \fBinputTemp\fP"
.br
.RI "\fILocally-stored transformed input parameter\&. \fP"
.ti -1c
.RI "size_t \fBinputWidth\fP"
.br
.RI "\fILocally-stored input width\&. \fP"
.ti -1c
.RI "size_t \fBinSize\fP"
.br
.RI "\fILocally-stored number of input units\&. \fP"
.ti -1c
.RI "size_t \fBkH\fP"
.br
.RI "\fILocally-stored height of the pooling window\&. \fP"
.ti -1c
.RI "size_t \fBkW\fP"
.br
.RI "\fILocally-stored width of the pooling window\&. \fP"
.ti -1c
.RI "size_t \fBoffset\fP"
.br
.RI "\fILocally-stored stored rounding offset\&. \fP"
.ti -1c
.RI "size_t \fBoutputHeight\fP"
.br
.RI "\fILocally-stored output height\&. \fP"
.ti -1c
.RI "OutputDataType \fBoutputParameter\fP"
.br
.RI "\fILocally-stored output parameter object\&. \fP"
.ti -1c
.RI "arma::cube \fBoutputTemp\fP"
.br
.RI "\fILocally-stored output parameter\&. \fP"
.ti -1c
.RI "size_t \fBoutputWidth\fP"
.br
.RI "\fILocally-stored output width\&. \fP"
.ti -1c
.RI "size_t \fBoutSize\fP"
.br
.RI "\fILocally-stored number of output units\&. \fP"
.ti -1c
.RI "\fBMaxPoolingRule\fP \fBpooling\fP"
.br
.RI "\fILocally-stored pooling strategy\&. \fP"
.ti -1c
.RI "std::vector< arma::cube > \fBpoolingIndices\fP"
.br
.RI "\fILocally-stored pooling indicies\&. \fP"
.ti -1c
.RI "bool \fBreset\fP"
.br
.RI "\fILocally-stored reset parameter used to initialize the module once\&. \fP"
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<typename InputDataType = arma::mat, typename OutputDataType = arma::mat>
.br
class mlpack::ann::MaxPooling< InputDataType, OutputDataType >"
Implementation of the \fBMaxPooling\fP layer\&. 


.PP
\fBTemplate Parameters:\fP
.RS 4
\fIInputDataType\fP Type of the input data (arma::colvec, arma::mat, arma::sp_mat or arma::cube)\&. 
.br
\fIOutputDataType\fP Type of the output data (arma::colvec, arma::mat, arma::sp_mat or arma::cube)\&. 
.RE
.PP

.PP
Definition at line 52 of file max_pooling\&.hpp\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "template<typename InputDataType  = arma::mat, typename OutputDataType  = arma::mat> \fBmlpack::ann::MaxPooling\fP< InputDataType, OutputDataType >::\fBMaxPooling\fP ()"

.PP
Create the \fBMaxPooling\fP object\&. 
.SS "template<typename InputDataType  = arma::mat, typename OutputDataType  = arma::mat> \fBmlpack::ann::MaxPooling\fP< InputDataType, OutputDataType >::\fBMaxPooling\fP (const size_t kW, const size_t kH, const size_t dW = \fC1\fP, const size_t dH = \fC1\fP, const bool floor = \fCtrue\fP)"

.PP
Create the \fBMaxPooling\fP object using the specified number of units\&. 
.PP
\fBParameters:\fP
.RS 4
\fIkW\fP Width of the pooling window\&. 
.br
\fIkH\fP Height of the pooling window\&. 
.br
\fIdW\fP Width of the stride operation\&. 
.br
\fIdH\fP Width of the stride operation\&. 
.br
\fIfloor\fP Rounding operator (floor or ceil)\&. 
.RE
.PP

.SH "Member Function Documentation"
.PP 
.SS "template<typename InputDataType  = arma::mat, typename OutputDataType  = arma::mat> template<typename eT > void \fBmlpack::ann::MaxPooling\fP< InputDataType, OutputDataType >::Backward (const arma::Mat< eT > &&, arma::Mat< eT > && gy, arma::Mat< eT > && g)"

.PP
Ordinary feed backward pass of a neural network, using 3rd-order tensors as input, calculating the function f(x) by propagating x backwards through f\&. Using the results from the feed forward pass\&.
.PP
\fBParameters:\fP
.RS 4
\fIinput\fP The propagated input activation\&. 
.br
\fIgy\fP The backpropagated error\&. 
.br
\fIg\fP The calculated gradient\&. 
.RE
.PP

.SS "template<typename InputDataType  = arma::mat, typename OutputDataType  = arma::mat> OutputDataType const& \fBmlpack::ann::MaxPooling\fP< InputDataType, OutputDataType >::Delta () const\fC [inline]\fP"

.PP
Get the delta\&. 
.PP
Definition at line 108 of file max_pooling\&.hpp\&.
.SS "template<typename InputDataType  = arma::mat, typename OutputDataType  = arma::mat> OutputDataType& \fBmlpack::ann::MaxPooling\fP< InputDataType, OutputDataType >::Delta ()\fC [inline]\fP"

.PP
Modify the delta\&. 
.PP
Definition at line 110 of file max_pooling\&.hpp\&.
.SS "template<typename InputDataType  = arma::mat, typename OutputDataType  = arma::mat> bool \fBmlpack::ann::MaxPooling\fP< InputDataType, OutputDataType >::Deterministic () const\fC [inline]\fP"

.PP
Get the value of the deterministic parameter\&. 
.PP
Definition at line 133 of file max_pooling\&.hpp\&.
.SS "template<typename InputDataType  = arma::mat, typename OutputDataType  = arma::mat> bool& \fBmlpack::ann::MaxPooling\fP< InputDataType, OutputDataType >::Deterministic ()\fC [inline]\fP"

.PP
Modify the value of the deterministic parameter\&. 
.PP
Definition at line 135 of file max_pooling\&.hpp\&.
.SS "template<typename InputDataType  = arma::mat, typename OutputDataType  = arma::mat> template<typename eT > void \fBmlpack::ann::MaxPooling\fP< InputDataType, OutputDataType >::Forward (const arma::Mat< eT > && input, arma::Mat< eT > && output)"

.PP
Ordinary feed forward pass of a neural network, evaluating the function f(x) by propagating the activity forward through f\&. 
.PP
\fBParameters:\fP
.RS 4
\fIinput\fP Input data used for evaluating the specified function\&. 
.br
\fIoutput\fP Resulting output activation\&. 
.RE
.PP

.SS "template<typename InputDataType  = arma::mat, typename OutputDataType  = arma::mat> size_t const& \fBmlpack::ann::MaxPooling\fP< InputDataType, OutputDataType >::InputHeight () const\fC [inline]\fP"

.PP
Get the height\&. 
.PP
Definition at line 118 of file max_pooling\&.hpp\&.
.SS "template<typename InputDataType  = arma::mat, typename OutputDataType  = arma::mat> size_t& \fBmlpack::ann::MaxPooling\fP< InputDataType, OutputDataType >::InputHeight ()\fC [inline]\fP"

.PP
Modify the height\&. 
.PP
Definition at line 120 of file max_pooling\&.hpp\&.
.SS "template<typename InputDataType  = arma::mat, typename OutputDataType  = arma::mat> InputDataType const& \fBmlpack::ann::MaxPooling\fP< InputDataType, OutputDataType >::InputParameter () const\fC [inline]\fP"

.PP
Get the input parameter\&. 
.PP
Definition at line 98 of file max_pooling\&.hpp\&.
.SS "template<typename InputDataType  = arma::mat, typename OutputDataType  = arma::mat> InputDataType& \fBmlpack::ann::MaxPooling\fP< InputDataType, OutputDataType >::InputParameter ()\fC [inline]\fP"

.PP
Modify the input parameter\&. 
.PP
Definition at line 100 of file max_pooling\&.hpp\&.
.SS "template<typename InputDataType  = arma::mat, typename OutputDataType  = arma::mat> size_t const& \fBmlpack::ann::MaxPooling\fP< InputDataType, OutputDataType >::InputWidth () const\fC [inline]\fP"

.PP
Get the width\&. 
.PP
Definition at line 113 of file max_pooling\&.hpp\&.
.SS "template<typename InputDataType  = arma::mat, typename OutputDataType  = arma::mat> size_t& \fBmlpack::ann::MaxPooling\fP< InputDataType, OutputDataType >::InputWidth ()\fC [inline]\fP"

.PP
Modify the width\&. 
.PP
Definition at line 115 of file max_pooling\&.hpp\&.
.SS "template<typename InputDataType  = arma::mat, typename OutputDataType  = arma::mat> size_t const& \fBmlpack::ann::MaxPooling\fP< InputDataType, OutputDataType >::OutputHeight () const\fC [inline]\fP"

.PP
Get the height\&. 
.PP
Definition at line 128 of file max_pooling\&.hpp\&.
.SS "template<typename InputDataType  = arma::mat, typename OutputDataType  = arma::mat> size_t& \fBmlpack::ann::MaxPooling\fP< InputDataType, OutputDataType >::OutputHeight ()\fC [inline]\fP"

.PP
Modify the height\&. 
.PP
Definition at line 130 of file max_pooling\&.hpp\&.
.SS "template<typename InputDataType  = arma::mat, typename OutputDataType  = arma::mat> OutputDataType const& \fBmlpack::ann::MaxPooling\fP< InputDataType, OutputDataType >::OutputParameter () const\fC [inline]\fP"

.PP
Get the output parameter\&. 
.PP
Definition at line 103 of file max_pooling\&.hpp\&.
.SS "template<typename InputDataType  = arma::mat, typename OutputDataType  = arma::mat> OutputDataType& \fBmlpack::ann::MaxPooling\fP< InputDataType, OutputDataType >::OutputParameter ()\fC [inline]\fP"

.PP
Modify the output parameter\&. 
.PP
Definition at line 105 of file max_pooling\&.hpp\&.
.SS "template<typename InputDataType  = arma::mat, typename OutputDataType  = arma::mat> size_t const& \fBmlpack::ann::MaxPooling\fP< InputDataType, OutputDataType >::OutputWidth () const\fC [inline]\fP"

.PP
Get the width\&. 
.PP
Definition at line 123 of file max_pooling\&.hpp\&.
.SS "template<typename InputDataType  = arma::mat, typename OutputDataType  = arma::mat> size_t& \fBmlpack::ann::MaxPooling\fP< InputDataType, OutputDataType >::OutputWidth ()\fC [inline]\fP"

.PP
Modify the width\&. 
.PP
Definition at line 125 of file max_pooling\&.hpp\&.
.SS "template<typename InputDataType  = arma::mat, typename OutputDataType  = arma::mat> template<typename eT > void \fBmlpack::ann::MaxPooling\fP< InputDataType, OutputDataType >::PoolingOperation (const arma::Mat< eT > & input, arma::Mat< eT > & output, arma::Mat< eT > & poolingIndices)\fC [inline]\fP, \fC [private]\fP"

.PP
Apply pooling to the input and store the results\&. 
.PP
\fBParameters:\fP
.RS 4
\fIinput\fP The input to be apply the pooling rule\&. 
.br
\fIoutput\fP The pooled result\&. 
.br
\fIpoolingIndices\fP The pooled indices\&. 
.RE
.PP

.PP
Definition at line 153 of file max_pooling\&.hpp\&.
.SS "template<typename InputDataType  = arma::mat, typename OutputDataType  = arma::mat> template<typename Archive > void \fBmlpack::ann::MaxPooling\fP< InputDataType, OutputDataType >::Serialize (Archive & ar, const unsigned int)"

.PP
Serialize the layer\&. 
.SS "template<typename InputDataType  = arma::mat, typename OutputDataType  = arma::mat> template<typename eT > void \fBmlpack::ann::MaxPooling\fP< InputDataType, OutputDataType >::Unpooling (const arma::Mat< eT > & error, arma::Mat< eT > & output, arma::Mat< eT > & poolingIndices)\fC [inline]\fP, \fC [private]\fP"

.PP
Apply unpooling to the input and store the results\&. 
.PP
\fBParameters:\fP
.RS 4
\fIerror\fP The backward error\&. 
.br
\fIoutput\fP The pooled result\&. 
.br
\fIpoolingIndices\fP The pooled indices\&. 
.RE
.PP

.PP
Definition at line 187 of file max_pooling\&.hpp\&.
.SH "Member Data Documentation"
.PP 
.SS "template<typename InputDataType  = arma::mat, typename OutputDataType  = arma::mat> OutputDataType \fBmlpack::ann::MaxPooling\fP< InputDataType, OutputDataType >::delta\fC [private]\fP"

.PP
Locally-stored delta object\&. 
.PP
Definition at line 252 of file max_pooling\&.hpp\&.
.SS "template<typename InputDataType  = arma::mat, typename OutputDataType  = arma::mat> bool \fBmlpack::ann::MaxPooling\fP< InputDataType, OutputDataType >::deterministic\fC [private]\fP"

.PP
If true use maximum a posteriori during the forward pass\&. 
.PP
Definition at line 237 of file max_pooling\&.hpp\&.
.SS "template<typename InputDataType  = arma::mat, typename OutputDataType  = arma::mat> size_t \fBmlpack::ann::MaxPooling\fP< InputDataType, OutputDataType >::dH\fC [private]\fP"

.PP
Locally-stored height of the stride operation\&. 
.PP
Definition at line 213 of file max_pooling\&.hpp\&.
.SS "template<typename InputDataType  = arma::mat, typename OutputDataType  = arma::mat> size_t \fBmlpack::ann::MaxPooling\fP< InputDataType, OutputDataType >::dW\fC [private]\fP"

.PP
Locally-stored width of the stride operation\&. 
.PP
Definition at line 210 of file max_pooling\&.hpp\&.
.SS "template<typename InputDataType  = arma::mat, typename OutputDataType  = arma::mat> bool \fBmlpack::ann::MaxPooling\fP< InputDataType, OutputDataType >::floor\fC [private]\fP"

.PP
Rounding operation used\&. 
.PP
Definition at line 219 of file max_pooling\&.hpp\&.
.SS "template<typename InputDataType  = arma::mat, typename OutputDataType  = arma::mat> OutputDataType \fBmlpack::ann::MaxPooling\fP< InputDataType, OutputDataType >::gradient\fC [private]\fP"

.PP
Locally-stored gradient object\&. 
.PP
Definition at line 255 of file max_pooling\&.hpp\&.
.SS "template<typename InputDataType  = arma::mat, typename OutputDataType  = arma::mat> arma::cube \fBmlpack::ann::MaxPooling\fP< InputDataType, OutputDataType >::gTemp\fC [private]\fP"

.PP
Locally-stored transformed output parameter\&. 
.PP
Definition at line 246 of file max_pooling\&.hpp\&.
.SS "template<typename InputDataType  = arma::mat, typename OutputDataType  = arma::mat> arma::Mat<size_t> \fBmlpack::ann::MaxPooling\fP< InputDataType, OutputDataType >::indices\fC [private]\fP"

.PP
Locally-stored indices matrix parameter\&. 
.PP
Definition at line 264 of file max_pooling\&.hpp\&.
.SS "template<typename InputDataType  = arma::mat, typename OutputDataType  = arma::mat> arma::Col<size_t> \fBmlpack::ann::MaxPooling\fP< InputDataType, OutputDataType >::indicesCol\fC [private]\fP"

.PP
Locally-stored indices column parameter\&. 
.PP
Definition at line 267 of file max_pooling\&.hpp\&.
.SS "template<typename InputDataType  = arma::mat, typename OutputDataType  = arma::mat> size_t \fBmlpack::ann::MaxPooling\fP< InputDataType, OutputDataType >::inputHeight\fC [private]\fP"

.PP
Locally-stored input height\&. 
.PP
Definition at line 228 of file max_pooling\&.hpp\&.
.SS "template<typename InputDataType  = arma::mat, typename OutputDataType  = arma::mat> InputDataType \fBmlpack::ann::MaxPooling\fP< InputDataType, OutputDataType >::inputParameter\fC [private]\fP"

.PP
Locally-stored input parameter object\&. 
.PP
Definition at line 258 of file max_pooling\&.hpp\&.
.SS "template<typename InputDataType  = arma::mat, typename OutputDataType  = arma::mat> arma::cube \fBmlpack::ann::MaxPooling\fP< InputDataType, OutputDataType >::inputTemp\fC [private]\fP"

.PP
Locally-stored transformed input parameter\&. 
.PP
Definition at line 243 of file max_pooling\&.hpp\&.
.SS "template<typename InputDataType  = arma::mat, typename OutputDataType  = arma::mat> size_t \fBmlpack::ann::MaxPooling\fP< InputDataType, OutputDataType >::inputWidth\fC [private]\fP"

.PP
Locally-stored input width\&. 
.PP
Definition at line 225 of file max_pooling\&.hpp\&.
.SS "template<typename InputDataType  = arma::mat, typename OutputDataType  = arma::mat> size_t \fBmlpack::ann::MaxPooling\fP< InputDataType, OutputDataType >::inSize\fC [private]\fP"

.PP
Locally-stored number of input units\&. 
.PP
Definition at line 198 of file max_pooling\&.hpp\&.
.SS "template<typename InputDataType  = arma::mat, typename OutputDataType  = arma::mat> size_t \fBmlpack::ann::MaxPooling\fP< InputDataType, OutputDataType >::kH\fC [private]\fP"

.PP
Locally-stored height of the pooling window\&. 
.PP
Definition at line 207 of file max_pooling\&.hpp\&.
.SS "template<typename InputDataType  = arma::mat, typename OutputDataType  = arma::mat> size_t \fBmlpack::ann::MaxPooling\fP< InputDataType, OutputDataType >::kW\fC [private]\fP"

.PP
Locally-stored width of the pooling window\&. 
.PP
Definition at line 204 of file max_pooling\&.hpp\&.
.SS "template<typename InputDataType  = arma::mat, typename OutputDataType  = arma::mat> size_t \fBmlpack::ann::MaxPooling\fP< InputDataType, OutputDataType >::offset\fC [private]\fP"

.PP
Locally-stored stored rounding offset\&. 
.PP
Definition at line 222 of file max_pooling\&.hpp\&.
.SS "template<typename InputDataType  = arma::mat, typename OutputDataType  = arma::mat> size_t \fBmlpack::ann::MaxPooling\fP< InputDataType, OutputDataType >::outputHeight\fC [private]\fP"

.PP
Locally-stored output height\&. 
.PP
Definition at line 234 of file max_pooling\&.hpp\&.
.SS "template<typename InputDataType  = arma::mat, typename OutputDataType  = arma::mat> OutputDataType \fBmlpack::ann::MaxPooling\fP< InputDataType, OutputDataType >::outputParameter\fC [private]\fP"

.PP
Locally-stored output parameter object\&. 
.PP
Definition at line 261 of file max_pooling\&.hpp\&.
.SS "template<typename InputDataType  = arma::mat, typename OutputDataType  = arma::mat> arma::cube \fBmlpack::ann::MaxPooling\fP< InputDataType, OutputDataType >::outputTemp\fC [private]\fP"

.PP
Locally-stored output parameter\&. 
.PP
Definition at line 240 of file max_pooling\&.hpp\&.
.SS "template<typename InputDataType  = arma::mat, typename OutputDataType  = arma::mat> size_t \fBmlpack::ann::MaxPooling\fP< InputDataType, OutputDataType >::outputWidth\fC [private]\fP"

.PP
Locally-stored output width\&. 
.PP
Definition at line 231 of file max_pooling\&.hpp\&.
.SS "template<typename InputDataType  = arma::mat, typename OutputDataType  = arma::mat> size_t \fBmlpack::ann::MaxPooling\fP< InputDataType, OutputDataType >::outSize\fC [private]\fP"

.PP
Locally-stored number of output units\&. 
.PP
Definition at line 201 of file max_pooling\&.hpp\&.
.SS "template<typename InputDataType  = arma::mat, typename OutputDataType  = arma::mat> \fBMaxPoolingRule\fP \fBmlpack::ann::MaxPooling\fP< InputDataType, OutputDataType >::pooling\fC [private]\fP"

.PP
Locally-stored pooling strategy\&. 
.PP
Definition at line 249 of file max_pooling\&.hpp\&.
.SS "template<typename InputDataType  = arma::mat, typename OutputDataType  = arma::mat> std::vector<arma::cube> \fBmlpack::ann::MaxPooling\fP< InputDataType, OutputDataType >::poolingIndices\fC [private]\fP"

.PP
Locally-stored pooling indicies\&. 
.PP
Definition at line 270 of file max_pooling\&.hpp\&.
.SS "template<typename InputDataType  = arma::mat, typename OutputDataType  = arma::mat> bool \fBmlpack::ann::MaxPooling\fP< InputDataType, OutputDataType >::reset\fC [private]\fP"

.PP
Locally-stored reset parameter used to initialize the module once\&. 
.PP
Definition at line 216 of file max_pooling\&.hpp\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for mlpack from the source code\&.
