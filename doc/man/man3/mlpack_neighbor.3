.TH "mlpack::neighbor" 3 "Sat Mar 25 2017" "Version master" "mlpack" \" -*- nroff -*-
.ad l
.nh
.SH NAME
mlpack::neighbor \- Neighbor-search routines\&.  

.SH SYNOPSIS
.br
.PP
.SS "Classes"

.in +1c
.ti -1c
.RI "class \fBBiSearchVisitor\fP"
.br
.RI "\fI\fBBiSearchVisitor\fP executes a bichromatic neighbor search on the given NSType\&. \fP"
.ti -1c
.RI "class \fBDeleteVisitor\fP"
.br
.RI "\fI\fBDeleteVisitor\fP deletes the given NSType instance\&. \fP"
.ti -1c
.RI "class \fBDrusillaSelect\fP"
.br
.ti -1c
.RI "class \fBEpsilonVisitor\fP"
.br
.RI "\fI\fBEpsilonVisitor\fP exposes the Epsilon method of the given NSType\&. \fP"
.ti -1c
.RI "class \fBFurthestNeighborSort\fP"
.br
.RI "\fIThis class implements the necessary methods for the SortPolicy template parameter of the \fBNeighborSearch\fP class\&. \fP"
.ti -1c
.RI "class \fBLSHSearch\fP"
.br
.RI "\fIThe \fBLSHSearch\fP class; this class builds a hash on the reference set and uses this hash to compute the distance-approximate nearest-neighbors of the given queries\&. \fP"
.ti -1c
.RI "class \fBMonoSearchVisitor\fP"
.br
.RI "\fI\fBMonoSearchVisitor\fP executes a monochromatic neighbor search on the given NSType\&. \fP"
.ti -1c
.RI "class \fBNearestNeighborSort\fP"
.br
.RI "\fIThis class implements the necessary methods for the SortPolicy template parameter of the \fBNeighborSearch\fP class\&. \fP"
.ti -1c
.RI "class \fBNeighborSearch\fP"
.br
.RI "\fIThe \fBNeighborSearch\fP class is a template class for performing distance-based neighbor searches\&. \fP"
.ti -1c
.RI "class \fBNeighborSearchRules\fP"
.br
.RI "\fIThe \fBNeighborSearchRules\fP class is a template helper class used by \fBNeighborSearch\fP class when performing distance-based neighbor searches\&. \fP"
.ti -1c
.RI "class \fBNeighborSearchStat\fP"
.br
.RI "\fIExtra data for each node in the tree\&. \fP"
.ti -1c
.RI "class \fBNSModel\fP"
.br
.RI "\fIThe \fBNSModel\fP class provides an easy way to serialize a model, abstracts away the different types of trees, and also reflects the \fBNeighborSearch\fP API\&. \fP"
.ti -1c
.RI "struct \fBNSModelName\fP"
.br
.ti -1c
.RI "struct \fBNSModelName< FurthestNeighborSort >\fP"
.br
.ti -1c
.RI "struct \fBNSModelName< NearestNeighborSort >\fP"
.br
.ti -1c
.RI "class \fBQDAFN\fP"
.br
.ti -1c
.RI "class \fBRAModel\fP"
.br
.RI "\fIThe \fBRAModel\fP class provides an abstraction for the \fBRASearch\fP class, abstracting away the TreeType parameter and allowing it to be specified at runtime in this class\&. \fP"
.ti -1c
.RI "class \fBRAQueryStat\fP"
.br
.RI "\fIExtra data for each node in the tree\&. \fP"
.ti -1c
.RI "class \fBRASearch\fP"
.br
.RI "\fIThe \fBRASearch\fP class: This class provides a generic manner to perform rank-approximate search via random-sampling\&. \fP"
.ti -1c
.RI "class \fBRASearchRules\fP"
.br
.RI "\fIThe \fBRASearchRules\fP class is a template helper class used by \fBRASearch\fP class when performing rank-approximate search via random-sampling\&. \fP"
.ti -1c
.RI "class \fBRAUtil\fP"
.br
.ti -1c
.RI "class \fBReferenceSetVisitor\fP"
.br
.RI "\fI\fBReferenceSetVisitor\fP exposes the referenceSet of the given NSType\&. \fP"
.ti -1c
.RI "class \fBSearchModeVisitor\fP"
.br
.RI "\fI\fBSearchModeVisitor\fP exposes the SearchMode() method of the given NSType\&. \fP"
.ti -1c
.RI "class \fBTrainVisitor\fP"
.br
.RI "\fI\fBTrainVisitor\fP sets the reference set to a new reference set on the given NSType\&. \fP"
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef \fBNeighborSearch\fP< \fBFurthestNeighborSort\fP, \fBmetric::EuclideanDistance\fP > \fBAllkFN\fP"
.br
.ti -1c
.RI "typedef \fBNeighborSearch\fP< \fBNearestNeighborSort\fP, \fBmetric::EuclideanDistance\fP > \fBAllkNN\fP"
.br
.ti -1c
.RI "typedef \fBRASearch\fP \fBAllkRAFN\fP"
.br
.ti -1c
.RI "typedef \fBRASearch\fP \fBAllkRANN\fP"
.br
.ti -1c
.RI "template<template< typename TreeMetricType, typename TreeStatType, typename TreeMatType > class TreeType = tree::SPTree> using \fBDefeatistKNN\fP = \fBNeighborSearch\fP< \fBNearestNeighborSort\fP, \fBmetric::EuclideanDistance\fP, arma::mat, TreeType, TreeType< \fBmetric::EuclideanDistance\fP, \fBNeighborSearchStat\fP< \fBNearestNeighborSort\fP >, arma::mat >::template DefeatistDualTreeTraverser, TreeType< \fBmetric::EuclideanDistance\fP, \fBNeighborSearchStat\fP< \fBNearestNeighborSort\fP >, arma::mat >::template DefeatistSingleTreeTraverser >"
.br
.RI "\fIThe DefeatistKNN class is the k-nearest-neighbors method considering defeatist search\&. \fP"
.ti -1c
.RI "typedef \fBNeighborSearch\fP< \fBFurthestNeighborSort\fP, \fBmetric::EuclideanDistance\fP > \fBKFN\fP"
.br
.RI "\fIThe KFN class is the k-furthest-neighbors method\&. \fP"
.ti -1c
.RI "typedef \fBNeighborSearch\fP< \fBNearestNeighborSort\fP, \fBmetric::EuclideanDistance\fP > \fBKNN\fP"
.br
.RI "\fIThe KNN class is the k-nearest-neighbors method\&. \fP"
.ti -1c
.RI "typedef \fBRASearch\fP< \fBFurthestNeighborSort\fP > \fBKRAFN\fP"
.br
.RI "\fIThe KRAFN class is the k-rank-approximate-farthest-neighbors method\&. \fP"
.ti -1c
.RI "typedef \fBRASearch\fP \fBKRANN\fP"
.br
.RI "\fIThe KRANN class is the k-rank-approximate-nearest-neighbors method\&. \fP"
.ti -1c
.RI "template<typename SortPolicy , template< typename TreeMetricType, typename TreeStatType, typename TreeMatType > class TreeType> using \fBNSType\fP = \fBNeighborSearch\fP< SortPolicy, \fBmetric::EuclideanDistance\fP, arma::mat, TreeType, TreeType< \fBmetric::EuclideanDistance\fP, \fBNeighborSearchStat\fP< SortPolicy >, arma::mat >::template DualTreeTraverser >"
.br
.RI "\fIAlias template for euclidean neighbor search\&. \fP"
.ti -1c
.RI "typedef \fBDefeatistKNN\fP< \fBtree::SPTree\fP > \fBSpillKNN\fP"
.br
.RI "\fIThe SpillKNN class is the k-nearest-neighbors method considering defeatist search on SPTree\&. \fP"
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum \fBNeighborSearchMode\fP { \fBNAIVE_MODE\fP, \fBSINGLE_TREE_MODE\fP, \fBDUAL_TREE_MODE\fP, \fBGREEDY_SINGLE_TREE_MODE\fP }
.RI "\fINeighborSearchMode represents the different neighbor search modes available\&. \fP""
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBUnmap\fP (const arma::Mat< size_t > &neighbors, const arma::mat &distances, const std::vector< size_t > &referenceMap, const std::vector< size_t > &queryMap, arma::Mat< size_t > &neighborsOut, arma::mat &distancesOut, const bool squareRoot=false)"
.br
.RI "\fIAssuming that the datasets have been mapped using the referenceMap and the queryMap (such as during kd-tree construction), unmap the columns of the distances and neighbors matrices into neighborsOut and distancesOut, and also unmap the entries in each row of neighbors\&. \fP"
.ti -1c
.RI "void \fBUnmap\fP (const arma::Mat< size_t > &neighbors, const arma::mat &distances, const std::vector< size_t > &referenceMap, arma::Mat< size_t > &neighborsOut, arma::mat &distancesOut, const bool squareRoot=false)"
.br
.RI "\fIAssuming that the datasets have been mapped using referenceMap (such as during kd-tree construction), unmap the columns of the distances and neighbors matrices into neighborsOut and distancesOut, and also unmap the entries in each row of neighbors\&. \fP"
.in -1c
.SH "Detailed Description"
.PP 
Neighbor-search routines\&. 

These include all-nearest-neighbors and all-furthest-neighbors searches\&. 
.SH "Typedef Documentation"
.PP 
.SS "typedef \fBNeighborSearch\fP<\fBFurthestNeighborSort\fP, \fBmetric::EuclideanDistance\fP> \fBmlpack::neighbor::AllkFN\fP"
It returns L2 distances (Euclidean distances) for each of the k furthest neighbors\&. This typedef will be removed in mlpack 3\&.0\&.0; use the KFN typedef instead\&. 
.PP
Definition at line 83 of file typedef\&.hpp\&.
.SS "typedef \fBNeighborSearch\fP<\fBNearestNeighborSort\fP, \fBmetric::EuclideanDistance\fP> \fBmlpack::neighbor::AllkNN\fP"
It returns L2 distances (Euclidean distances) for each of the k nearest neighbors\&. This typedef will be removed in mlpack 3\&.0\&.0; use the KNN typedef instead\&. 
.PP
Definition at line 75 of file typedef\&.hpp\&.
.SS "typedef \fBRASearch\fP \fBmlpack::neighbor::AllkRAFN\fP"
It returns L2 distances for each of the k rank-approximate farthest-neighbors\&.
.PP
The approximation is controlled with two parameters (see allkrann_main\&.cpp) which can be specified at search time\&. So the tree building is done only once while the search can be performed multiple times with different approximation levels\&.
.PP
This typedef will be removed in mlpack 3\&.0\&.0; use the KRANN typedef instead\&. 
.PP
Definition at line 76 of file ra_typedef\&.hpp\&.
.SS "typedef \fBRASearch\fP \fBmlpack::neighbor::AllkRANN\fP"
It returns L2 distances for each of the k rank-approximate nearest-neighbors\&.
.PP
The approximation is controlled with two parameters (see allkrann_main\&.cpp) which can be specified at search time\&. So the tree building is done only once while the search can be performed multiple times with different approximation levels\&.
.PP
This typedef will be removed in mlpack 3\&.0\&.0; use the KRANN typedef instead\&. 
.PP
Definition at line 61 of file ra_typedef\&.hpp\&.
.SS "template<template< typename TreeMetricType, typename TreeStatType, typename TreeMatType > class TreeType = tree::SPTree> using \fBmlpack::neighbor::DefeatistKNN\fP = typedef \fBNeighborSearch\fP< \fBNearestNeighborSort\fP, \fBmetric::EuclideanDistance\fP, arma::mat, TreeType, TreeType<\fBmetric::EuclideanDistance\fP, \fBNeighborSearchStat\fP<\fBNearestNeighborSort\fP>, arma::mat>::template DefeatistDualTreeTraverser, TreeType<\fBmetric::EuclideanDistance\fP, \fBNeighborSearchStat\fP<\fBNearestNeighborSort\fP>, arma::mat>::template DefeatistSingleTreeTraverser>"

.PP
The DefeatistKNN class is the k-nearest-neighbors method considering defeatist search\&. It returns L2 distances (Euclidean distances) for each of the k nearest neighbors found\&. 
.PP
\fBTemplate Parameters:\fP
.RS 4
\fITreeType\fP The tree type to use; must adhere to the TreeType API, and implement Defeatist Traversers\&. 
.RE
.PP

.PP
Definition at line 60 of file typedef\&.hpp\&.
.SS "typedef \fBNeighborSearch\fP<\fBFurthestNeighborSort\fP, \fBmetric::EuclideanDistance\fP> \fBmlpack::neighbor::KFN\fP"

.PP
The KFN class is the k-furthest-neighbors method\&. It returns L2 distances (Euclidean distances) for each of the k furthest neighbors\&. 
.PP
Definition at line 38 of file typedef\&.hpp\&.
.SS "typedef \fBNeighborSearch\fP<\fBNearestNeighborSort\fP, \fBmetric::EuclideanDistance\fP> \fBmlpack::neighbor::KNN\fP"

.PP
The KNN class is the k-nearest-neighbors method\&. It returns L2 distances (Euclidean distances) for each of the k nearest neighbors\&. 
.PP
Definition at line 32 of file typedef\&.hpp\&.
.SS "typedef \fBRASearch\fP<\fBFurthestNeighborSort\fP> \fBmlpack::neighbor::KRAFN\fP"

.PP
The KRAFN class is the k-rank-approximate-farthest-neighbors method\&. It returns L2 distances for each of the k rank-approximate farthest-neighbors\&.
.PP
The approximation is controlled with two parameters (see allkrann_main\&.cpp) which can be specified at search time\&. So the tree building is done only once while the search can be performed multiple times with different approximation levels\&. 
.PP
Definition at line 47 of file ra_typedef\&.hpp\&.
.SS "typedef \fBRASearch\fP \fBmlpack::neighbor::KRANN\fP"

.PP
The KRANN class is the k-rank-approximate-nearest-neighbors method\&. It returns L2 distances for each of the k rank-approximate nearest-neighbors\&.
.PP
The approximation is controlled with two parameters (see allkrann_main\&.cpp) which can be specified at search time\&. So the tree building is done only once while the search can be performed multiple times with different approximation levels\&. 
.PP
Definition at line 36 of file ra_typedef\&.hpp\&.
.SS "template<typename SortPolicy , template< typename TreeMetricType, typename TreeStatType, typename TreeMatType > class TreeType> using \fBmlpack::neighbor::NSType\fP = typedef \fBNeighborSearch\fP<SortPolicy, \fBmetric::EuclideanDistance\fP, arma::mat, TreeType, TreeType<\fBmetric::EuclideanDistance\fP, \fBNeighborSearchStat\fP<SortPolicy>, arma::mat>::template DualTreeTraverser>"

.PP
Alias template for euclidean neighbor search\&. 
.PP
Definition at line 42 of file ns_model\&.hpp\&.
.SS "typedef \fBDefeatistKNN\fP<\fBtree::SPTree\fP> \fBmlpack::neighbor::SpillKNN\fP"

.PP
The SpillKNN class is the k-nearest-neighbors method considering defeatist search on SPTree\&. It returns L2 distances (Euclidean distances) for each of the k nearest neighbors found\&. 
.PP
Definition at line 67 of file typedef\&.hpp\&.
.SH "Enumeration Type Documentation"
.PP 
.SS "enum \fBmlpack::neighbor::NeighborSearchMode\fP"

.PP
NeighborSearchMode represents the different neighbor search modes available\&. 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fINAIVE_MODE \fP\fP
.TP
\fB\fISINGLE_TREE_MODE \fP\fP
.TP
\fB\fIDUAL_TREE_MODE \fP\fP
.TP
\fB\fIGREEDY_SINGLE_TREE_MODE \fP\fP
.PP
Definition at line 38 of file neighbor_search\&.hpp\&.
.SH "Function Documentation"
.PP 
.SS "void mlpack::neighbor::Unmap (const arma::Mat< size_t > & neighbors, const arma::mat & distances, const std::vector< size_t > & referenceMap, const std::vector< size_t > & queryMap, arma::Mat< size_t > & neighborsOut, arma::mat & distancesOut, const bool squareRoot = \fCfalse\fP)"

.PP
Assuming that the datasets have been mapped using the referenceMap and the queryMap (such as during kd-tree construction), unmap the columns of the distances and neighbors matrices into neighborsOut and distancesOut, and also unmap the entries in each row of neighbors\&. This is useful for the dual-tree case\&.
.PP
\fBParameters:\fP
.RS 4
\fIneighbors\fP Matrix of neighbors resulting from neighbor search\&. 
.br
\fIdistances\fP Matrix of distances resulting from neighbor search\&. 
.br
\fIreferenceMap\fP Mapping of reference set to old points\&. 
.br
\fIqueryMap\fP Mapping of query set to old points\&. 
.br
\fIneighborsOut\fP Matrix to store unmapped neighbors into\&. 
.br
\fIdistancesOut\fP Matrix to store unmapped distances into\&. 
.br
\fIsquareRoot\fP If true, take the square root of the distances\&. 
.RE
.PP

.SS "void mlpack::neighbor::Unmap (const arma::Mat< size_t > & neighbors, const arma::mat & distances, const std::vector< size_t > & referenceMap, arma::Mat< size_t > & neighborsOut, arma::mat & distancesOut, const bool squareRoot = \fCfalse\fP)"

.PP
Assuming that the datasets have been mapped using referenceMap (such as during kd-tree construction), unmap the columns of the distances and neighbors matrices into neighborsOut and distancesOut, and also unmap the entries in each row of neighbors\&. This is useful for the single-tree case\&.
.PP
\fBParameters:\fP
.RS 4
\fIneighbors\fP Matrix of neighbors resulting from neighbor search\&. 
.br
\fIdistances\fP Matrix of distances resulting from neighbor search\&. 
.br
\fIreferenceMap\fP Mapping of reference set to old points\&. 
.br
\fIneighborsOut\fP Matrix to store unmapped neighbors into\&. 
.br
\fIdistancesOut\fP Matrix to store unmapped distances into\&. 
.br
\fIsquareRoot\fP If true, take the square root of the distances\&. 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for mlpack from the source code\&.
