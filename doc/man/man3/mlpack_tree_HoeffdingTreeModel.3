.TH "mlpack::tree::HoeffdingTreeModel" 3 "Sat Mar 25 2017" "Version master" "mlpack" \" -*- nroff -*-
.ad l
.nh
.SH NAME
mlpack::tree::HoeffdingTreeModel \- This class is a serializable Hoeffding tree model that can hold four different types of Hoeffding trees\&.  

.SH SYNOPSIS
.br
.PP
.SS "Public Types"

.in +1c
.ti -1c
.RI "typedef \fBHoeffdingTree\fP< \fBGiniImpurity\fP, \fBBinaryDoubleNumericSplit\fP, \fBHoeffdingCategoricalSplit\fP > \fBGiniBinaryTreeType\fP"
.br
.RI "\fIConvenience typedef for GINI_BINARY tree type\&. \fP"
.ti -1c
.RI "typedef \fBHoeffdingTree\fP< \fBGiniImpurity\fP, \fBHoeffdingDoubleNumericSplit\fP, \fBHoeffdingCategoricalSplit\fP > \fBGiniHoeffdingTreeType\fP"
.br
.RI "\fIConvenience typedef for GINI_HOEFFDING tree type\&. \fP"
.ti -1c
.RI "typedef \fBHoeffdingTree\fP< \fBInformationGain\fP, \fBBinaryDoubleNumericSplit\fP, \fBHoeffdingCategoricalSplit\fP > \fBInfoBinaryTreeType\fP"
.br
.RI "\fIConvenience typedef for INFO_BINARY tree type\&. \fP"
.ti -1c
.RI "typedef \fBHoeffdingTree\fP< \fBInformationGain\fP, \fBHoeffdingDoubleNumericSplit\fP, \fBHoeffdingCategoricalSplit\fP > \fBInfoHoeffdingTreeType\fP"
.br
.RI "\fIConvenience typedef for INFO_HOEFFDING tree type\&. \fP"
.ti -1c
.RI "enum \fBTreeType\fP { \fBGINI_HOEFFDING\fP, \fBGINI_BINARY\fP, \fBINFO_HOEFFDING\fP, \fBINFO_BINARY\fP }
.RI "\fIThis enumerates the four types of trees we can hold\&. \fP""
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBHoeffdingTreeModel\fP (const \fBTreeType\fP &\fBtype\fP=\fBGINI_HOEFFDING\fP)"
.br
.RI "\fIConstruct the Hoeffding tree model, but don't initialize any tree\&. \fP"
.ti -1c
.RI "\fBHoeffdingTreeModel\fP (const \fBHoeffdingTreeModel\fP &other)"
.br
.RI "\fICopy the Hoeffding tree model from the given other model\&. \fP"
.ti -1c
.RI "\fBHoeffdingTreeModel\fP (\fBHoeffdingTreeModel\fP &&other)"
.br
.RI "\fIMove the Hoeffding tree model from the given other model\&. \fP"
.ti -1c
.RI "\fB~HoeffdingTreeModel\fP ()"
.br
.RI "\fIClean up the given model\&. \fP"
.ti -1c
.RI "void \fBBuildModel\fP (const arma::mat &dataset, const \fBdata::DatasetInfo\fP &datasetInfo, const arma::Row< size_t > &labels, const size_t numClasses, const bool batchTraining, const double successProbability, const size_t maxSamples, const size_t checkInterval, const size_t minSamples, const size_t bins, const size_t observationsBeforeBinning)"
.br
.RI "\fITrain the model on the given dataset with the given labels\&. \fP"
.ti -1c
.RI "void \fBClassify\fP (const arma::mat &dataset, arma::Row< size_t > &predictions) const "
.br
.RI "\fIUsing the model, classify the given test points\&. \fP"
.ti -1c
.RI "void \fBClassify\fP (const arma::mat &dataset, arma::Row< size_t > &predictions, arma::rowvec &probabilities) const "
.br
.RI "\fIUsing the model, classify the given test points, returning class probabilities\&. \fP"
.ti -1c
.RI "size_t \fBNumNodes\fP () const "
.br
.RI "\fIGet the number of nodes in the tree\&. \fP"
.ti -1c
.RI "\fBHoeffdingTreeModel\fP & \fBoperator=\fP (const \fBHoeffdingTreeModel\fP &other)"
.br
.RI "\fICopy the Hoeffding tree model from the given other model\&. \fP"
.ti -1c
.RI "\fBHoeffdingTreeModel\fP & \fBoperator=\fP (\fBHoeffdingTreeModel\fP &&other)"
.br
.RI "\fIMove the Hoeffding tree model from the given other model\&. \fP"
.ti -1c
.RI "template<typename Archive > void \fBSerialize\fP (Archive &ar, const unsigned int)"
.br
.RI "\fISerialize the model\&. \fP"
.ti -1c
.RI "void \fBTrain\fP (const arma::mat &dataset, const arma::Row< size_t > &labels, const bool batchTraining)"
.br
.RI "\fITrain in streaming mode on the given dataset\&. \fP"
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "\fBGiniBinaryTreeType\fP * \fBginiBinaryTree\fP"
.br
.RI "\fIThis is used if we are using the Gini impurity and the binary numeric split\&. \fP"
.ti -1c
.RI "\fBGiniHoeffdingTreeType\fP * \fBginiHoeffdingTree\fP"
.br
.RI "\fIThis is used if we are using the Gini impurity and the Hoeffding numeric split\&. \fP"
.ti -1c
.RI "\fBInfoBinaryTreeType\fP * \fBinfoBinaryTree\fP"
.br
.RI "\fIThis is used if we are using the information gain and the binary numeric split\&. \fP"
.ti -1c
.RI "\fBInfoHoeffdingTreeType\fP * \fBinfoHoeffdingTree\fP"
.br
.RI "\fIThis is used if we are using the information gain and the Hoeffding numeric split\&. \fP"
.ti -1c
.RI "\fBTreeType\fP \fBtype\fP"
.br
.RI "\fIThe type of tree we are using\&. \fP"
.in -1c
.SH "Detailed Description"
.PP 
This class is a serializable Hoeffding tree model that can hold four different types of Hoeffding trees\&. 

It is meant to be used by the command-line program for Hoeffding trees\&. 
.PP
Definition at line 22 of file hoeffding_tree_model\&.hpp\&.
.SH "Member Typedef Documentation"
.PP 
.SS "typedef \fBHoeffdingTree\fP<\fBGiniImpurity\fP, \fBBinaryDoubleNumericSplit\fP, \fBHoeffdingCategoricalSplit\fP> \fBmlpack::tree::HoeffdingTreeModel::GiniBinaryTreeType\fP"

.PP
Convenience typedef for GINI_BINARY tree type\&. 
.PP
Definition at line 39 of file hoeffding_tree_model\&.hpp\&.
.SS "typedef \fBHoeffdingTree\fP<\fBGiniImpurity\fP, \fBHoeffdingDoubleNumericSplit\fP, \fBHoeffdingCategoricalSplit\fP> \fBmlpack::tree::HoeffdingTreeModel::GiniHoeffdingTreeType\fP"

.PP
Convenience typedef for GINI_HOEFFDING tree type\&. 
.PP
Definition at line 36 of file hoeffding_tree_model\&.hpp\&.
.SS "typedef \fBHoeffdingTree\fP<\fBInformationGain\fP, \fBBinaryDoubleNumericSplit\fP, \fBHoeffdingCategoricalSplit\fP> \fBmlpack::tree::HoeffdingTreeModel::InfoBinaryTreeType\fP"

.PP
Convenience typedef for INFO_BINARY tree type\&. 
.PP
Definition at line 45 of file hoeffding_tree_model\&.hpp\&.
.SS "typedef \fBHoeffdingTree\fP<\fBInformationGain\fP, \fBHoeffdingDoubleNumericSplit\fP, \fBHoeffdingCategoricalSplit\fP> \fBmlpack::tree::HoeffdingTreeModel::InfoHoeffdingTreeType\fP"

.PP
Convenience typedef for INFO_HOEFFDING tree type\&. 
.PP
Definition at line 42 of file hoeffding_tree_model\&.hpp\&.
.SH "Member Enumeration Documentation"
.PP 
.SS "enum \fBmlpack::tree::HoeffdingTreeModel::TreeType\fP"

.PP
This enumerates the four types of trees we can hold\&. 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIGINI_HOEFFDING \fP\fP
.TP
\fB\fIGINI_BINARY \fP\fP
.TP
\fB\fIINFO_HOEFFDING \fP\fP
.TP
\fB\fIINFO_BINARY \fP\fP
.PP
Definition at line 26 of file hoeffding_tree_model\&.hpp\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "mlpack::tree::HoeffdingTreeModel::HoeffdingTreeModel (const \fBTreeType\fP & type = \fC\fBGINI_HOEFFDING\fP\fP)"

.PP
Construct the Hoeffding tree model, but don't initialize any tree\&. Be sure to call \fBTrain()\fP before doing anything with the model!
.PP
\fBParameters:\fP
.RS 4
\fItype\fP Type of tree that will be used\&. 
.RE
.PP

.SS "mlpack::tree::HoeffdingTreeModel::HoeffdingTreeModel (const \fBHoeffdingTreeModel\fP & other)"

.PP
Copy the Hoeffding tree model from the given other model\&. 
.PP
\fBParameters:\fP
.RS 4
\fIother\fP Hoeffding tree model to copy\&. 
.RE
.PP

.SS "mlpack::tree::HoeffdingTreeModel::HoeffdingTreeModel (\fBHoeffdingTreeModel\fP && other)"

.PP
Move the Hoeffding tree model from the given other model\&. 
.PP
\fBParameters:\fP
.RS 4
\fIother\fP Hoeffding tree model to move\&. 
.RE
.PP

.SS "mlpack::tree::HoeffdingTreeModel::~HoeffdingTreeModel ()"

.PP
Clean up the given model\&. 
.SH "Member Function Documentation"
.PP 
.SS "void mlpack::tree::HoeffdingTreeModel::BuildModel (const arma::mat & dataset, const \fBdata::DatasetInfo\fP & datasetInfo, const arma::Row< size_t > & labels, const size_t numClasses, const bool batchTraining, const double successProbability, const size_t maxSamples, const size_t checkInterval, const size_t minSamples, const size_t bins, const size_t observationsBeforeBinning)"

.PP
Train the model on the given dataset with the given labels\&. This method just passes to the appropriate HoeffdingTree<\&.\&.\&.> constructor, and will train with one pass over the dataset\&.
.PP
\fBParameters:\fP
.RS 4
\fIdataset\fP Dataset to train on\&. 
.br
\fIdatasetInfo\fP Information about dimensions of dataset\&. 
.br
\fIlabels\fP Labels for training set\&. 
.br
\fInumClasses\fP Number of classes in dataset\&. 
.br
\fIbatchTraining\fP Whether or not to train in batch\&. 
.br
\fIsuccessProbability\fP Probability of success required in Hoeffding bound before a split can happen\&. 
.br
\fImaxSamples\fP Maximum number of samples before a split is forced\&. 
.br
\fIcheckInterval\fP Number of samples required before each split check\&. 
.br
\fIminSamples\fP If the node has seen this many points or fewer, no split will be allowed\&. 
.br
\fIbins\fP Number of bins, for Hoeffding numeric split\&. 
.br
\fIobservationsBeforeBinning\fP Number of observations before binning, for Hoeffding numeric split\&. 
.RE
.PP

.SS "void mlpack::tree::HoeffdingTreeModel::Classify (const arma::mat & dataset, arma::Row< size_t > & predictions) const"

.PP
Using the model, classify the given test points\&. Be sure that \fBBuildModel()\fP has been called first!
.PP
\fBParameters:\fP
.RS 4
\fIdataset\fP Dataset to classify\&. 
.br
\fIpredictions\fP Vector to store predictions for test points in\&. 
.RE
.PP

.SS "void mlpack::tree::HoeffdingTreeModel::Classify (const arma::mat & dataset, arma::Row< size_t > & predictions, arma::rowvec & probabilities) const"

.PP
Using the model, classify the given test points, returning class probabilities\&. 
.PP
\fBParameters:\fP
.RS 4
\fIdataset\fP Dataset to classify\&. 
.br
\fIpredictions\fP Vector to store predictions for test points in\&. 
.br
\fIprobabilities\fP Vector to store probabilities for test points in\&. 
.RE
.PP

.SS "size_t mlpack::tree::HoeffdingTreeModel::NumNodes () const"

.PP
Get the number of nodes in the tree\&. 
.SS "\fBHoeffdingTreeModel\fP& mlpack::tree::HoeffdingTreeModel::operator= (const \fBHoeffdingTreeModel\fP & other)"

.PP
Copy the Hoeffding tree model from the given other model\&. 
.PP
\fBParameters:\fP
.RS 4
\fIother\fP Hoeffding tree model to copy\&. 
.RE
.PP

.SS "\fBHoeffdingTreeModel\fP& mlpack::tree::HoeffdingTreeModel::operator= (\fBHoeffdingTreeModel\fP && other)"

.PP
Move the Hoeffding tree model from the given other model\&. 
.PP
\fBParameters:\fP
.RS 4
\fIother\fP Hoeffding tree model to move\&. 
.RE
.PP

.SS "template<typename Archive > void mlpack::tree::HoeffdingTreeModel::Serialize (Archive & ar, const unsigned int)\fC [inline]\fP"

.PP
Serialize the model\&. 
.PP
Definition at line 164 of file hoeffding_tree_model\&.hpp\&.
.PP
References mlpack::data::CreateNVP(), GINI_BINARY, GINI_HOEFFDING, giniBinaryTree, giniHoeffdingTree, INFO_BINARY, INFO_HOEFFDING, infoBinaryTree, infoHoeffdingTree, and type\&.
.SS "void mlpack::tree::HoeffdingTreeModel::Train (const arma::mat & dataset, const arma::Row< size_t > & labels, const bool batchTraining)"

.PP
Train in streaming mode on the given dataset\&. This takes one pass\&. Be sure that \fBBuildModel()\fP has been called first!
.PP
\fBParameters:\fP
.RS 4
\fIdataset\fP Dataset to train on\&. 
.br
\fIlabels\fP Labels for training set\&. 
.br
\fIbatchTraining\fP Whether or not to train in batch\&. 
.RE
.PP

.SH "Member Data Documentation"
.PP 
.SS "\fBGiniBinaryTreeType\fP* mlpack::tree::HoeffdingTreeModel::giniBinaryTree\fC [private]\fP"

.PP
This is used if we are using the Gini impurity and the binary numeric split\&. 
.PP
Definition at line 224 of file hoeffding_tree_model\&.hpp\&.
.PP
Referenced by Serialize()\&.
.SS "\fBGiniHoeffdingTreeType\fP* mlpack::tree::HoeffdingTreeModel::giniHoeffdingTree\fC [private]\fP"

.PP
This is used if we are using the Gini impurity and the Hoeffding numeric split\&. 
.PP
Definition at line 220 of file hoeffding_tree_model\&.hpp\&.
.PP
Referenced by Serialize()\&.
.SS "\fBInfoBinaryTreeType\fP* mlpack::tree::HoeffdingTreeModel::infoBinaryTree\fC [private]\fP"

.PP
This is used if we are using the information gain and the binary numeric split\&. 
.PP
Definition at line 232 of file hoeffding_tree_model\&.hpp\&.
.PP
Referenced by Serialize()\&.
.SS "\fBInfoHoeffdingTreeType\fP* mlpack::tree::HoeffdingTreeModel::infoHoeffdingTree\fC [private]\fP"

.PP
This is used if we are using the information gain and the Hoeffding numeric split\&. 
.PP
Definition at line 228 of file hoeffding_tree_model\&.hpp\&.
.PP
Referenced by Serialize()\&.
.SS "\fBTreeType\fP mlpack::tree::HoeffdingTreeModel::type\fC [private]\fP"

.PP
The type of tree we are using\&. 
.PP
Definition at line 216 of file hoeffding_tree_model\&.hpp\&.
.PP
Referenced by Serialize()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for mlpack from the source code\&.
