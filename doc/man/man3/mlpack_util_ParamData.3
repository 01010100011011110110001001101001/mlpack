.TH "mlpack::util::ParamData" 3 "Sat Mar 25 2017" "Version master" "mlpack" \" -*- nroff -*-
.ad l
.nh
.SH NAME
mlpack::util::ParamData \- This structure holds all of the information about a single parameter, including its value (which is set when ParseCommandLine() is called)\&.  

.SH SYNOPSIS
.br
.PP
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "char \fBalias\fP"
.br
.RI "\fIAlias for this parameter\&. \fP"
.ti -1c
.RI "\fBstd::string\fP \fBboostName\fP"
.br
.RI "\fIThe name of the parameter, as seen by boost::program_options\&. \fP"
.ti -1c
.RI "\fBstd::string\fP(* \fBdefaultFunction\fP )(const \fBParamData\fP &)"
.br
.RI "\fIWhen the \fBCLI\fP object is asked to print help, output the default value\&. \fP"
.ti -1c
.RI "\fBstd::string\fP \fBdesc\fP"
.br
.RI "\fIDescription of this parameter, if any\&. \fP"
.ti -1c
.RI "bool \fBinput\fP"
.br
.RI "\fITrue if this option is an input option (otherwise, it is output)\&. \fP"
.ti -1c
.RI "bool \fBisFlag\fP"
.br
.RI "\fITrue if the wasPassed value should not be ignored\&. \fP"
.ti -1c
.RI "bool \fBisMappedString\fP"
.br
.RI "\fIIf this is a matrix or model parameter, then boost::program_options will actually represent this as a string\&. \fP"
.ti -1c
.RI "bool \fBloaded\fP"
.br
.RI "\fIIf this is an input parameter that needs extra loading, this indicates whether or not it has been loaded\&. \fP"
.ti -1c
.RI "boost::any \fBmappedValue\fP"
.br
.RI "\fIThe value that the user interacts with, if the type is different than the type of the parameter\&. \fP"
.ti -1c
.RI "\fBstd::string\fP \fBname\fP"
.br
.RI "\fIName of this parameter\&. \fP"
.ti -1c
.RI "bool \fBnoTranspose\fP"
.br
.RI "\fITrue if this is a matrix that should not be transposed\&. \fP"
.ti -1c
.RI "void(* \fBoutputFunction\fP )(const \fBParamData\fP &)"
.br
.RI "\fIWhen the \fBCLI\fP object is destructed, output options must be output\&. \fP"
.ti -1c
.RI "void(* \fBprintFunction\fP )(const \fBParamData\fP &)"
.br
.RI "\fIWhen the \fBCLI\fP object is destructed, output a string representation of the parameter\&. \fP"
.ti -1c
.RI "bool \fBrequired\fP"
.br
.RI "\fITrue if this option is required\&. \fP"
.ti -1c
.RI "\fBstd::string\fP(* \fBstringTypeFunction\fP )()"
.br
.RI "\fIWhen the \fBCLI\fP object is asked to print parameter types, output a string version of this parameter's type\&. \fP"
.ti -1c
.RI "\fBstd::string\fP \fBtname\fP"
.br
.RI "\fIType information of this parameter\&. \fP"
.ti -1c
.RI "boost::any \fBvalue\fP"
.br
.RI "\fIThe actual value that is held, as passed from the user (so the type could be different than the type of the parameter)\&. \fP"
.in -1c
.SH "Detailed Description"
.PP 
This structure holds all of the information about a single parameter, including its value (which is set when ParseCommandLine() is called)\&. 

It does not hold any information about whether or not it was passed---that is handled elsewhere\&. A \fBParamData\fP struct is only useful in order to get 'static' information about a parameter\&. Note that some parameter types have internal types but also different types that are used by boost::program_options (specifically, matrix and model types map to strings)\&.
.PP
This structure is somewhat unwieldy and is likely to be refactored at some point in the future, but for now it does the job fine\&. 
.PP
Definition at line 112 of file param_data\&.hpp\&.
.SH "Member Data Documentation"
.PP 
.SS "char mlpack::util::ParamData::alias"

.PP
Alias for this parameter\&. 
.PP
Definition at line 123 of file param_data\&.hpp\&.
.SS "\fBstd::string\fP mlpack::util::ParamData::boostName"

.PP
The name of the parameter, as seen by boost::program_options\&. 
.PP
Definition at line 147 of file param_data\&.hpp\&.
.SS "\fBstd::string\fP(* mlpack::util::ParamData::defaultFunction) (const \fBParamData\fP &)"

.PP
When the \fBCLI\fP object is asked to print help, output the default value\&. 
.PP
Definition at line 156 of file param_data\&.hpp\&.
.SS "\fBstd::string\fP mlpack::util::ParamData::desc"

.PP
Description of this parameter, if any\&. 
.PP
Definition at line 118 of file param_data\&.hpp\&.
.SS "bool mlpack::util::ParamData::input"

.PP
True if this option is an input option (otherwise, it is output)\&. 
.PP
Definition at line 132 of file param_data\&.hpp\&.
.SS "bool mlpack::util::ParamData::isFlag"

.PP
True if the wasPassed value should not be ignored\&. 
.PP
Definition at line 125 of file param_data\&.hpp\&.
.SS "bool mlpack::util::ParamData::isMappedString"

.PP
If this is a matrix or model parameter, then boost::program_options will actually represent this as a string\&. 
.PP
Definition at line 138 of file param_data\&.hpp\&.
.SS "bool mlpack::util::ParamData::loaded"

.PP
If this is an input parameter that needs extra loading, this indicates whether or not it has been loaded\&. 
.PP
Definition at line 135 of file param_data\&.hpp\&.
.SS "boost::any mlpack::util::ParamData::mappedValue"

.PP
The value that the user interacts with, if the type is different than the type of the parameter\&. This is used to store matrices, for instance, because 'value' must hold the string name that the user passed\&. 
.PP
Definition at line 145 of file param_data\&.hpp\&.
.PP
Referenced by mlpack::util::HandleRawParameter()\&.
.SS "\fBstd::string\fP mlpack::util::ParamData::name"

.PP
Name of this parameter\&. This is the name used for HasParam() and GetParam()\&. 
.PP
Definition at line 116 of file param_data\&.hpp\&.
.SS "bool mlpack::util::ParamData::noTranspose"

.PP
True if this is a matrix that should not be transposed\&. Ignored if the parameter is not a matrix\&. 
.PP
Definition at line 128 of file param_data\&.hpp\&.
.SS "void(* mlpack::util::ParamData::outputFunction) (const \fBParamData\fP &)"

.PP
When the \fBCLI\fP object is destructed, output options must be output\&. If 'input' is false, then this function pointer should point to a function that outputs the parameter\&. 
.PP
Definition at line 151 of file param_data\&.hpp\&.
.SS "void(* mlpack::util::ParamData::printFunction) (const \fBParamData\fP &)"

.PP
When the \fBCLI\fP object is destructed, output a string representation of the parameter\&. 
.PP
Definition at line 154 of file param_data\&.hpp\&.
.SS "bool mlpack::util::ParamData::required"

.PP
True if this option is required\&. 
.PP
Definition at line 130 of file param_data\&.hpp\&.
.SS "\fBstd::string\fP(* mlpack::util::ParamData::stringTypeFunction) ()"

.PP
When the \fBCLI\fP object is asked to print parameter types, output a string version of this parameter's type\&. 
.PP
Definition at line 159 of file param_data\&.hpp\&.
.SS "\fBstd::string\fP mlpack::util::ParamData::tname"

.PP
Type information of this parameter\&. Note that this is \fBTYPENAME()\fP of the user-visible parameter type, not whatever is given by ParameterType<>\&. 
.PP
Definition at line 121 of file param_data\&.hpp\&.
.SS "boost::any mlpack::util::ParamData::value"

.PP
The actual value that is held, as passed from the user (so the type could be different than the type of the parameter)\&. 
.PP
Definition at line 141 of file param_data\&.hpp\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for mlpack from the source code\&.
