/*!
@file image.txt
@author Mehul Kumar Nirala
@brief Tutorial for how to load and save images in mlpack.

@page imagetutorial Image Utilities tutorial

@section intro_imagetut Introduction

Image dataset are becoming increasingly popular in deep learning.

mlpack currently implements saving and loading of image. It uses [stb/](https://github.com/nothings/stb) to achieve this.

@section toc_imagetut Table of Contents

This tutorial is split into the following sections:

 - \ref intro_imagetut
 - \ref toc_imagetut
 - \ref model_api_imagetut
 - \ref imageinfo_api_imagetut
 - \ref load_api_imagetut
 - \ref save_api_imagetut

@section model_api_imagetut Model API

Image utilities supports loading and saving of image. Images can also be loaded from a directory if CXX version >= 17 as it requires <filesystem> header to navigate a directory.

It supports filetypes "jpg", "png", "tga","bmp", "psd", "gif", "hdr", "pic", "pnm" for loading and "jpg", "png", "tga", "bmp", "hdr" for saving.

The datatype associated is unsigned char to support RGB values in the range 1-255. To feed data into the network typecast of `arma::Mat` may be required. Images are stored in matrix as (width * height * channels, n_images). Therefore imageMatrix.col(0) would be first image if images are loaded in imageMatrix.

@section imageinfo_api_imagetut ImageInfo

ImageInfo class contains the metadata of the images.
@code
  /**
   * Instantiate the ImageInfo object with the image width, height, channels.
   *
   * @param width Image width.
   * @param height Image height.
   * @param channels number of channels in the image.
   */
  ImageInfo(const size_t width,
            const size_t height,
            const size_t channels);
@endcode
Other public memebers include:
  - flipVertical Flip the image vertical upon loading.
  - quality Compression of the image if saved as jpg (0-100).

@section load_api_imagetut Load

Image can be loaded standalone or from a directory.

Standalone loading of images.
@code
  /**
   * Load the image file into the given matrix.
   *
   * @param filename Name of the image file.
   * @param matrix Matrix to load the image into.
   * @param info An object of ImageInfo class.
   * @param fatal If an error should be reported as fatal (default false).
   * @param transpose If true, transpose the matrix after loading.
   * @return Boolean value indicating success or failure of load.
   */
   template<typename eT>
   bool Load(const std::string& filename,
             arma::Mat<eT>& matrix,
             ImageInfo& info,
             const bool fatal,
             const bool transpose);
@endcode

Loading a test image. It also fills up the ImageInfo class object.
@code
data::ImageInfo info;
data::Load("test_image.png", matrix, info, false);
@endcode

If the size of image is known beforehand, it can be passed into the constructor of ImageInfo to set the size of outputMatrix(the matrix into which the image is loaded).

@code
size_t height = 64, width = 64, channels = 1;
data::ImageInfo info(width, height, channels);
@endcode

More than one image can be loaded into the same matrix.

Loading multiple images:

@code
  /**
   * Load the image file into the given matrix.
   *
   * @param files A vector consisting of filenames.
   * @param matrix Matrix to save the image from.
   * @param info An object of ImageInfo class.
   * @param fatal If an error should be reported as fatal (default false).
   * @param transpose If true, transpose the matrix after loading.
   * @return Boolean value indicating success or failure of load.
   */
   template<typename eT>
   bool Load(const std::vector<std::string>& files,
             arma::Mat<eT>& matrix,
             ImageInfo& info,
             const bool fatal,
             const bool transpose);
@endcode

@code
  data::ImageInfo info;
  std::vector<std::string>> files{"test_image1.bmp","test_image2.bmp"};
  data::load(files, matrix, info, false, true);
@endcode


Loading images from a directory is possible if C++ version >= 17.

@code
  /**
   * Load the image file into the given matrix.
   *
   * @param dirPath Path containing the image files.
   * @param flipVertical Flip the image vertical upon loading.
   * @param outputMatrix Matrix to load into.
   * @return Boolean value indicating success or failure of load.
   */
  bool LoadDir(const std::string& dirPath,
               bool flipVertical,
               arma::Mat<unsigned char>&& outputMatrix);
@endcode

@code
data::Image loader;
// Matrix to load contents of dir into.
arma::Mat<unsigned char> img;
loader.LoadDir("images/", true, img);
@endcode

@section save_api_imagetut Save

Save images expects a matrix of type unsigned char in the form (width * height * channels, n_images).
Just like load it can be used to save one image or multiple images. Besides image data it also expects the shape of the image as input (width, height, channels).

Saving one image:

@code
  /**
   * Save the image file from the given matrix.
   *
   * @param filename Name of the image file.
   * @param matrix Matrix to save the image from.
   * @param info An object of ImageInfo class.
   * @param fatal If an error should be reported as fatal (default false).
   * @param transpose If true, transpose the matrix after loading.
   * @return Boolean value indicating success or failure of load.
   */
   template<typename eT>
   bool Save(const std::string& filename,
             arma::Mat<eT>& matrix,
             ImageInfo& info,
             const bool fatal,
             const bool transpose);
@endcode

@code
  data::ImageInfo info;
  info.width = info.height = 25;
  info.channels = 3;
  info.quality = 90;
  data::Save("test_image.bmp", matrix, info, false, true);
@endcode

If the matrix contains more than one image, only the first one is saved.

Saving multiple images:

@code
  /**
   * Save the image file from the given matrix.
   *
   * @param files A vector consisting of filenames.
   * @param matrix Matrix to save the image from.
   * @param info An object of ImageInfo class.
   * @param fatal If an error should be reported as fatal (default false).
   * @param transpose If true, transpose the matrix after loading.
   * @return Boolean value indicating success or failure of load.
   */
   template<typename eT>
   bool Save(const std::vector<std::string>& files,
             arma::Mat<eT>& matrix,
             ImageInfo& info,
             const bool fatal,
             const bool transpose);
@endcode

@code
  data::ImageInfo info;
  info.width = info.height = 25;
  info.channels = 3;
  info.quality = 90;
  std::vector<std::string>> files{"test_image1.bmp", "test_image2.bmp"};
  data::Save(files, matrix, info, false, true);
@endcode

Multiple images are saved according to the vector of file name specified.

*/
